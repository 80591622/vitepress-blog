import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const E=JSON.parse('{"title":"错误机制","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/vue/error-handler.md","filePath":"workspace/Frame/vue/error-handler.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/vue/error-handler.md"},e=l(`<h1 id="错误机制" tabindex="-1">错误机制 <a class="header-anchor" href="#错误机制" aria-label="Permalink to &quot;错误机制&quot;">​</a></h1><h2 id="源码解析" tabindex="-1">源码解析 <a class="header-anchor" href="#源码解析" aria-label="Permalink to &quot;源码解析&quot;">​</a></h2><p>文件路径<code>vue/src/core/util/error.js</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> config</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;../config&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">warn</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./debug&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">inBrowser</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">inWeex</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./env&#39;</span><span style="color:#7F848E;font-style:italic;">  // 运行的平台</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">isPromise</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;shared/util&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*自己实现一个版本，前几天一个npm小项目的更新给整个npm生态系统制造了一场混乱，影响到了数百万 JS 项目。这个库就是 is-promise；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* function isPromise(val){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    return (typeof val === &#39;object&#39; || typeof val === &#39;function&#39;) &amp;&amp; val !==null &amp;&amp;  typeof val.then === &#39;function&#39; &amp;&amp; typeof val.catch === &#39;function&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">pushTarget</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">popTarget</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;../observer/dep&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 处理错误信息, 进行错误上报</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // err错误对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // vm Vue实例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // info是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 只在 2.2.0+ 可用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 当错误函数处理错误时，停用deps跟踪以避免可能出现的infinite rendering</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // See: https://github.com/vuejs/vuex/issues/1505</span></span>
<span class="line"><span style="color:#61AFEF;">  pushTarget</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> cur</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vm</span><span style="color:#7F848E;font-style:italic;">  // 获取当前的错误组件，然后递归查找当前组件的父组件，依次调用errorCaptured 方法。</span></span>
<span class="line"><span style="color:#C678DD;">      while</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">cur</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cur</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$parent</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> hooks</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cur</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">errorCaptured</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hooks</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">          for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> hooks</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">              // 逐个执行</span></span>
<span class="line"><span style="color:#C678DD;">              const</span><span style="color:#E5C07B;"> capture</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> hooks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cur</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">              if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">capture</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#7F848E;font-style:italic;">   // 返回false 默认不会向上递归</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">              globalHandleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cur</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;errorCaptured hook&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 最后执行全局的errorHandler，返回返回false就中断了</span></span>
<span class="line"><span style="color:#61AFEF;">    globalHandleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    popTarget</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理异步错误</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> invokeWithErrorHandling</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">  handler</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  args</span><span style="color:#ABB2BF;">: null | </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  vm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> res</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    res</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> handler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> handler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">res</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_isVue</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> isPromise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_handled</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> \` (Promise/async)\`</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">      res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_handled</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    handleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> res</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> globalHandleError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">errorHandler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">errorHandler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //如果用户有意在处理程序中抛出原始错误，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //不要记录两次，一次性输出</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        logError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;config.errorHandler&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  logError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> logError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;production&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Error in </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">info</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">: &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot;\`</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">inBrowser</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> inWeex</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> console</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#E06C75;"> err</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">* ErrorBoundary  错误边界</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">* react</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* class ErrorBoundary extends React.Component {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    constructor(props) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        super(props);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        this.state = { hasError: false };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    componentDidCatch(error, info) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        this.setState({ hasError: true });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        // 将异常信息上报给服务器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        logErrorToMyService(error, info);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    render() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        if (this.state.hasError) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*            return &#39;出错了&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*        return this.props.children;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* }</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">* vue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* Vue.component(&#39;ErrorBoundary&#39;, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  data: () =&gt; ({ error: null }),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  errorCaptured (err, vm, info) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    this.error = \`\${err.stack}\\n\\nfound in \${info} of component\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    return false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  render (h) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    if (this.error) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*      return h(&#39;pre&#39;, { style: { color: &#39;red&#39; }}, this.error)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    // ignoring edge cases for the sake of demonstration</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    return this.$slots.default[0]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* &lt;ErrorBoundary&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*   &lt;this.props.children&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* &lt;/ErrorBoundary&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 笔记</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">* 组件内部使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* errorCaptured(...opt) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*   //  当前组件报错，他会顺着父组件向上传递，直接到全局的errorHandler</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    console.log(&#39;你大爷的&#39;, opt);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    return false   // 错误会被阻止，不会换起上一级的 errorCaptured 和全局的errorHandler</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">* 全局使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*Vue.config.errorHandler = function (err, vm, info) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  // throw Error(&#39;抛出一个错误&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  let {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    message, // 异常信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    name, // 异常名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*   stack  // 异常堆栈信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* } = err;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* console.log(&#39;----1111----&#39;, name);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* console.log(&#39;----1111----&#39;, message);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* console.log(&#39;----1111----&#39;, stack);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* console.log(&#39;----2222----&#39;, vm,);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* console.log(&#39;----3333----&#39;, info);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* // 可以执行一步操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* throw Error(&#39;抛出一个错误&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br></div></div><h2 id="react的error解析" tabindex="-1">react的error解析 <a class="header-anchor" href="#react的error解析" aria-label="Permalink to &quot;react的error解析&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// koa2</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/errorMsg/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> error</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;; </span><span style="color:#7F848E;font-style:italic;">// 获取前端传过来的报错对象</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scriptURI</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 压缩文件路径</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // map文件路径  vue的官方不建议上传 .map 文件，说是容易看到很多源码，react何尝不是呢</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 所以可以直接传递给服务器当前的 .map 文件</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> fileUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;client/&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;.map&#39;</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 解析sourceMap</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> smc</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> sourceMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SourceMapConsumer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> fileUrl</span><span style="color:#ABB2BF;">), </span><span style="color:#98C379;">&#39;utf8&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 返回一个promise对象</span></span>
<span class="line"><span style="color:#E5C07B;">        smc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 解析原始报错数据</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">originalPositionFor</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">                line</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lineNo</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 压缩后的行号</span></span>
<span class="line"><span style="color:#E06C75;">                column</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">columnNo</span><span style="color:#7F848E;font-style:italic;"> // 压缩后的列号</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 上报地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 将异常上报至后台</span></span>
<span class="line"><span style="color:#61AFEF;">            fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">                method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">                    &#39;Content-Type&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;application/json&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">                },</span></span>
<span class="line"><span style="color:#E06C75;">                body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">                    errorMessage</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">errorMessage</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 报错信息</span></span>
<span class="line"><span style="color:#E06C75;">                    source</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 报错文件路径</span></span>
<span class="line"><span style="color:#E06C75;">                    line</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 报错文件行号</span></span>
<span class="line"><span style="color:#E06C75;">                    column</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">column</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 报错文件列号</span></span>
<span class="line"><span style="color:#E06C75;">                    stack</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#7F848E;font-style:italic;"> // 报错堆栈</span></span>
<span class="line"><span style="color:#ABB2BF;">                })</span></span>
<span class="line"><span style="color:#ABB2BF;">            }).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">json</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">json</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>`,6),o=[e];function r(c,t,i,y,B,F){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{E as __pageData,u as default};
