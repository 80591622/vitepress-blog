import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const g=JSON.parse('{"title":"git恢复上一次的修改","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Git/git-cherry.md","filePath":"workspace/Git/git-cherry.md","lastUpdated":1713942612000}'),p={name:"workspace/Git/git-cherry.md"},e=l(`<h1 id="git恢复上一次的修改" tabindex="-1">git恢复上一次的修改 <a class="header-anchor" href="#git恢复上一次的修改" aria-label="Permalink to &quot;git恢复上一次的修改&quot;">​</a></h1><h3 id="查看谁修改的代码" tabindex="-1">查看谁修改的代码 <a class="header-anchor" href="#查看谁修改的代码" aria-label="Permalink to &quot;查看谁修改的代码&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> blame</span></span>
<span class="line"><span style="color:#61AFEF;">比如多人协作的情况下线上出问题了，可以通过git</span><span style="color:#98C379;"> blame清楚的知道是谁对文件进行了修改了。下面给出一个例子:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//(1</span><span style="color:#ABB2BF;">)第一步进入到我们的本地git仓库</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -a</span></span>
<span class="line"><span style="color:#61AFEF;">//(2</span><span style="color:#ABB2BF;">)假如我们是要查看远程的daily/1.1.68分支的修改情况，执行下面的命令</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;">  remotes/origin/daily/1.1.68</span></span>
<span class="line"><span style="color:#61AFEF;">//(3</span><span style="color:#ABB2BF;">)查看远程分支src/pages/item/ItemTable/ItemTable.js文件的修改</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> blame</span><span style="color:#98C379;"> src/pages/item/ItemTable/ItemTable.js</span></span>
<span class="line"><span style="color:#61AFEF;">//(4</span><span style="color:#ABB2BF;">)此时会显示每一行代码的修改者</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="git-log" tabindex="-1">git log <a class="header-anchor" href="#git-log" aria-label="Permalink to &quot;git log&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">下面只是给出几种显示log的方式：</span></span>
<span class="line"><span style="color:#61AFEF;">//压缩模式，在每个提交的旁边显示经过精简的提交哈希码和提交信息，以一行显示</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --oneline</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//图形模式，使用该选项会在输出的左边绘制一张基于文本格式的历史信息表示图。如果你查看的是单个分支的历史记录的话，该选项无效</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --graph</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> 显示所有分支的历史记录</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="git-reset-撤回回退的代码" tabindex="-1">git reset &amp; 撤回回退的代码 <a class="header-anchor" href="#git-reset-撤回回退的代码" aria-label="Permalink to &quot;git reset &amp; 撤回回退的代码&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reflog</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> cherry-pick</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">场景:</span><span style="color:#98C379;"> 你提交了几个commit，然后用</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> 撤销了这些修改，接着你又意识到：你</span><span style="color:#98C379;">    希</span><span style="color:#98C379;">  望还原这些修改！</span></span>
<span class="line"><span style="color:#61AFEF;">    原理:</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> reflog</span><span style="color:#98C379;"> 对于恢复项目历史是一个超棒的资源。你可以恢复几乎任何东西</span><span style="color:#98C379;"> —</span><span style="color:#98C379;"> 任何你commit</span><span style="color:#98C379;"> 过的东西</span><span style="color:#98C379;"> —</span><span style="color:#98C379;"> 只要通过</span><span style="color:#98C379;"> reflog。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">你可能已经熟悉了</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> log</span><span style="color:#98C379;"> 命令，它</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">会显示commit的列表</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">。</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> reflog</span><span style="color:#98C379;"> 也是类似的，不过它显示的是一个</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">HEAD发生改变的时间列表</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">一些注意事项：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">1</span><span style="color:#ABB2BF;">)它涉及的只是*HEAD的改变*。在你切换分支、用git commit进行提交、以及用 git reset撤销 commit时，HEAD会改变，但当你用 git checkout -- 撤销时(</span><span style="color:#61AFEF;">只是替换文件，分支不变</span><span style="color:#ABB2BF;">)，HEAD 并不会改变 — 如前所述，这些修改从来没有被提交过，因此reflog 也无法帮助我们恢复它们。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">2</span><span style="color:#ABB2BF;">)git reflog不会永远保持。Git 会定期清理那些 “用不到的” 对象。不要指望几个月前的提交还一直躺在那里。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">3</span><span style="color:#ABB2BF;">)你的reflog就是你的，只是你的。你不能用 git reflog 来恢复另一个开发者没有 push 过的 commit。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">下面我们演示一个例子:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//(1</span><span style="color:#ABB2BF;">)第一次修改并提交</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> -A</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//(2</span><span style="color:#ABB2BF;">)第二次修改和提交</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> -A</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//(3</span><span style="color:#ABB2BF;">)第三次修改和提交</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> -A</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">//(4</span><span style="color:#ABB2BF;">)取消第三次提交</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> HEAD~1</span></span>
<span class="line"><span style="color:#61AFEF;">//注意：此时运行git</span><span style="color:#98C379;"> log会没有第三次提交的log信息，但是reflog却可以看到HEAD指针的移动历史</span></span>
<span class="line"><span style="color:#61AFEF;">下面我们看看git</span><span style="color:#98C379;"> reflog的HEAD的改变历史:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">如果我们要恢复上一次的修改只要执行如下的命令就可以了:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> cherry-pick</span><span style="color:#98C379;"> 52e3fa6</span></span>
<span class="line"><span style="color:#61AFEF;">//52e3fa6表示第三次的修改的hash</span></span>
<span class="line"><span style="color:#61AFEF;">此时运行了git</span><span style="color:#98C379;"> cherry-pick之后，我们通过git</span><span style="color:#98C379;"> log可以看到第三次的提交信息了。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="tag回退代码" tabindex="-1">Tag回退代码 <a class="header-anchor" href="#tag回退代码" aria-label="Permalink to &quot;Tag回退代码&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;">&#39;1.0.0&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> tag</span><span style="color:#98C379;"> v1.0.0</span><span style="color:#98C379;"> //打tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> master</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#D19A66;"> --tags</span><span style="color:#98C379;">  or</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> v1.0.0</span><span style="color:#98C379;"> //本地tag推送到线上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> tag</span><span style="color:#98C379;">  //查看所有的tag</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> tag</span><span style="color:#D19A66;"> -d</span><span style="color:#98C379;"> v1.0.0</span><span style="color:#98C379;"> //本地删除tag</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> :refs/tags/v1.0.0</span><span style="color:#98C379;">  //本地tag删除了，再执行该句，删除线上tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> v1.0.0</span><span style="color:#98C379;"> //切换tag,完成代码回退</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> show</span><span style="color:#D19A66;"> 1.0.0</span><span style="color:#98C379;">  or</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> show</span><span style="color:#98C379;"> v1.0.0^{tree}//查看相关信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="danger custom-block"><p class="custom-block-title">特别注意</p><p>通过标签回退版本后，尽量不要改动代码，如果一定要修改代码<code>必须马上拉一个分支</code>，然后当前的主干的分支立即回到原来的位置，否则正在开发的分支可能白干了，并且不能把改动的代码合并到主干，接着在刚拉的分支上改bug,修改完毕后合并在主干上</p></div><p><code>如果你通过标签回退版本后，立马改了当前的分支，很不幸你就成功的push不到Git上了，看提示的错误：</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">hint:</span><span style="color:#98C379;"> Updates</span><span style="color:#98C379;"> were</span><span style="color:#98C379;"> rejected</span><span style="color:#98C379;"> because</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> contains</span><span style="color:#98C379;"> work</span><span style="color:#98C379;"> that</span><span style="color:#98C379;"> you</span><span style="color:#98C379;"> do</span></span>
<span class="line"><span style="color:#61AFEF;">hint:</span><span style="color:#98C379;"> not</span><span style="color:#98C379;"> have</span><span style="color:#98C379;"> locally.</span><span style="color:#98C379;"> This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> usually</span><span style="color:#98C379;"> caused</span><span style="color:#98C379;"> by</span><span style="color:#98C379;"> another</span><span style="color:#98C379;"> repository</span><span style="color:#98C379;"> pushing</span></span>
<span class="line"><span style="color:#61AFEF;">hint:</span><span style="color:#98C379;"> to</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> same</span><span style="color:#98C379;"> ref.</span><span style="color:#98C379;"> You</span><span style="color:#98C379;"> may</span><span style="color:#98C379;"> want</span><span style="color:#98C379;"> to</span><span style="color:#98C379;"> first</span><span style="color:#98C379;"> integrate</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> changes</span></span>
<span class="line"><span style="color:#61AFEF;">hint:</span><span style="color:#ABB2BF;"> (e.g., </span><span style="color:#98C379;">&#39;git pull ...&#39;</span><span style="color:#ABB2BF;">) before pushing again.</span></span>
<span class="line"><span style="color:#61AFEF;">hint:</span><span style="color:#98C379;"> See</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> &#39;Note about fast-forwards&#39;</span><span style="color:#98C379;"> in</span><span style="color:#98C379;"> &#39;git push --help&#39;</span><span style="color:#98C379;"> for</span><span style="color:#98C379;"> details.</span></span>
<span class="line"><span style="color:#61AFEF;">//更新被拒绝，因为远程包含您所做的工作,大致意思就是你之前的提交的那个库指向同一引用，且低于一个版本，要你集成远程更改</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>有如下几种解决方法：</p></blockquote><p><strong>1：使用强制push的方法：</strong></p><p>git push -u origin [name] -f</p><p>太暴力，峰哥不喜欢 ，这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。</p><p><strong>2：push前先将远程repository修改pull下来</strong></p><p>git pull origin [name]</p><p>一般会让你解决冲突，然后还要merge一堆破事,不过这个冲突总是要解决的，你就看看是你解决还是等人来解决。</p><p><strong>3：若不想merge远程和本地修改，可以先创建新的分支：</strong></p><p>git checkout -b [name]</p><p>然后git push -u origin [name] 万事大吉，实在不行后期你直接 git push origin --delete [name]不留痕迹</p>`,22),o=[e];function r(c,t,i,y,b,u){return a(),n("div",null,o)}const C=s(p,[["render",r]]);export{g as __pageData,C as default};
