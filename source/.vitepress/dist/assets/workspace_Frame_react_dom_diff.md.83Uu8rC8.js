import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const F=JSON.parse('{"title":"VirtualDOM","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/react/dom_diff.md","filePath":"workspace/Frame/react/dom_diff.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/react/dom_diff.md"},e=l(`<h1 id="virtualdom" tabindex="-1">VirtualDOM <a class="header-anchor" href="#virtualdom" aria-label="Permalink to &quot;VirtualDOM&quot;">​</a></h1><p><strong>React 的核心思想</strong></p><p>给我一个数据，我根据这个数据生成一个全新的<code>Virtual DOM</code>，然后跟我上一次生成的Virtual DOM去 <code>diff</code>，得到一个<code>Patch</code>， 然后把这个Patch打到浏览器的DOM上去。完事,并且这里的patch显然<code>不是完整的虚拟DOM</code>， 而是新的虚拟DOM和上一次的虚拟DOM经过<code>diff</code>后的<code>差异化</code>的部分。</p><h2 id="jsx和createelement" tabindex="-1">JSX和createElement <a class="header-anchor" href="#jsx和createelement" aria-label="Permalink to &quot;JSX和createElement&quot;">​</a></h2><p>我们在实现一个React组件时可以选择两种编码方式，第一种是使用<code>JSX</code>编写：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Hello</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Hello wk&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第二种是直接使用<code>React.createElement</code>编写：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Hello</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`Hello wk\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>实际上，上面两种写法是等价的，<code>JSX只是为 React.createElement(component, props, ...children)</code>方法提供的语法糖。也就是说所有的JSX代码最后都会转换成<code>React.createElement(...)</code>，<code>Babel</code>帮助我们完成了这个转换的过程。</p><p><strong>注意</strong>：babel在编译时会判断JSX中组件的首字母，当<code>首字母为小写时</code>，其被认定为<code>原生DOM标签</code>，createElement的第一个变量被编译为字符串；当<code>首字母为大写时</code>，其被认定为自定义<code>组件</code>，createElement的第一个变量被<code>编译为对象</code>,所以组件首字母要大写</p><h2 id="virtual-dom" tabindex="-1">Virtual DOM <a class="header-anchor" href="#virtual-dom" aria-label="Permalink to &quot;Virtual DOM&quot;">​</a></h2><p><img src="https://lsqimg-1257917459.cos-website.ap-beijing.myqcloud.com/blog/%E8%99%9A%E6%8B%9Fdom.png" alt=""></p><p>冷静对待虚拟dom，他不是一定能够提升页面的性能，如果是首次渲染，Vitrua lDom不具有任何优势，甚至它要进行更多的计算，消耗更多的内存，是因为有diff他才会展现它的优势</p><h3 id="virtual-dom的存在的意义" tabindex="-1">Virtual DOM的存在的意义 <a class="header-anchor" href="#virtual-dom的存在的意义" aria-label="Permalink to &quot;Virtual DOM的存在的意义&quot;">​</a></h3><ul><li>Vitrua Dom为React带来了跨平台渲染的能力。以React Native为例子;React根据Vitrual Dom画出相应平台的ui层，只不过不同平台画的姿势不同而已</li><li>服务端渲染</li><li>函数式编程</li></ul><h3 id="virtual-dom-基本步骤" tabindex="-1">Virtual DOM 基本步骤: <a class="header-anchor" href="#virtual-dom-基本步骤" aria-label="Permalink to &quot;Virtual DOM 基本步骤:&quot;">​</a></h3><ol><li>用<code>js对象来表示DOM树的结构</code>； 然后用这个树构建一个真正的DOM树，插入到文档中。</li><li>当状态变更的时候，<code>重新构造一个新的对象</code>，然后用这个新的树和旧的树作对比，记录<code>两个树的差异</code>。</li><li>把2所记录的差异应用在步骤1所构建的真正的DOM树上，视图就更新了。</li></ol><p>看看虚拟DOM的真实模样</p><p><img src="https://ae01.alicdn.com/kf/H66008463790e4f8d9feaa1f12800ee9cm.png" alt=""></p><ul><li><code>type</code>：元素的类型，可以是原生html类型（字符串），或者自定义组件（函数或class）</li><li><code>key</code>：组件的唯一标识，用于Diff算法</li><li><code>ref</code>：用于访问原生dom节点</li><li><code>props</code>：传入组件的props</li><li><code>owner</code>：当前正在构建的Component所属的Component</li><li><code>$$typeof</code>：防止xss攻击，如果你的服务器有一个漏洞，允许用户存储任意JSON对象， 而客户端代码需要一个字符串，这可能为你的应用程序带来风险。JSON中不能存储Symbol类型的变量，而React渲染时会把没有<code>$$typeof</code>标识的组件过滤掉。</li><li><code>self</code>指定当前位于哪个组件实例。</li><li><code>_source</code>指定调试代码来自的文件(fileName)和代码行数(lineNumber)。</li></ul><h3 id="简单实现-vdom" tabindex="-1">简单实现 vdom <a class="header-anchor" href="#简单实现-vdom" aria-label="Permalink to &quot;简单实现 vdom&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./createElement.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 创建虚拟dom用的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> type</span><span style="color:#7F848E;font-style:italic;"> 标签的类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> options</span><span style="color:#7F848E;font-style:italic;"> props</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;">  {...any}</span><span style="color:#E06C75;font-style:italic;"> arg</span><span style="color:#7F848E;font-style:italic;"> 子代</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // options肯定是一个对象，不管传还是不传</span></span>
<span class="line"><span style="color:#E06C75;">        options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //arg是存储上下的参数，即使没有其他的参数，arg也是一个空数组，</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            key</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            ref</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            props</span><span style="color:#ABB2BF;">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //key ref</span></span>
<span class="line"><span style="color:#ABB2BF;">        [</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ref&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">item</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">                delete</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //处理props</span></span>
<span class="line"><span style="color:#E5C07B;">        obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //因为我这用的es6语法，下面的判断没什么作用，用es5的话需要加上</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            case</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">                obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arg</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 拥有多个子节点</span></span>
<span class="line"><span style="color:#E5C07B;">                obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arg</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ReactDom</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 将虚拟节点转换成真实的dom节点，最后插入到container容器中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> objJSX</span><span style="color:#7F848E;font-style:italic;"> 编译后的虚拟节点</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> container</span><span style="color:#7F848E;font-style:italic;"> 要渲染到那个容器中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> callback</span><span style="color:#7F848E;font-style:italic;"> 回调函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">objJSX</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> newEle</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDomElementFromVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">objJSX</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newEle</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        callback</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> createDomElementFromVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">objJSX</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> objJSX</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newEle</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //设置属性</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //className</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;className&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">newEle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;class&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;className&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //style设置</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;style&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> props</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;style&#39;</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">                    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;style&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">                        objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newEle</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;style&quot;</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> props</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;style&quot;</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">                    }</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //children</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;children&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                let</span><span style="color:#E06C75;"> children</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> props</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;children&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">children</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">itemChildren</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                        ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">itemChildren</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newEle</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                    });</span></span>
<span class="line"><span style="color:#C678DD;">                    continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newEle</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">                continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">newEle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> objJSX</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newEle</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> handChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newEle</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //只有一个子节点</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> children</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //当前唯一的新对象</span></span>
<span class="line"><span style="color:#E5C07B;">            ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEle</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            newEle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createTextNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newEle</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> styleObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        style</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">styleObj</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h2&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;title&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u8FD9\\u91CC\\u662F\\u5934\\u90E8</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;newsItem&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        style</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">          color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#ccc&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u54C8\\u54C8\\u54C8</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u5475\\u5475\\u5475</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">)), </span><span style="color:#98C379;">&quot;1221&quot;</span><span style="color:#ABB2BF;">), </span></span>
<span class="line"><span style="color:#E5C07B;">    window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">app</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br></div></div><p>然后根据不同的情况，来进行树上节点的增删改的操作。这个过程是分为diff和patch：</p><ul><li><strong>diff</strong>：递归对比两棵 VDom 树的、对应位置的节点差异</li><li><strong>patch</strong>：根据不同的差异，进行节点的更新</li></ul><h2 id="diff" tabindex="-1">diff <a class="header-anchor" href="#diff" aria-label="Permalink to &quot;diff&quot;">​</a></h2><p>其实React的 virtual dom的性能好也离不开它本身特殊的diff算法。传统的diff算法时间复杂度达到O(n3)，而react的diff算法时间复杂度只是o(n)，react的diff能减少到o(n)依靠的是react diff的三大策略。</p><h3 id="传统diff-对比-react-diff" tabindex="-1">传统diff 对比 react diff <a class="header-anchor" href="#传统diff-对比-react-diff" aria-label="Permalink to &quot;传统diff 对比 react diff&quot;">​</a></h3><p>传统的diff算法追求的是“<code>完全</code>”以及“<code>最小</code>”，而react diff则是放弃了这两种追求： 在传统的diff算法下，对比前后两个节点，<code>如果发现节点改变了，会继续去比较节点的子节点，一层一层去对比</code>。就这样循环递归去进行对比，复杂度就达到了O(n3)，n是树的节点数，想象一下如果这棵树有1000个节点，我们得执行上十亿次比较，这种量级的对比次数，时间基本要用秒来做计数单位了。</p><h3 id="react-diff-三大策略" tabindex="-1">React diff 三大策略 <a class="header-anchor" href="#react-diff-三大策略" aria-label="Permalink to &quot;React diff 三大策略&quot;">​</a></h3><ul><li><strong>tree diff</strong>：Web UI中DOM节点跨层级的移动操作特别少，可以忽略不计。<code>（DOM结构发生改变-----直接卸载并重新creat）</code></li><li><strong>component diff</strong>：组件的DOM结构一样-----不会卸载,但是会update</li><li><strong>element diff</strong>：所有同一层级的子节点.他们都可以通过key来区分-----同时遵循1.2两点</li></ul><p><img src="https://ae01.alicdn.com/kf/H9b1d122f787048f7afc393265e732d28D.png" alt=""></p><h3 id="虚拟dom树分层比较-tree-diff" tabindex="-1">虚拟DOM树分层比较（<code>tree diff</code>） <a class="header-anchor" href="#虚拟dom树分层比较-tree-diff" aria-label="Permalink to &quot;虚拟DOM树分层比较（\`tree diff\`）&quot;">​</a></h3><p><img src="https://ae01.alicdn.com/kf/H087b9d785877406b94078d9b6a07c15av.png" alt=""></p><p>上图中，<strong>div只会和同一层级的div对比，第二层级的只会和第二层级对比。 这样算法复杂度就可以达到O(n)</strong>。</p><p>但是如果DOM节点出现了跨层级操作，diff会如何处理？</p><p>React是不会机智的判断出子树仅仅是发生了移动，而是<strong>会直接销毁</strong>，并重新创建这个子树，然后再挂在到目标DOM上;<br> 实际上，React官方也并不推荐我们做出跨层级的骚操作。所以我们可以从中悟出一个道理：就是我们自己在实现组件的时候，一个稳定的DOM结构是有助于我们的性能提升的。</p><h3 id="组件间的比较-component-diff" tabindex="-1">组件间的比较（<code>component diff</code>） <a class="header-anchor" href="#组件间的比较-component-diff" aria-label="Permalink to &quot;组件间的比较（\`component diff\`）&quot;">​</a></h3><p>核心的策略还是看结构是否发生改变。React是基于组件构建应用的，对于组件间的比较所采用的策略也是非常简洁和高效的。</p><p><strong>如果是同一个类型的组件</strong>，则按照原策略进行Virtual DOM比较。<br><strong>如果不是同一类型的组件</strong>，则将其判断为dirty component，从而替换整个组价下的所有子节点。<br><strong>如果是同一个类型的组件，有可能经过一轮Virtual DOM比较下来，并没有发生变化</strong>。如果我们能够提前确切知道这一点，那么就可以省下大量的diff运算时间。因此，React允许用户通过shouldComponentUpdate()来判断该组件是否需要进行diff算法分析。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 对比自定义组件</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> diffComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newNode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_component</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_component</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeName</span><span style="color:#ABB2BF;">)) { </span><span style="color:#7F848E;font-style:italic;">// 如果新老组件不同, 则直接将新组件替换老组件</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> newDom</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vdomToDom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_component</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newDom</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_component</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_component</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_component</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_component</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 如果新老组件相同, 则将新组件的 props 赋到老组件上</span></span>
<span class="line"><span style="color:#61AFEF;">    renderComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_component</span><span style="color:#ABB2BF;">)              </span><span style="color:#7F848E;font-style:italic;">// 对获得新 props 前后的老组件做 diff 比较（renderComponent 中调用了 diff）</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="元素间的比较-element-diff" tabindex="-1">元素间的比较（<code>element diff</code>） <a class="header-anchor" href="#元素间的比较-element-diff" aria-label="Permalink to &quot;元素间的比较（\`element diff\`）&quot;">​</a></h3><p>当节点处于同一层级的时候，react diff 提供了三种节点操作：<strong>插入、删除、移动</strong>。</p><p><span style="display:block;text-align:left;"> 操作</span>|<span style="display:block;text-align:left;"> 描述</span>| --|:--😐:--😐--| 插入|新节点不存在于老集合当中，即全新的节点，就会执行插入操作| 移动|新节点在老集合中存在，并且只做了位置上的更新，就会复用之前的节点，做移动操作（依赖于Key）| 删除|新节点在老集合中存在，但节点做出了更改不能直接复用，做出删除操作|</p><h3 id="key的作用" tabindex="-1">Key的作用 <a class="header-anchor" href="#key的作用" aria-label="Permalink to &quot;Key的作用&quot;">​</a></h3><p><strong>react利用key来识别组件，它是一种身份标识标识，就像我们的身份证用来辨识一个人一样</strong>。每个key对应一个组件，相同的key react认为是同一个组件，这样后续相同的key对应组件都不会被创建。</p><p><strong>key的使用场景</strong></p><ul><li>数组动态创建的子组件</li><li>为一个有复杂繁琐逻辑的组件添加key后，后续操作可以改变该组件的key属性值，从而达到先销毁之前的组件，再重新创建该组件。</li></ul><p>我们在循环渲染列表时候(map)时候忘记标记key值报的警告,既然是警告,就说明即使没有key的情况下也不会影响程序执行的正确性,其实这个key的存在只会<code>影响diff算法的复杂度</code>(不是一定会提高性能),也就是说你不加上Key就会暴力渲染，加了Key之后，React就可以做出移动的操作了，看例子：</p><p><img src="https://ae01.alicdn.com/kf/H1f3780ed47c947c8b8b9c9a5092a06507.png" alt=""></p><p>每个节点都加上了唯一的key值，通过这个<strong>Key值发现新老集合里面其实全部都是相同的元素</strong>，只不过位置发生了改变。因此就无需进行节点的插入、删除等操作了，只需要将老集合当中节点的位置进行移动就可以了。React给出的diff结果为：<code>B、D不做操作，A、C进行移动操作</code>。react是如何判断谁该移动，谁该不动的呢？</p><p>react会去循环整个新的集合：</p><p>① 从新集合中取到<code>B</code>，然后去旧集合中判断是否存在相同的<code>B</code>，确认<code>B</code>存在后，再去判断是否要移动： <code>B</code>在旧集合中的<code>index = 1</code>，有一个游标叫做<code>lastindex</code>。默认<code>lastindex = 0</code>，然后会把旧集合的<code>index和游标作</code>对比来判断是否需要移动，如果<strong>index &lt; lastindex ，那么就做移动操作</strong>，在这里<code>B的index = 1</code>，不满足于 <code>index &lt; lastindex</code>,所以就不做移动操作，然后游标lastindex更新，<code>取(index, lastindex) 的较大值</code>，这里就是<code>lastindex = 1</code></p><p>② 然后遍历到<code>A</code>，<code>A</code>在老集合中的<code>index = 0</code>，此时的游标<code>lastindex = 1</code>，满足<code>index &lt; lastinde</code>x，所以对A需要移动到对应的位置，此时<code>lastindex = max(index, lastindex) = 1</code></p><p>③ 然后遍历到<code>D</code>，<code>D</code>在老集合中的<code>index = 3</code>，此时游标<code>lastindex = 1</code>，不满足<code>index &lt; lastindex</code>，所以D保持不动。<code>lastindex = max(index, lastindex) = 3</code></p><p>④ 然后遍历到<code>C</code>，<code>C</code>在老集合中的<code>index = 2</code>，此时游标<code>lastindex = 3</code>，满足 <code>index &lt; lastindex</code>，所以C移动到对应位置。C之后没有节点了，diff就结束了</p><p>以上主要分析新老集合中<code>节点相同但位置不同</code>的情景，仅对节点进行位置移动的情况，如果新集合中有新加入的节点且老集合存在需要删除的节点，那么 React diff 又是如何对比运作的呢？</p><p><img src="https://ae01.alicdn.com/kf/Haafdd54eefeb47e1ad5fbb10e7f8ba9bE.png" alt=""></p><p>和第一种情景基本是一致的，react还是去循环整个新的集合： ① 不赘述了，和上面的第一步是一样的，<code>B不做移动，lastindex = 1</code></p><p>② 新集合取得<code>E</code>，发现旧集合中不存在，则创建E并放在新集合对应的位置，<code>lastindex = 1</code></p><p>③ 遍历到<code>C</code>，不满足<code>index &lt; lastindex</code>，<code>C</code>不动，<code>lastindex = 2</code></p><p>④ 遍历到<code>A</code>，满足<code>index &lt; lastindex</code>，<code>A</code>移动到对应位置，<code>lastindex = 2</code></p><p>⑤ 当完成新集合中所有节点 <code>diff</code> 时，最后还需要对老集合进行循环遍历，判断是否存在新集合中没有但老集合中仍存在的节点，发现存在这样的节点 <code>D</code>，因此<code>删除节点 D</code>，到此 diff 全部完成</p><p>但是 react diff也存在一些问题，和需要优化的地方，看下面的例子：</p><p><img src="https://ae01.alicdn.com/kf/Hc94d1ce042be45a5b6e694b0b034817cU.png" alt=""></p><p>在上面的这个例子，<strong>A、B、C、D</strong>都没有变化，仅仅是<code>D</code>的位置发生了改变。看上面的图我们就知道react并没有把D的位置移动到头部，而是把 <strong>A、B、C</strong>分别移动到<code>D</code>的后面了，通过前面的两个例子，我们也大概知道，为什么会发生这样的情况了：</p><p>因为<code>D</code>节点在老集合里面的<code>index</code> 是最大的，使得<strong>A、B、C</strong>三个节点都会 <code>index &lt; lastindex</code>，从而导致<strong>A、B、C</strong>都会去做移动操作。所以在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</p><h3 id="三句箴言" tabindex="-1">三句箴言 <a class="header-anchor" href="#三句箴言" aria-label="Permalink to &quot;三句箴言&quot;">​</a></h3><p>所以经过这么一分析<code>react diff</code>的三大策略，我们能够在开发中更加进一步的提高react的渲染效率。</p><ul><li>在开发组件时，保持稳定的 DOM 结构会有助于性能的提升；</li><li>使用 <code>shouldComponentUpdate()</code>方法节省diff的开销</li><li>在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</li></ul><h3 id="为什么不推荐使用index作为key" tabindex="-1">为什么不推荐使用index作为Key <a class="header-anchor" href="#为什么不推荐使用index作为key" aria-label="Permalink to &quot;为什么不推荐使用index作为Key&quot;">​</a></h3><p>看下面这个示例</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> App</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      list</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;C&#39;</span><span style="color:#ABB2BF;"> }]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  click</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      list</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        {</span></span>
<span class="line"><span style="color:#E5C07B;">          this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;</span><span style="color:#E06C75;">li</span><span style="color:#D19A66;font-style:italic;"> key</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="color:#C678DD;">                {</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">              &lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            )</span></span>
<span class="line"><span style="color:#ABB2BF;">          })</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">click</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Reverse&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>我们在三个输入框里面，依次输入1，2，3，点击Reverse按钮，按照我们的预期，这时候页面应该渲染成3，2，1，但是实际上，顺序依然还是1，2，3，证明数据确实是更新了的。那么为什么会发生这种事情，我们可以分析一下：</p><p><img src="https://ae01.alicdn.com/kf/H3ecb41d8764e4834b940428652f66478s.png" alt=""></p><p>出现这种情况，使用key是用来表示唯一的标识组件，当发现setState前后key的值没有发生变化 ，react就会认为你setState前后是同一个组件，进而只会对内部的属性进行修改：</p><ul><li>检测key值发现都是0，判定组件为同一个。</li><li>检测item.val部分，发现有变化重新渲染这部分</li><li>检测input，发现不依赖props，所以不进行重新渲染</li></ul><h3 id="diff-源码" tabindex="-1">diff 源码 <a class="header-anchor" href="#diff-源码" aria-label="Permalink to &quot;diff 源码&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// diff函数，对比两颗树</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> diff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldTree</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newTree</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当前的节点的标志。因为在深度优先遍历的过程中，每个节点都有一个index。</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在遍历到每个节点的时候，都需要进行对比，找到差异，并记录在下面的对象中。</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> pathches</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 开始进行深度优先遍历</span></span>
<span class="line"><span style="color:#61AFEF;">    dfsWalk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldTree</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newTree</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pathches</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 最终diff算法返回的是一个两棵树的差异。</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> pathches</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对两棵树进行深度优先遍历。</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> dfsWalk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pathches</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 对比oldNode和newNode的不同，记录下来</span></span>
<span class="line"><span style="color:#E06C75;">    pathches</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [...];</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 对比文本 dom 节点</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> diffTextDom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pathches</span><span style="color:#ABB2BF;">)   </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">nodeName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!==</span><span style="color:#E5C07B;"> newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 对比非文本 dom 节点</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">    diffNotTextDom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pathches</span><span style="color:#ABB2BF;">)     </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">_</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeName</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 对比自定义组件</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> diffComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pathches</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // 值对比标签的类型和key值是否一致</span></span>
<span class="line"><span style="color:#E5C07B;">      oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">      oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span></span>
<span class="line"><span style="color:#ABB2BF;">    ) {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> propsPatches</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> diffProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldNode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 对比属性</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">propsPatches</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        pathches</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">patch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PROPS</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">propsPatches</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;">     if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">newVdom</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       // 遍历对比子节点</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">       diffChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">newNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pathches</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 遍历子节点</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> diffChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldChildren</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newChildren</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pathches</span><span style="color:#ABB2BF;">) {  </span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> leftNode</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> currentNodeIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    oldChildren</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> newChild</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newChildren</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">    currentNodeIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">leftNode</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> leftNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E06C75;"> currentNodeIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> leftNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E06C75;"> currentNodeIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 深度遍历子节点</span></span>
<span class="line"><span style="color:#61AFEF;">    dfsWalk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newChild</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">currentNodeIndex</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pathches</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    leftNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> child</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p><a href="https://github.com/livoras/simple-virtual-dom/blob/master/lib/diff.js#L5" target="_blank" rel="noreferrer">详细diff跳转</a></p><h2 id="patch" tabindex="-1">patch <a class="header-anchor" href="#patch" aria-label="Permalink to &quot;patch&quot;">​</a></h2><p>因为步骤一所构建的 JavaScript 对象树和render出来真正的DOM树的信息、结构是一样的。 所以我们可以对那棵DOM树也进行深度优先的遍历，遍历的时候从步骤二生成的patches对象中找出当前遍历的节点差异，然后进行 DOM 操作。</p><p><strong>差异类型</strong></p><p>DOM操作可能会：</p><ul><li>替换原来的节点，如把上面的div换成了section。</li><li>移动、删除、新增子节点， 例如上面div的子节点，把p和ul顺序互换。</li><li>修改了节点的属性。</li><li>对于文本节点，文本内容可能会改变。 所以，我们可以定义下面的几种类型：</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E5C07B;"> REPLACE</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E5C07B;"> REORDER</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E5C07B;"> PROPS</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E5C07B;"> TEXT</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//patches里面存储着差异的dom,是个数组</span></span>
<span class="line"><span style="color:#E06C75;">patches</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#E06C75;">   type</span><span style="color:#ABB2BF;">:  </span><span style="color:#E5C07B;">TEXT</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   content</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;word&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PROPS</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;container&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>patch 源码</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> patch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">patches</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> walker</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">  dfsWalk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">walker</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">patches</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> dfsWalk</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">walker</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">patches</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> currentPatches</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> patches</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">walker</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// 从patches拿出当前节点的差异</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 深度遍历子节点</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">    walker</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#61AFEF;">    dfsWalk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">walker</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">patches</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">currentPatches</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    applyPatches</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">currentPatches</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 对当前节点进行DOM操作</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>applyPatches，根据不同类型的差异对当前节点进行 DOM 操作：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> applyPatches</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">currentPatches</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  currentPatches</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">currentPatch</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">currentPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#E5C07B;"> REPLACE</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">        node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">currentPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        break</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#E5C07B;"> REORDER</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">        reorderChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">currentPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">moves</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        break</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#E5C07B;"> PROPS</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">        setProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">currentPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        break</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#E5C07B;"> TEXT</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">        node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> currentPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span></span>
<span class="line"><span style="color:#C678DD;">        break</span></span>
<span class="line"><span style="color:#C678DD;">      default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">        throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Unknown patch type &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> currentPatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><a href="https://github.com/livoras/simple-virtual-dom/blob/master/lib/patch.js#L8" target="_blank" rel="noreferrer">详细patch跳转</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>virtual DOM算法主要实现上面步骤的三个函数： <code>react.createElement</code>、<code>diff</code>、<code>patch</code>，然后就可以实际的进行使用了。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 构建虚拟DOM</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> tree</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  style</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#ccc&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span></span>
<span class="line"><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h2&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">   className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;title&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;hhhh222&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#98C379;">&quot;divdivdiv&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2. 通过虚拟DOM构建真正的DOM</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tree</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3. 生成新的虚拟DOM</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> newTree</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  style</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#ccc&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span></span>
<span class="line"><span style="color:#E5C07B;">React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h2&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">   className</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;title&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;--hhhh222&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#98C379;">&quot;--divdivdiv&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4. 比较两棵虚拟DOM树的不同</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> patches</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> diff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newTree</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 5. 在真正的DOM元素上应用变更</span></span>
<span class="line"><span style="color:#61AFEF;">patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">patches</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>当然这是非常粗糙的实践，实际中还需要处理事件监听等；生成虚拟 DOM 的时候也可以加入 JSX 语法。这些事情都做了的话，就可以构造一个简单的ReactJS了。</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://juejin.im/post/5cb66fdaf265da0384128445" target="_blank" rel="noreferrer">https://juejin.im/post/5cb66fdaf265da0384128445</a><br><a href="https://blog.csdn.net/qq_36407875/article/details/84965311" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_36407875/article/details/84965311</a><br><a href="https://www.cnblogs.com/zhuzhenwei918/p/7271305.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/zhuzhenwei918/p/7271305.html</a><br><a href="http://react-china.org/t/react-react/26788" target="_blank" rel="noreferrer">http://react-china.org/t/react-react/26788</a><br><a href="https://github.com/MuYunyun/blog/blob/master/React/%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0React/4.diff%E7%AE%97%E6%B3%95.md" target="_blank" rel="noreferrer">https://github.com/MuYunyun/blog/blob/master/React/%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0React/4.diff%E7%AE%97%E6%B3%95.md</a></p>`,97),o=[e];function c(r,t,B,y,i,b){return a(),n("div",null,o)}const C=s(p,[["render",c]]);export{F as __pageData,C as default};
