import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const u=JSON.parse('{"title":"vue3.o源码分析","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/vue/next/reactivity.md","filePath":"workspace/Frame/vue/next/reactivity.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/vue/next/reactivity.md"},e=l(`<h1 id="vue3-o源码分析" tabindex="-1">vue3.o源码分析 <a class="header-anchor" href="#vue3-o源码分析" aria-label="Permalink to &quot;vue3.o源码分析&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>调研的预览版本，很多api还没完善，但大致架构已经成形, 暂时还不能用于生产。</p><p><strong>优势</strong></p><ul><li>函数式编程，函数对ts兼容性好【react-hooks】</li><li>static tree hoisting 功能 （检测静态语法，进行提升） 【diff】</li><li>基于 Proxy 实现的数据变更检测 【不需要递归了，节省内存】</li><li>支持 Fragments 【 react 空标签，当根元素用】</li><li>支持 Portals 【react 允许在DOM的其它位置进行渲染】</li><li>同时支持 Composition API 和 Options API 【单文件兼容vue2.o】</li><li>Custom Renderer API 【自定义渲染器API】</li></ul><h2 id="源码目录" tabindex="-1">源码目录 <a class="header-anchor" href="#源码目录" aria-label="Permalink to &quot;源码目录&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> packages</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> compiler-core</span><span style="color:#7F848E;font-style:italic;"> # 所有平台的编译器(weex也是基于这个)</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> compiler-dom</span><span style="color:#7F848E;font-style:italic;"> # 针对浏览器的编译器</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> compiler-ssr</span><span style="color:#7F848E;font-style:italic;"> # ssr</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> compiler-sfc</span><span style="color:#7F848E;font-style:italic;"> # 针对单文件</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> reactivity</span><span style="color:#7F848E;font-style:italic;"> # 数据响应式系统</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> runtime-core</span><span style="color:#7F848E;font-style:italic;"> # 渲染器，一些核心的api</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> runtime-dom</span><span style="color:#7F848E;font-style:italic;"> # 针对浏览器的runtime,包括处理原生DOM </span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> runtime-test</span><span style="color:#7F848E;font-style:italic;"> # 专门为测试写的runtime</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> server-renderer</span><span style="color:#7F848E;font-style:italic;"> # 用于SSR</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> shared</span><span style="color:#7F848E;font-style:italic;"> # 帮助方法</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> template-explorer</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">   └──</span><span style="color:#98C379;"> vue</span><span style="color:#7F848E;font-style:italic;"> # 构建vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="composition-api" tabindex="-1">composition-api <a class="header-anchor" href="#composition-api" aria-label="Permalink to &quot;composition-api&quot;">​</a></h2><p>Composition API纯粹是添加的，不会影响/弃用任何现有的2.x API，它是可以单独导入到项目中的</p><p><strong>动机</strong></p><ul><li>Vue 3 使用ts实现了类型推断，新版api全部采用普通函数，在编写代码时可以享受完整的类型推断（避免使用装饰器）</li><li>解决了多组件间<strong>逻辑重用</strong>问题 （解决：高阶组件、mixin、作用域插槽） <ul><li>如果项目过于复杂的时候，mixin中的代码和外部组件的代码存在命名冲突的时候会被覆盖，而且如果有相同的生命周期函数也会被覆盖，所以会导致代码难以维护，容易出现bug</li><li>代码分散</li></ul></li></ul><blockquote><p>// 安装<br> yarn add @vue/composition-api<br> // 使用<br> import Vue from &#39;vue&#39;;<br> import VueCompositionApi from &#39;@vue/composition-api&#39;;<br> Vue.use(VueCompositionApi);<br></p></blockquote><h2 id="reactive" tabindex="-1">reactive <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive&quot;">​</a></h2><h4 id="object-defineproperty" tabindex="-1">Object.defineProperty() <a class="header-anchor" href="#object-defineproperty" aria-label="Permalink to &quot;Object.defineProperty()&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldProtoMehtods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> proto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldProtoMehtods</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 针对数组</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;push&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;pop&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;shift&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;unshift&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;sort&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;reverse&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;splice&#39;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    proto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () { </span><span style="color:#7F848E;font-style:italic;">// 函数劫持，把内部的函数重写，数组方法还是继续调用老的方法</span></span>
<span class="line"><span style="color:#61AFEF;">        updateView</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        observer</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        oldProtoMehtods</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">        target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> proto</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 同上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 给数组中的每一项进行observer</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">            observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 有可能对象类型是多层，递归劫持</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">        get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 在get 方法中收集依赖</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#61AFEF;">        set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;set方法&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                updateView</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 在set方法中触发更新</span></span>
<span class="line"><span style="color:#61AFEF;">                observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 防止传进来是一个二级对象，不能对以后的数据监测</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">}]};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">33</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">22222</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// data.ary[4][1] = 2222;  不会触发更新，值会改变</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p><strong>缺点</strong></p><ul><li>无法监听数组的变化</li><li>需要递归深度遍历，浪费内存</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 无法响应式</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newValue</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newLength</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解决办法</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">indexOfItem</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newLength</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="effect" tabindex="-1">effect <a class="header-anchor" href="#effect" aria-label="Permalink to &quot;effect&quot;">​</a></h3><h3 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h3><p>下面是自己提炼的的核心代码，<a href="/workspace/Frame/vue/next/ref.html">源码分析看这</a></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ref</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> convert</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#61AFEF;"> isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">rawValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    __v_isRef</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#C678DD;">    set</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;视图更新&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">      value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> result</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ---------------</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// toRefs</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    ret</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> ret</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">object</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    __v_isRef</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> object</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#C678DD;">    set</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      object</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newVal</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h3><h2 id="beta升级使用" tabindex="-1">Beta升级使用 <a class="header-anchor" href="#beta升级使用" aria-label="Permalink to &quot;Beta升级使用&quot;">​</a></h2><p><code>写demo可以，公司正式项目不建议，后期少不了小改动</code></p><h2 id="安装3-o新版本" tabindex="-1">安装3.o新版本 <a class="header-anchor" href="#安装3-o新版本" aria-label="Permalink to &quot;安装3.o新版本&quot;">​</a></h2><blockquote><p>yarn add vue@next vue-router@next vuex@next<br> yarn add @vue/compiler-sfc@next eslint-plugin-vue@next vue-cli-plugin-vue-next -D</p></blockquote><h2 id="逻辑复用" tabindex="-1">逻辑复用 <a class="header-anchor" href="#逻辑复用" aria-label="Permalink to &quot;逻辑复用&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onMounted</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onUnmounted</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> useMousePosition</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageX</span></span>
<span class="line"><span style="color:#E5C07B;">    y</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageY</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;mousemove&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  onUnmounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;mousemove&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在组件中使用：</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useMousePosition</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./mouse&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  setup</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#61AFEF;">useMousePosition</span><span style="color:#ABB2BF;">() }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://github.com/vuejs/vue-next" target="_blank" rel="noreferrer">vue-next</a><br><a href="https://github.com/vuejs/vue-cli-plugin-vue-next" target="_blank" rel="noreferrer">vue-cli-plugin-vue-nex</a><br><a href="https://vue-composition-api-rfc.netlify.app/#summary" target="_blank" rel="noreferrer">vue-composition-api文档</a><br><a href="https://vue-next-template-explorer.netlify.app/" target="_blank" rel="noreferrer">vue3的编译工具</a><br><a href="https://juejin.im/post/5e9f6b3251882573a855cd52" target="_blank" rel="noreferrer">尤雨溪在Vue3.0Beta直播里聊到了这些</a><br><a href="https://juejin.im/post/5eaead656fb9a0438d4060be" target="_blank" rel="noreferrer">juejin</a><br><a href="https://segmentfault.com/a/1190000020709962?utm_source=tag-newest" target="_blank" rel="noreferrer">segmentfault</a></p>`,33),o=[e];function r(t,c,B,y,i,b){return a(),n("div",null,o)}const A=s(p,[["render",r]]);export{u as __pageData,A as default};
