import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const A=JSON.parse('{"title":"Vue3.0源码分析","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/vue/vue-next.md","filePath":"workspace/Frame/vue/vue-next.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/vue/vue-next.md"},e=l(`<h1 id="vue3-0源码分析" tabindex="-1">Vue3.0源码分析 <a class="header-anchor" href="#vue3-0源码分析" aria-label="Permalink to &quot;Vue3.0源码分析&quot;">​</a></h1><p>第一次用vue也是两年前了，今天看了预览版的3.0变化挺大，方法都是基于函数式的， 这对于一直用react的我来说挺新奇的，也是因为下家用vue开发的项目比较多，特此班门弄斧，研究一波。</p><p>在19年10月5日发布了<code>Vue3.0</code>预览版源码，但是预计最早需要等到 2020 年第一季度才有可能发布 3.0 正式版。</p><p>可以直接看 <a href="https://github.com/vuejs/vue-next/tree/master/packages" target="_blank" rel="noreferrer">github</a>源码。</p><p><code>Vue 3.0</code> 的想法是引入灵感来自于 <code>React Hook</code> 的<code> Function-based API</code>，作为主要的组件声明方式。</p><p>意思就是所有组件的初始状态、<code>computed、watch、methods</code> 都要在一个叫做 <code>setup</code> 的方法中定义，抛弃（暂时会继续兼容）原有的基于对象的组件声明方式。</p><p><code>Vue 3.0</code>同时支持 <code>Composition API</code> 和 <code>Options API</code>,个人认为如果这个改变实装到 <code>Vue 3.0</code>，也许对之前的项目不会带来太大的影响， 但是如果在 <code>Vue 4.0</code> 中彻底废弃原有的组件声明方式，<code>Vue</code>相当于自杀了。</p><p><strong>在很多帖子和论坛上开发者声称：</strong></p><ul><li>所有 Vue 代码都必须以全新的方式重写，因为现有的语法正在被移除，并且被其他东西取代；</li><li>人们花在学习 Vue 上的所有时间都被浪费了，因为一切都会改变；</li><li>新语法比旧的更糟糕，因为它没有强制的结构，并且会导致意大利面条式代码；</li><li>Vue核心团队在没有任何咨询的情况下突然施行一个巨大的破坏性的变化；</li><li>Vue 要变成 React 了！</li><li>所有 HTML 都要写在一个超长的字符串里！</li></ul><h2 id="剖析composition-api" tabindex="-1">剖析Composition API <a class="header-anchor" href="#剖析composition-api" aria-label="Permalink to &quot;剖析Composition API&quot;">​</a></h2><p><a href="https://vue-composition-api-rfc.netlify.com/#basic-example" target="_blank" rel="noreferrer">文档</a></p><ul><li>Vue 3 使用ts实现了类型推断，新版api全部采用普通函数，在编写代码时可以享受完整的类型推断（避免使用装饰器）</li><li>解决了多组件间逻辑重用问题 （<code>解决</code>：高阶组件、mixin、作用域插槽）</li><li><code>Composition API</code> 使用简单</li></ul><p><code>composition API</code> 就是让多个方法进行组合使用</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;vue.global.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // 使用场景跟react的hooks一样，逻辑抽离，方便复用</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> usePosition</span><span style="color:#ABB2BF;">(){ </span><span style="color:#7F848E;font-style:italic;">// 实时获取鼠标位置</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageX</span></span>
<span class="line"><span style="color:#E5C07B;">            state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageY</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;mousemove&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#E5C07B;">        Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onUnmounted</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;mousemove&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toRefs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> App</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setup</span><span style="color:#ABB2BF;">(){ </span><span style="color:#7F848E;font-style:italic;">// Composition API 使用的入口,只会执行一次，减少gc</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> state</span><span style="color:#56B6C2;">  =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reactive</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;youxuan&#39;</span><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">// 定义响应数据</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> usePosition</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 使用公共逻辑</span></span>
<span class="line"><span style="color:#E5C07B;">            Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onMounted</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">                console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;当组挂载完成&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#E5C07B;">            Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onUpdated</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">                console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;数据发生更新&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#E5C07B;">            Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onUnmounted</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">                console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;组件将要卸载&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#C678DD;">            function</span><span style="color:#61AFEF;"> changeName</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">                state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;webyouxuan&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 返回上下文,可以在模板中使用</span></span>
<span class="line"><span style="color:#E06C75;">                state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                changeName</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                x</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                y</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        template</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">\`&lt;button @click=&quot;changeName&quot;&gt;{{state.name}} 鼠标x: {{x}} 鼠标: {{y}}&lt;/button&gt;\`</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createApp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="源码目录剖析" tabindex="-1">源码目录剖析 <a class="header-anchor" href="#源码目录剖析" aria-label="Permalink to &quot;源码目录剖析&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">packages目录中包含着Vue3.0所有功能</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#61AFEF;">    ├──</span><span style="color:#98C379;"> packages</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> compiler-core</span><span style="color:#7F848E;font-style:italic;"> # 所有平台的编译器</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> compiler-dom</span><span style="color:#7F848E;font-style:italic;"> # 针对浏览器而写的编译器</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> reactivity</span><span style="color:#7F848E;font-style:italic;"> # 数据响应式系统，核心方法reactive、effect、 ref、computed</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> runtime-core</span><span style="color:#7F848E;font-style:italic;"> # 虚拟 DOM 渲染器 ，Vue 组件和 Vue 的各种API</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> runtime-dom</span><span style="color:#7F848E;font-style:italic;"> # 针对浏览器的 runtime。其功能包括处理原生 DOM API、DOM 事件和 DOM 属性等。</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> runtime-test</span><span style="color:#7F848E;font-style:italic;"> # 专门为测试写的runtime</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> server-renderer</span><span style="color:#7F848E;font-style:italic;"> # 用于SSR</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> shared</span><span style="color:#7F848E;font-style:italic;"> # 帮助方法</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   ├──</span><span style="color:#98C379;"> template-explorer</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   └──</span><span style="color:#98C379;"> vue</span><span style="color:#7F848E;font-style:italic;"> # 构建vue runtime + compiler</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="proxy-与-object-defineproperty-优劣对比" tabindex="-1">Proxy 与 Object.defineProperty 优劣对比 <a class="header-anchor" href="#proxy-与-object-defineproperty-优劣对比" aria-label="Permalink to &quot;Proxy 与 Object.defineProperty 优劣对比&quot;">​</a></h2><p><strong>Object.defineProperty()</strong></p><ol><li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li><li>无法监听数组的变化</li><li>需要深度遍历，浪费内存</li></ol><p><a href="/workspace/Frame/vue/vue.html#defineproperty-的不足">解决vue中使用defineProperty的不足</a></p><p><strong>Proxy()</strong></p><ol><li>Proxy 可以直接监听对象而非属性；</li><li>Proxy 可以直接监听数组的变化；</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li><li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li><li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li><li>兼容性差，IE11也不兼容</li></ol><h2 id="vue2-0响应式原理机制" tabindex="-1">vue2.0响应式原理机制 <a class="header-anchor" href="#vue2-0响应式原理机制" aria-label="Permalink to &quot;vue2.0响应式原理机制&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// utils.js 定义的公共方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断是一个object类型的</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;object&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;">!==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 视图代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;">  updateView</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;更新视图&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="针对对象进行拦截" tabindex="-1">针对对象进行拦截 <a class="header-anchor" href="#针对对象进行拦截" aria-label="Permalink to &quot;针对对象进行拦截&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 有可能对象类型是多层，递归劫持</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">        get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 在get 方法中收集依赖</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#61AFEF;">        set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;set方法&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                updateView</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 在set方法中触发更新</span></span>
<span class="line"><span style="color:#61AFEF;">                observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 防止传进来是一个二级对象，不能对以后的数据监测</span></span>
<span class="line"><span style="color:#E06C75;">                value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 赋新值</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;wk&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]};</span></span>
<span class="line"><span style="color:#61AFEF;">observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">222</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 121212</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>例如上面的代码，我们用push方法改变ary的话，会改变原数组，但是并没有触发视图更新，所以这里数组劫持来优化触发视图更新</p><h2 id="数组的劫持" tabindex="-1">数组的劫持 <a class="header-anchor" href="#数组的劫持" aria-label="Permalink to &quot;数组的劫持&quot;">​</a></h2><p>我们不能直接更改<code>Array.prototype</code>，这样会污染其他的代码，代价更大，我们找到所有能改变原数组的方法<code>push,shift,unshift,pop,splice,reverse,sort</code>, 对这些方法重新包装，使其触发视图更新，做到数组劫持。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line highlighted"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> oldProtoMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> proto</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldProtoMethods</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;push&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;pop&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;shift&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;unshift&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;sort&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;reverse&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;splice&#39;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    proto</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () { </span><span style="color:#7F848E;font-style:italic;">// 函数劫持，把内部的函数重写，数组方法还是继续调用老的方法</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">        updateView</span><span style="color:#ABB2BF;">();</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">        observer</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E06C75;">        oldProtoMethods</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">)</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">        // Object.setPrototypeOf(target, proto);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> proto</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 同上</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">        // 给数组中的每一项进行observer</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">            observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        }</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        return</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 有可能对象类型是多层，递归劫持</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">        get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 在get 方法中收集依赖</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#61AFEF;">        set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;set方法&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                updateView</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 在set方法中触发更新</span></span>
<span class="line"><span style="color:#61AFEF;">                observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 防止传进来是一个二级对象，不能对以后的数据监测</span></span>
<span class="line"><span style="color:#E06C75;">                value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 赋新值</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">}]};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">33</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">22222</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// data.ary[4][1] = 2222;  不会触发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><h2 id="vue3-0响应式原理机制参考文档" tabindex="-1">vue3.0响应式原理机制参考文档 <a class="header-anchor" href="#vue3-0响应式原理机制参考文档" aria-label="Permalink to &quot;vue3.0响应式原理机制参考文档&quot;">​</a></h2><p><a href="https://vue-js.com/topic/5e2d023f7a28821363fb6821" target="_blank" rel="noreferrer">https://vue-js.com/topic/5e2d023f7a28821363fb6821</a><br><a href="https://github.com/vuejs/vue-next/blob/e6ef52c3f8992cf7bb8f648a791edeea0632459e/packages/reactivity/src/baseHandlers.ts" target="_blank" rel="noreferrer">github</a></p>`,33),o=[e];function r(t,c,B,y,i,F){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{A as __pageData,u as default};
