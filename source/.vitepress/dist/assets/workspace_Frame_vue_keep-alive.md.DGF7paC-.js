import{_ as a,c as l,o as p,a5 as n,l as s}from"./chunks/framework.BQQWXjGs.js";const d=JSON.parse('{"title":"使用keepAlive遇到的坑","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/vue/keep-alive.md","filePath":"workspace/Frame/vue/keep-alive.md","lastUpdated":1713942612000}'),e={name:"workspace/Frame/vue/keep-alive.md"},o=n(`<h1 id="使用keepalive遇到的坑" tabindex="-1">使用keepAlive遇到的坑 <a class="header-anchor" href="#使用keepalive遇到的坑" aria-label="Permalink to &quot;使用keepAlive遇到的坑&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><code>keep-alive</code>是<code>vue</code>的一个内置组件。它会缓存不活动的<strong>组件实例</strong>，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实DOM中，也不会出现在父组件链中。它提供了<code>include</code>与<code>exclude</code>属性，允许组件有条件地进行缓存，其中exclude的优先级比include高，max最多可以缓存多少组件实例。</p><p><a href="https://cn.vuejs.org/v2/api/#keep-alive" target="_blank" rel="noreferrer">keep-alive详解文档</a></p><p>使用 <code>keep-alive</code>的话会增加两个钩子函数， <code>activated</code> 和 <code>deactivated</code></p><p>下面的文章我是<code>keep-alive</code>配合<code>vue-router</code>一块使用的，当前<code>keep-alive</code>也可以缓存单个组件，在这里就不多赘述。</p><h2 id="include和exclude" tabindex="-1">include和exclude <a class="header-anchor" href="#include和exclude" aria-label="Permalink to &quot;include和exclude&quot;">​</a></h2><p><code>include</code> 和 <code>exclude</code> prop 允许组件有条件地缓存。二者都可以用<code>逗号分隔字符串</code>、<code>正则表达式</code>或一个<code>数组</code>来表示详细健文档</p><p>我这里使用的<code>vuex</code>配合数组动态控制</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">keep-alive</span><span style="color:#FFFFFF;"> :include=&quot;includes&quot;</span><span style="color:#D19A66;font-style:italic;"> exclude</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#FFFFFF;"> :max=&quot;10&quot;</span><span style="color:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   &lt;</span><span style="color:#E5C07B;">router-view</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> export default </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">	  includes</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	     return</span><span style="color:#E06C75;font-style:italic;"> state</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">includes</span></span>
<span class="line"><span style="color:#ABB2BF;">	   }</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">     changeStoreIncludes</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">       this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;changeIncludes&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;tableLists&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }  </span></span>
<span class="line"><span style="color:#C678DD;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// vuex</span></span>
<span class="line"><span style="color:#E06C75;">mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">	changeIncludes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	  state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">includes</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> payload</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="include和exclude无效问题" tabindex="-1">include和exclude无效问题 <a class="header-anchor" href="#include和exclude无效问题" aria-label="Permalink to &quot;include和exclude无效问题&quot;">​</a></h2><p>使用<code>include/exclude</code> 属性需要给所有<code>vue类的name</code>赋值（注意不是给route的name赋值），否则 <code>include/exclude</code>不生效</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;TableList&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// include 或 exclude所使用的name</span></span>
<span class="line"><span style="color:#61AFEF;"> data</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="直接使用v-if做区分" tabindex="-1">直接使用v-if做区分 <a class="header-anchor" href="#直接使用v-if做区分" aria-label="Permalink to &quot;直接使用v-if做区分&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">transition</span><span style="color:#D19A66;"> enter-active-class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;animated zoomInLeft&quot;</span><span style="color:#D19A66;"> leave-active-class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;animated zoomOutRight&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;$route.meta.keepAlive&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">transition</span><span style="color:#D19A66;"> enter-active-class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;animated zoomInLeft&quot;</span><span style="color:#D19A66;"> leave-active-class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;animated zoomOutRight&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;!$route.meta.keepAlive&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">       &lt;/</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">transition</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样做的话更加简单明了，而且配合动画更搭，不用再<code>vue</code>组件里面声明<code>name</code>，但是要在<code>route</code>的<code>meta</code>里面添加 <code>{keepAlive:true}</code>字段，如果路由是后台控制的话，前端调试就比较鸡肋。</p><p><strong>暴露的问题</strong></p><p><strong>问题1：</strong></p><p>位置公用的问题，当前列表页跳转到详情页面的时候，使用路由回到列表也时候，会出现位置公用的情况。（如果使用浏览器的回退方式，不会出现位置公用的情况。）</p><blockquote><p><strong>对于这个位置公用的情况，我是一头雾水，期待大佬解答</strong> 🤝，有几点要说的不知对错，待求证。</p><ul><li><strong>多页面</strong></li></ul><ol><li>如果有数据请求的话，浏览器将会把页面置顶？</li><li>如果是静态页面的话，浏览器会滚到你之前滚动的地方？</li><li>上面仅仅是使用的浏览器的跳转行为，如果使用href或者路由封装一些方法，则都会置顶？</li></ol><ul><li><strong>求证上面 🤝</strong></li></ul><ol start="4"><li>基于SPA模式开发，所以页面仅有一个，实现页面切换是利用哈希与组件的映射关系，vue-router是通过哈希来模拟完整的url，但是对于页面来说仍是一个url，所以在任何一个组件滚动页面，切换到其他组件的时候，页面仍保持滚动之前的状态，这就是出现位置公用的情况.</li></ol></blockquote><p><strong>问题2：</strong></p><p>加入有<code>A B C</code>三个页面，我现在只想要<code>A-&gt;B</code>时<code>A</code>缓存，然后<code>B-&gt;A</code>时，展示缓存的页面，<code>C-&gt;A</code>、<code>A-&gt;B-&gt;C-&gt;A</code>等都不要缓存。</p><h2 id="scrollbehavior" tabindex="-1">scrollBehavior <a class="header-anchor" href="#scrollbehavior" aria-label="Permalink to &quot;scrollBehavior&quot;">​</a></h2><p>对于 <strong><code>问题1</code></strong> 我的想法是，跳转前直接把滚动高度缓存起来，然后每次再回来的时候，在把高度在重新赋值给它，但是如果我页面特别多都需要使用缓存的时候，就有些麻烦，然后我发现路由提供的一个这样的方法。</p><p><a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html" target="_blank" rel="noreferrer">scrollBehavior文档详解</a></p><p><strong>scrollBehavior</strong> 方法接收 to 和 from 路由对象。<strong>第三个参数 <code>savedPosition</code></strong> 当且仅当 popstate 导航 (<code>通过浏览器的 前进/后退 按钮触发</code>) 时才可用。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VueRouter</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hash&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  routes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  scrollBehavior</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 此方法默认是检测 document.body 的，如果你是自定义的滚动盒子 是没办法控制你的滚动高度，都是 0</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果返回一个 falsy(不是false) ，或者是一个空对象，那么不会发生滚动,说白了就是这个方法没用，并不会在页面顶部</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // falsy文档 https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> savedPosition</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keepAlive</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 这里并不准确，可能我页面滚动的盒子不是body,vue应该有设置的地方</span></span>
<span class="line"><span style="color:#E5C07B;">        from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> router</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 新版本支持异步滚动，返回一个Promise，这个特别有用，之前的方式如果页面里有异步请求的话，是不能够置顶的</span></span>
<span class="line"><span style="color:#61AFEF;">scrollBehavior</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keepAlive</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="实现返回不刷新、其他菜单进入刷新" tabindex="-1">实现返回不刷新、其他菜单进入刷新 <a class="header-anchor" href="#实现返回不刷新、其他菜单进入刷新" aria-label="Permalink to &quot;实现返回不刷新、其他菜单进入刷新&quot;">​</a></h2><h3 id="实现方式一" tabindex="-1">实现方式一 <a class="header-anchor" href="#实现方式一" aria-label="Permalink to &quot;实现方式一&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   &lt;</span><span style="color:#E5C07B;">router-view</span><span style="color:#D19A66;font-style:italic;"> v-if</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;$route.meta.keepAlive&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">router-view</span><span style="color:#D19A66;font-style:italic;"> v-if</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;!$route.meta.keepAlive&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// router.js</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">   path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/table-list&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;table-list&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">TableList</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   meta</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">keepAlive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">// 添加这个</span></span>
<span class="line"><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/table-detail&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;table-detail&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   component</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../views/table-detail.vue&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>方式一和方式二都是基于上面这两个代码段。</p><p>在要缓存的列表页添加下面的代码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">activated</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 如果是第一次进来的时候，就不用执行下面的函数。</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hasFirst</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">queryList</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#61AFEF;">beforeRouteLeave</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;table-detail&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keepAlive</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keepAlive</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keepAlive</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$destroy</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//销毁类页表页的实例，有坑</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>完成上面的代码后，<code>A-&gt;B-&gt;A</code>正常，然后当<code>A-&gt;C-&gt;A-&gt;B-&gt;A </code>发现列表页A不会再缓存了，每次都是新的页面。谷歌后的方法是若不是第一次进入就强制刷新一次缓存页面。 <strong><code>this.$destroy()</code></strong> 调用<code>distory</code>之后不能再缓存该组件 而且会不断进入这个页面后重复生成多个虚拟dom.</p><p>继续完善，在<code>main.js</code>中使用router.afterEach((to,from)=&gt;{})</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 原理是如果不是从详情页进来的页面，都需要刷新，否则不能缓存</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">afterEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 如果当前页面刷新或者从详情也进来，就要执行下面代码，防止执行销毁方法导致不能缓存</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;table-detail&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;table-list&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> isRefresh</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;isRefresh&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isRefresh</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;0&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span><span style="color:#7F848E;font-style:italic;">// 这里必须是异步的，不然不能跳转</span></span>
<span class="line"><span style="color:#E5C07B;">        window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reload</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#E5C07B;">      sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;isRefresh&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;isRefresh&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;table-list&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;table-detail&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;isRefresh&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;isRefresh&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>我不知道谷歌出来的解决方案为什么都在详情页刷新，这样的问题就是用户第一次跳转到详情页，再回到列表页是没有缓存的功能，第二次就会正常，但是客户很可能就会执行这一次操作；</p><p>这种解决方式太过原始，用户体验太差，而且需要缓存多个页面就不太好控制，不建议用这个方法</p><h3 id="实现方式二" tabindex="-1">实现方式二 <a class="header-anchor" href="#实现方式二" aria-label="Permalink to &quot;实现方式二&quot;">​</a></h3><p>灵感来自<code>方式一</code>，我可以其他方式模拟页面刷新。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;!--这里一定要使用v-if，好处是你可以使用$nextTick体验更好，另一方面是在使用v-show之后，他就相当于隐藏了该页面，但是如果里面有一些不会diff的dom,就会展示出来，模拟刷新的体验就不太好。例如使用 input-&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> v-if</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;isRouterAlive&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">ddd</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> v-model</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;ddd&quot;</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">table-list</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;table&quot;</span><span style="color:#FFFFFF;"> :multiple=&quot;true&quot;</span><span style="color:#FFFFFF;"> :otherTableParams=&quot;otherTableParams&quot;</span><span style="color:#FFFFFF;"> :tableColumn=&quot;column&quot;/&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">  export</span><span style="color:#D19A66;font-style:italic;"> default</span><span style="color:#C678DD;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 其他代码 ........</span></span>
<span class="line"><span style="color:#61AFEF;">    activated</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">      if</span><span style="color:#ABB2BF;"> (this.$route.meta.isRefresh) { </span><span style="color:#7F848E;font-style:italic;">// 如果不是跳转到详情页</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> resetData</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 获取原来data的数据</span></span>
<span class="line"><span style="color:#C678DD;">        delete</span><span style="color:#E5C07B;"> resetData</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">column</span><span style="color:#7F848E;font-style:italic;">  // 我在这里操作的原因是因为，我通过上面获取的数据里面，用到函数返回的形式，展示为undefined  {cb: this.jumpEdit} 展示为 {cb: this.undefined},具体原因未知</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resetData</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 重置data</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRouterAlive</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#7F848E;font-style:italic;"> // 通过v-if不展示当前页面 </span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () { </span></span>
<span class="line"><span style="color:#E5C07B;">          window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scroll</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 页面置顶，不要再下面的定时器里面使用，有顿挫感</span></span>
<span class="line"><span style="color:#E5C07B;">          this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRouterAlive</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#7F848E;font-style:italic;"> // 通过v-if展示当前页面 </span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#61AFEF;">        setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">          this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">queryList</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 异步获取数据，跟我的项目组件有关，你们可以直接在上面获取就OK</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#61AFEF;">    beforeRouteLeave</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 判断如果不是进详情页，展示为true 是页面重新加载的意思</span></span>
<span class="line"><span style="color:#ABB2BF;">      from.meta.</span><span style="color:#E06C75;">isRefresh</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;table-detail&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">      next</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 不添加路由不会跳转</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">  }</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><strong>优化</strong> 现在的代码有两个问题 <code>一</code>是从详情页到列表页，数据不会更新，如果我在详情页修改了某个数据，然后再到列表页就会滞后; <code>二</code>是从详情页跳转到别的列表页然后在跳转到缓存的列表页，然后他还是会缓存之前的数据，不会更新当前页面;</p><p>优化如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">activated</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 如果是第一次进来不执行下面的方法，否则会请求两次数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // this.hasFirst 不用生成响应式的，直接一个变量就好</span></span>
<span class="line"><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hasFirst</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRefresh</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    delete</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">column</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRouterAlive</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scroll</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRouterAlive</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">queryList</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRefresh</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // this.$route.meta.isRefresh在路由里面我并没有设置，默认是undefined，当他为false的时候，说明他从别的页面进来了，这个时候让他请求下数据</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">queryList</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">beforeRouteEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // 这个路由守卫函数式最先执行的</span></span>
<span class="line"><span style="color:#E5C07B;"> to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRefresh</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;table-detail&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 下面代码注释即可</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// beforeRouteLeave(to, from, next) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   from.meta.isRefresh = to.name !== &#39;table-detail&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   next()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>最后可以把这些代码抽离成一个<code>mixins</code>,然后编写一个刷新的组件，哪里用在哪里调取下,<a href="/2020/06/15/workspace/Frame/vue/reload/">也可以看这篇文章</a>。</p><h3 id="实现方式三" tabindex="-1">实现方式三 <a class="header-anchor" href="#实现方式三" aria-label="Permalink to &quot;实现方式三&quot;">​</a></h3><p>这种用 <code>keep-alive</code> 提供的 <code>include</code> 和 <code>exclude </code>,然后配合vuex实现动态控制。</p><p><strong>路由入口页面</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.vue</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">keep-alive</span><span style="color:#FFFFFF;"> :include=&#39;includes&#39;</span><span style="color:#FFFFFF;"> :exclude=&#39;&#39;:max=&quot;3&quot;&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">  &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;/keep-alive&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中<code>include</code>代表着要缓存的，<code>exclude</code>代表着非缓存的,<code>max</code>代表最多缓存的个数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取vuex的数据</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">mapGetters</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  computed</span><span style="color:#ABB2BF;">: {</span><span style="color:#7F848E;font-style:italic;">// 在computed中动态监控</span></span>
<span class="line"><span style="color:#ABB2BF;">     ...</span><span style="color:#61AFEF;">mapGetters</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;includes&#39;</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">   },</span></span>
<span class="line"><span style="color:#E06C75;">  methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">     changeStore</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       // 改变vue的数据，在这用不到</span></span>
<span class="line"><span style="color:#E5C07B;">       this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;tableLists&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>Vuex</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> keepalive</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    includes</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;tableLists&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    change</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">includes</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> payload</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">includes</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> keepalive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>列表页的部分代码</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">activated</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 同上，如果第一次进来，不执行下面的方法</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hasFirst</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">queryList</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#61AFEF;">beforeRouteEnter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这个时候还有没this,所以这里用this的话是不能操作vuex,我是在main.js里面赋值给了window</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;tableLists&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 也可以这么用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // next((el) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //  el.$store.commit(&#39;change&#39;, [&#39;tableLists&#39;]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // })</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#61AFEF;">beforeRouteLeave</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以统一在 scrollBehavior 处理就好了（建议在这里添加 = 参考下面）</span></span>
<span class="line"><span style="color:#E5C07B;">  from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;table-detail&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果不是跳转到详情页面，就穿个空数组，这里不能用 &#39;&#39; 默认是所有的都缓存</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#ABB2BF;">, []);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><strong>详情页的部分代码</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">beforeRouteLeave</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;table-list&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;change&#39;</span><span style="color:#ABB2BF;">, []);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>路由页面</strong></p><p>因为includes没有在路由里面定义 keepalive,所以上面的<code>scrollBehavior</code>这个方法当使用合成事件跳转的时候，需要做额外的处理</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">scrollBehavior</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">savedPosition</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> ary</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;Invest&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Store&#39;</span><span style="color:#ABB2BF;">];  </span><span style="color:#7F848E;font-style:italic;">// 这里需要缓存的页面的route的name   不是vue类的name</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里列表页跳转到别的页面，也会保留页面的滚动高度但是并没有缓存当前的页面，所以当页面再次返回的时候会重新加载当前页面</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ary</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      /* 最近一次回顾的时候 发现了一个问题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       * 如果是列表页跳转到详情页，这个时候时候其实已经到了详情页面，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       * 如果当当前详情页的页面的高度没有列表页面跳转进来时滚动的高度高的时候，这个时候就会获取不真正的页面高度，然后合成事件回退的时候就会滚动不到跳转前的位置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       * 解决的办法就是在每个页面离开前，获取到页面的高度，存到的meta上，这样既能解决这个问题，也能结局把不是body滚动的情况获取不到滚动高度的问题。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      */</span></span>
<span class="line"><span style="color:#E5C07B;">      from</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">to</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>上面的代码比较琐碎，需要添加到每一个页面，所以在实际项目中大家可添加一个keepalive的mixins,方便大家管理。</p><p><strong>使用include和exclude的注意点：</strong></p>`,63),r=s("ol",null,[s("li",{"name:xx":""},"每个组件内部添加"),s("li",null,"若将include设置空 ' ' 每个页面都将会缓存"),s("li",null,"exclude的优先级高于include 使用exclude后")],-1),c=n('<h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://github.com/vuejs/vue/blob/dev/src/core/components/keep-alive.js" target="_blank" rel="noreferrer">keep-alive</a></p><p><a href="https://github.com/vuejs/vue-router/issues/811" target="_blank" rel="noreferrer">vueRouterIssues</a></p><p><a href="https://github.com/vuejs/vue-router/blob/dev/src/util/scroll.js#L10:1" target="_blank" rel="noreferrer">scrollBehavior</a></p><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noreferrer">导航守卫</a></p>',5),t=[o,r,c];function B(i,y,F,b,u,A){return p(),l("div",null,t)}const C=a(e,[["render",B]]);export{d as __pageData,C as default};
