import{_ as s,c as a,o as n,a5 as e}from"./chunks/framework.BQQWXjGs.js";const m=JSON.parse('{"title":"github API 调用","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Git/github.md","filePath":"workspace/Git/github.md","lastUpdated":1713942612000}'),p={name:"workspace/Git/github.md"},o=e(`<h1 id="github-api-调用" tabindex="-1">github API 调用 <a class="header-anchor" href="#github-api-调用" aria-label="Permalink to &quot;github API 调用&quot;">​</a></h1><h3 id="基本访问" tabindex="-1">基本访问 <a class="header-anchor" href="#基本访问" aria-label="Permalink to &quot;基本访问&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">curl</span><span style="color:#E06C75;"> https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//api.github.com/users/wkvictory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>个人主要信息<code>https://api.github.com/users/用户名</code></li><li>个人所有repo。<code>https://api.github.com/users/用户名/repos</code>。会得到一个repo的JSON格式列表。</li><li>repo详细信息。<code>https://api.github.com/repos/用户名/仓库名</code>。repo的路径就开始和个人信息不同了。</li><li>获取某文件的原始内容（Raw）。 <ul><li>通过上面的文件信息中提取download_url这条链接，就能获取它的原始内容了。</li><li>或者直接访问：<code>https://raw.githubusercontent.com/用户名/仓库名/分支名/文件路径</code></li></ul></li><li><strong>repo中所有的commits列表。<code>https://api.github.com/repos/用户名/仓库名/commits</code>。</strong></li><li>某一条commit详情。<code>https://api.github.com/repos/用户名/仓库名/commits/某一条commit的SHA</code></li><li><strong>issues列表。<code>https://api.github.com/repos/用户名/仓库名/issues</code>。</strong></li><li>某条issue详情。<code>https://api.github.com/repos/用户名/仓库名/issues/序号</code>。issues都是以1,2,3这样的序列排号的。</li><li><strong>某issue中的comments列表。<code>https://api.github.com/repos/用户名/仓库名/issues/序号/comments</code>。</strong></li><li>某comment详情。<code>https://api.github.com/repos/用户名/仓库名/issues/comments/评论详情的ID</code>。其中评论ID是从issues列表中获得的。</li></ul><h3 id="查询参数" tabindex="-1">查询参数 <a class="header-anchor" href="#查询参数" aria-label="Permalink to &quot;查询参数&quot;">​</a></h3><ul><li>分页功能。格式是<code>?page=页数&amp;per_page=每页包含数量</code>。</li><li>issues状态。格式是<code>?state=状态</code>。</li></ul><h3 id="权限认证-authentication" tabindex="-1">权限认证 Authentication <a class="header-anchor" href="#权限认证-authentication" aria-label="Permalink to &quot;权限认证 Authentication&quot;">​</a></h3><p>我的项目一般私有的，直接获取没有权限，需要添加token</p><p><img src="https://ae01.alicdn.com/kf/H0fec58c800544c24b103e00bf3f4e82aY.png" alt=""></p><p><strong>1.直接作为url中的参数传输</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">curl</span><span style="color:#E06C75;"> https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//api.github.com/?access_token=OAUTH-TOKEN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>2.作为header中的参数传输</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">curl</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;">H</span><span style="color:#98C379;"> &quot;Authorization: token OAUTH-TOKEN&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`https://api.github.com/repos/wkvictory/file/commits?per_page=15&amp;sha=develop\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;">        method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">            &#39;Authorization&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;token OAUTH-TOKEN&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">     if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">show</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">     throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;接口调取失败！&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h3><p><a href="https://segmentfault.com/a/1190000015144126" target="_blank" rel="noreferrer">Github Api</a></p>`,16),l=[o];function t(r,c,i,u,d,h){return n(),a("div",null,l)}const B=s(p,[["render",t]]);export{m as __pageData,B as default};
