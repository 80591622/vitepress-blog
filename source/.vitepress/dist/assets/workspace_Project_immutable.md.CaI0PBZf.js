import{_ as n,c as l,o as p,a5 as a,l as s}from"./chunks/framework.BQQWXjGs.js";const _=JSON.parse('{"title":"seamless-immutable","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Project/immutable.md","filePath":"workspace/Project/immutable.md","lastUpdated":1713942612000}'),o={name:"workspace/Project/immutable.md"},e=a(`<h1 id="seamless-immutable" tabindex="-1">seamless-immutable <a class="header-anchor" href="#seamless-immutable" aria-label="Permalink to &quot;seamless-immutable&quot;">​</a></h1><p>React在减少重复渲染方面确实是有一套独特的处理办法，那就是虚拟DOM，但显然在首次渲染的时候React绝无可能超越原生的速度，或者一定能将其它的框架比下去。 但是每次数据变动都会执行render，大大影响了性能，特别是在移动端。</p><p>JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 foo={a: 1}; bar=foo; bar.a=2 你会发现此时 foo.a 也被改成了 2。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。</p><p>seamless-immutable 与immutable功能类似，通过共享现有嵌套对象来提高深度复制大型嵌套对象时的速度。seamless-immutable中通过Object.freeze防止对象被修改，并定义了一系列API来实现对不可变数据结构的操作。(仅限于数组和对象)</p><p>与 Immutable.js 学院派的风格不同，seamless-immutable 并没有实现完整的 Persistent Data Structure， 而是使用 Object.defineProperty（因此只能在 IE9 及以上使用）扩展了 JavaScript 的 Array 和 Object 对象来实现， 只支持 Array 和 Object 两种数据类型，API 基于与 Array 和 Object 操持不变。代码库非常小，<strong>压缩后下载只有 2K。而 Immutable.js 压缩后下载有 16K</strong>。</p><p>Object.freeze() 方法可以冻结一个对象，冻结的对象不能添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。尝试修改会静默失败或抛出TypeError类型的错误。相关函数还包括： Object.isExtensible() Object.seal() Object.freeze和Object.defineProperty均为ES5中定义的方法，因此使用seamless-immutable需保证浏览器中这些方法存在</p><p>与 Object.freeze、const 区别</p><p>Object.freeze 和 ES6 中新加入的 const 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p><hr><ul><li><strong>开始使用</strong></li><li>yarn add seamless-immutable</li><li>import Immutable from &quot;seamless-immutable&quot;</li></ul><h1 id="immutable-array" tabindex="-1">Immutable Array <a class="header-anchor" href="#immutable-array" aria-label="Permalink to &quot;Immutable Array&quot;">​</a></h1><hr><h3 id="from-type" tabindex="-1">from(type) <a class="header-anchor" href="#from-type" aria-label="Permalink to &quot;from(type)&quot;">​</a></h3><ul><li>type：array | object</li><li>设置成 Immutable 对象</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> code1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> code2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">])); </span><span style="color:#7F848E;font-style:italic;">//同 from()</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code1</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//Immutable([1, 2, 3])</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code2</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//Immutable([1, 2, 3])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="flatmap-obj-fun" tabindex="-1">flatMap(obj,fun) <a class="header-anchor" href="#flatmap-obj-fun" aria-label="Permalink to &quot;flatMap(obj,fun)&quot;">​</a></h3><ul><li>obj： immutable</li><li>fun : function</li><li>循环 immutable 对象， 返回 一个新的 immutable 对象</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newarr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flatMap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#98C379;"> &#39;hello &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newarr</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable([&quot;hello AA&quot;, &quot;hello BB&quot;, &quot;hello CC&quot;])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="isimmutable-type" tabindex="-1">isImmutable(type) <a class="header-anchor" href="#isimmutable-type" aria-label="Permalink to &quot;isImmutable(type)&quot;">​</a></h3><ul><li><p>type：array | object | immutable</p></li><li><p>判断是否是 Immutable 对象</p></li><li><p>注：参数如果是 int string bool,undefined,null 返回 true</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> code1</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> code2</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isImmutable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code1</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isImmutable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code2</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">//false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="immutable-object-array" tabindex="-1">Immutable Object || Array <a class="header-anchor" href="#immutable-object-array" aria-label="Permalink to &quot;Immutable Object || Array&quot;">​</a></h1><hr><h3 id="asmutable-obj-type" tabindex="-1">asMutable(obj,type) <a class="header-anchor" href="#asmutable-obj-type" aria-label="Permalink to &quot;asMutable(obj,type)&quot;">​</a></h3>`,24),t=s("ul",null,[s("li",null,"obj： immutable"),s("li",{"deep:false":""},"type：默认是"),s("li",{"deep:true":""},"返回数组的可变副本,对于深度可变的副本需设置"),s("li")],-1),r=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> mutableArray</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asMutable</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">banner</span><span style="color:#ABB2BF;">,{</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">     mutableArray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">       return</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">victory</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;victory&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">     });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">   console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mutableArray</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">banner</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//可改变</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h1 id="immutable-object" tabindex="-1">Immutable Object <a class="header-anchor" href="#immutable-object" aria-label="Permalink to &quot;Immutable Object&quot;">​</a></h1><hr><h3 id="merge-obj1-obj2-type" tabindex="-1">merge (obj1,obj2,type) <a class="header-anchor" href="#merge-obj1-obj2-type" aria-label="Permalink to &quot;merge (obj1,obj2,type)&quot;">​</a></h3>`,4),c=s("ul",null,[s("li",null,"obj1 immutable"),s("li",null,"obj2 : object| array"),s("li",{"deep:false":""},"type: object 默认是"),s("li"),s("li",{"deep:true":""},"返回合并后的 Immutable,对于深度可变的副本需设置")],-1),B=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code1:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">merge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;DD&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({a: &quot;AA&quot;, b: &quot;BB&quot;, c: &quot;CC&quot;, d: &quot;DD&quot;})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code2:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">}});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newsobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">merge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, [{</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">}}, {</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AAAA&#39;</span><span style="color:#ABB2BF;">}}], {</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newsobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable({status: &quot;error&quot;, {a: &quot;AAAA&quot;, b: &quot;BB&quot;, c: &quot;CC&quot;}})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code3:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> code1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">//Array无效</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> code2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">merge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code1</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable([1,2,3])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="replace-obj1-obj2-type" tabindex="-1">replace(obj1,obj2,type) <a class="header-anchor" href="#replace-obj1-obj2-type" aria-label="Permalink to &quot;replace(obj1,obj2,type)&quot;">​</a></h3>`,2),y=s("ul",null,[s("li",null,[s("p",null,"obj1 immutable")]),s("li",null,[s("p",null,"obj2 : object")]),s("li",{"deep:false":""},[s("p",null,"type: object 默认是")]),s("li",{"deep:true":""},[s("p",null,"返回替换后的 Immutable,对于深度可变的副本需设置")])],-1),i=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">}, {</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//Immutable({a: {b: &#39;test&#39;}, d: &#39;ok&#39;})</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> obj2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//  false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//  true。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="set-obj-key-value-type" tabindex="-1">set(obj,key,value,type) <a class="header-anchor" href="#set-obj-key-value-type" aria-label="Permalink to &quot;set(obj,key,value,type)&quot;">​</a></h3>`,2),b=s("ul",null,[s("li",null,"obj1 immutable"),s("li",null,"key : string"),s("li",null,"value : any"),s("li",{"deep:false":""},"type: object 默认是"),s("li",null,"设置 immutable 对象制定的值")],-1),F=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;DD&#39;</span><span style="color:#ABB2BF;">}});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;BBB&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({a: &#39;AA&#39;, b: &#39;BB&#39;, c: {d: &#39;DD&#39;}})</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({a: &#39;AA&#39;, b: &#39;BBB&#39;, c: {d: &#39;DD&#39;}})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="setin-obj-key-value-type" tabindex="-1">setIn (obj,key,value,type) <a class="header-anchor" href="#setin-obj-key-value-type" aria-label="Permalink to &quot;setIn (obj,key,value,type)&quot;">​</a></h3>`,2),A=s("ul",null,[s("li",null,"obj1 immutable"),s("li",null,"key : string"),s("li",null,"value : any"),s("li",{"deep:false":""},"type: object 默认是"),s("li",null,"深度设置 immutable 对象制定的值")],-1),u=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;DD&#39;</span><span style="color:#ABB2BF;">}});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setIn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&#39;DDDD&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//Immutable({a: &#39;AA&#39;, b: &#39;BB&#39;, c: {d: &#39;DD&#39;})</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable({a: &#39;AA&#39;, b: &#39;BB&#39;, c: {d: &#39;DDDD&#39;})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="getin-ob-arr-default" tabindex="-1">getIn(ob,arr,default) <a class="header-anchor" href="#getin-ob-arr-default" aria-label="Permalink to &quot;getIn(ob,arr,default)&quot;">​</a></h3><ul><li>obj： immutable</li><li>key : array</li><li>default : 如果返回值为空则返回默认值</li><li>获取 immutable 对象指定的值</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;DD&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> code1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> code2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getIn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&#39;EE&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//BB</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">code2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//CC</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="update-obj-key-fun-parmas" tabindex="-1">update(obj,key,fun,parmas) <a class="header-anchor" href="#update-obj-key-fun-parmas" aria-label="Permalink to &quot;update(obj,key,fun,parmas)&quot;">​</a></h3><ul><li>obj： immutable</li><li>key : string</li><li>fun : function</li><li>parmas：any，回调函数的参数</li><li>修改 immutable 对象的值</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code1:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> fun</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> x</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fun</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable({a: &#39;AA&#39;})</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({a: &#39;AAAA&#39;})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code 2 :</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39; &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;world&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable({a: &#39;hello&#39;})</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable({a: &#39;hello world&#39;})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="updatein-obj-key-fun-parmas" tabindex="-1">updateIn(obj,key,fun,parmas) <a class="header-anchor" href="#updatein-obj-key-fun-parmas" aria-label="Permalink to &quot;updateIn(obj,key,fun,parmas)&quot;">​</a></h3><ul><li>obj： immutable</li><li>key : array</li><li>fun : function</li><li>parmas：any，回调函数的参数</li><li>深度修改 immutable 对象的值</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">}});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateIn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span><span style="color:#E06C75;">workspace</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#E06C75;">workspace</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="without-obj-key" tabindex="-1">without(obj,key) <a class="header-anchor" href="#without-obj-key" aria-label="Permalink to &quot;without(obj,key)&quot;">​</a></h3><ul><li>obj： immutable</li><li>key : array | string |function</li><li>删除 immutable 对象的值</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code 1:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">without</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({a: &#39;AA&#39;, c: &#39;CC&#39;})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">code</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">without</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({ c: &#39;CC&#39;})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">code</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">without</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj3</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({ c: &#39;CC&#39;})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">code</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;AA&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;BB&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;CC&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj4</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">without</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;a&#39;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;BB&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj4</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Immutable({ c: &#39;CC&#39;})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="asobject-obj-fun" tabindex="-1">asObject(obj,fun) <a class="header-anchor" href="#asobject-obj-fun" aria-label="Permalink to &quot;asObject(obj,fun)&quot;">​</a></h3><ul><li>obj： immutable</li><li>fun : function</li><li>迭代器函数将返回两个元素的数组 - 第一个表示键，另一个表示值。然后返- 回由这些键和值构成的不可变对象。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;"> var</span><span style="color:#E06C75;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> immutable</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;hey&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;you&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> tempAry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tempAry</span><span style="color:#ABB2BF;">);   </span><span style="color:#7F848E;font-style:italic;">//{hey: &quot;hey&quot;, you: &quot;you&quot;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//code2</span></span>
<span class="line"><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Immutable</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;aa&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;bb&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newobj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Immutable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">asObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">()];</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newobj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//Immutable({aa: &quot;AA&quot;, bb: &quot;BB&quot;})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,16),C=[e,t,r,c,B,y,i,b,F,A,u];function m(E,d,j,D,h,f){return p(),l("div",null,C)}const I=n(o,[["render",m]]);export{_ as __pageData,I as default};
