import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const u=JSON.parse('{"title":"Redux源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/react/react-redux.md","filePath":"workspace/Frame/react/react-redux.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/react/react-redux.md"},e=l(`<h1 id="redux源码解析" tabindex="-1">Redux源码解析 <a class="header-anchor" href="#redux源码解析" aria-label="Permalink to &quot;Redux源码解析&quot;">​</a></h1><h2 id="redux三大原则" tabindex="-1">Redux三大原则 <a class="header-anchor" href="#redux三大原则" aria-label="Permalink to &quot;Redux三大原则&quot;">​</a></h2><ul><li><strong>唯一数据源</strong><ul><li>整个应用的state都被存储到一个状态树里面，并且这个状态树，只存在于唯一的store中</li></ul></li><li><strong>保持只读状态</strong><ul><li>state是只读的，唯一改变state的方法就是触发action，action是一个用于描述以发生时间的普通对象 <ul><li>store里面保存的都是普通Object，可直接修改他的值，官方文档说的“只有通过action才能修改状态”更多的是一种规则/约束，目的是使数据的流动过程变得清晰且可预测，而不是说通过其他方式（比如直接修改对象属性）会报错。当然这种方式是 <strong>无法触发props更新的</strong></li></ul></li></ul></li><li><strong>数据改变只能通过纯函数来执行</strong><ul><li>使用纯函数来执行修改，为了描述action如何改变state的，你需要编写reducers</li></ul></li></ul><p><img src="https://ae01.alicdn.com/kf/H70eea0923b414f78a4a4d805e374147aX.gif" alt=""></p><h2 id="action-store-dispatch" tabindex="-1">Action &amp; store.dispatch( ) <a class="header-anchor" href="#action-store-dispatch" aria-label="Permalink to &quot;Action &amp; store.dispatch( )&quot;">​</a></h2><p><code>Action</code>是把数据从应用传到store的有效载荷。它是store数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。</p><ul><li>首先用户请求或者页面默认请求执行一个函数 例：myBoardList</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> myBoardList</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">getState</span><span style="color:#ABB2BF;">){</span><span style="color:#7F848E;font-style:italic;">//这里是中间件穿进去的</span></span>
<span class="line"><span style="color:#E5C07B;">    request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myBoard</span><span style="color:#C678DD;">}\${</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">().</span><span style="color:#E5C07B;">loginReducer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user_id</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(({</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">})</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> my_list</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//这里一整理数据格式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //Action 是一个对象。其中的type属性是必须的，表示 Action 的名称。其他属性可以自由设置</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> action</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">              type</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">TYPES</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BOARD_MY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">              payload</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">                 my_list</span></span>
<span class="line"><span style="color:#ABB2BF;">              }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //store.dispatch()是页面发出Action的唯一方法。</span></span>
<span class="line"><span style="color:#61AFEF;">        dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//页面使用</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">myBoardList</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="reducer" tabindex="-1">Reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;Reducer&quot;">​</a></h2><p><code>Reducers</code>指定了应用状态的变化<code>如何响应</code>actions并发送到store的，actions只是描述了有事情发生了这一事实，并没有描述应用如何更新state。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> TYPES</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;actionTypes&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  my_list</span><span style="color:#ABB2BF;">:[]</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> tabBarReducer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> initialState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">     case</span><span style="color:#E5C07B;"> TYPES</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BOARD_MY</span><span style="color:#ABB2BF;"> :</span></span>
<span class="line"><span style="color:#C678DD;">          return</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    default</span><span style="color:#ABB2BF;">: </span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> tabBarReducer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> reducer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> combineReducers</span><span style="color:#ABB2BF;">({ </span><span style="color:#7F848E;font-style:italic;">//合并所有的reducer导出，然后当做createStore的参数</span></span>
<span class="line"><span style="color:#E06C75;">   tabBarReducer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">   ....</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;Store&quot;">​</a></h2><p><code>store</code>就是redux里面的一个容器，store本质上是一个状态树，保存了所有对象的状态。任何UI组件都可以直接从store访问特定对象的状态。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> reduxThunk</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;redux-thunk&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> reduxPromise</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;redux-promise&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">applyMiddleware</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;redux&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">composeWithDevTools</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;redux-devtools-extension&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> reducer</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./reducer&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> composeWithDevTools</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">,</span><span style="color:#61AFEF;">applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reduxThunk</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reduxPromise</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="redux源码" tabindex="-1">Redux源码 * <a class="header-anchor" href="#redux源码" aria-label="Permalink to &quot;Redux源码 *&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> combineReducers</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">renducers</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //传入一个renducers管理组，返回的是一个renducer</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{},</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{}){</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> newState</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> attr</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> renducers</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">            newState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attr</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">renducers</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attr</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attr</span><span style="color:#ABB2BF;">],</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> createStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reducer</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //获取状态对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //存放所有的监听函数</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> listeners</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#61AFEF;"> getState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //提供一个方法供外部调用派发action</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    let</span><span style="color:#61AFEF;"> dispath</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">        //调用管理员reducer得到新的state</span></span>
<span class="line highlighted"><span style="color:#E06C75;">        state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">        //执行所有的监听函数，相当于发布</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">l</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> l</span><span style="color:#ABB2BF;">())</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //订阅状态变化事件，当状态改变发生之后执行监听函数</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#61AFEF;"> subscribe</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">listener</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">       //store.subscribe方法返回一个函数，调用这个函数就可以解除监听。</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> unsubscribe</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">             const</span><span style="color:#E5C07B;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">listener</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">             listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">           }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    dispath</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        getState</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">//获取当前的容器的状态</span></span>
<span class="line"><span style="color:#E06C75;">        subscribe</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//当你对数据库发出一个指令，而且数据库根据这个指令已经计算得到新的状态以后需要执行的回调函数</span></span>
<span class="line"><span style="color:#E06C75;">        dispath</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">//发出一个Action，告诉数据库你要干嘛。数据库会根据当前的状态以及你的命令类型计算得到新的状态。计算完成以后，我们要执行subscribe添加的所有的回调函数.</span></span>
<span class="line"><span style="color:#E06C75;">        replaceReducer</span><span style="color:#7F848E;font-style:italic;"> //用一个新的store替换掉我们当前的store用来计算我们的新的state。</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 获取数据</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ADD_TODO&#39;</span><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">// 更新数据</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">  document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#counter&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 注册订阅函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>我们可以在应用初始化的时候，创建一个<code>window.store = createStore(reducer)</code>， 然后在需要的地方通过<code>store.getState()去获取数据</code>， 通过<code>store.dispatch去更新数据</code>， 通过<code>store.subscribe去订阅数据变化然后进行setState</code>...如果很多地方都这样做一遍，实在是不堪其重，而且，还是没有避免掉全局变量的不优雅。所以就需要<strong>react-redux</strong>了</p><h2 id="react-redux" tabindex="-1">React-Redux <a class="header-anchor" href="#react-redux" aria-label="Permalink to &quot;React-Redux&quot;">​</a></h2><h3 id="provider" tabindex="-1">Provider <a class="header-anchor" href="#provider" aria-label="Permalink to &quot;Provider&quot;">​</a></h3><p>由于全局变量有诸多的缺点，所有就需要用到Provider优化</p><p><code>Provider</code>其实就只是一个外层容器，它的作用就是通过配合<code>connect</code>来达到跨层级传递数据。使用时只需将Provider定义为整个项目最外层的组件，并设置好store。 那么整个项目都可以直接获取这个store。它的原理其实是通过React中的Context来实现的。它的核心代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> PropTypes</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;prop-types&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">ReactReduxContext</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./Context&#39;</span><span style="color:#7F848E;font-style:italic;">   //就是利用上下文来达到跨层级传递数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Provider</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">        super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> props</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            storeState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">            store</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    componentDidMount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_isMounted</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    componentWillUnmount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">unsubscribe</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unsubscribe</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">//取消订阅</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_isMounted</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    componentDidUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">prevProps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> prevProps</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">unsubscribe</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unsubscribe</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    subscribe</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //store.subscribe返回的是取消订阅的方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //Store 允许使用store.subscribe方法设置监听函数，每次dispatch后，执行完reducer改变新的store后，都会重新发布这个含函数</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">unsubscribe</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> newStoreState</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_isMounted</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">providerState</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果值相同，则跳过不必要的状态更新</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">providerState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">storeState</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> newStoreState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">storeState</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">newStoreState</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 可能在呈现和装载之间调度了操作-处理那些</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> postMountStoreState</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">postMountStoreState</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">storeState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">storeState</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">postMountStoreState</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> Context</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> ReactReduxContext</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">Context.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">                {</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E5C07B;">Context.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">propTypes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    store</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shape</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        subscribe</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">func</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        dispatch</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">func</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        getState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">func</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#E06C75;">    context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    children</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">any</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Provider</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><h3 id="connect" tabindex="-1">Connect <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;Connect&quot;">​</a></h3><p><code>connect</code>的作用是连接React组件与Store，它包在我们的容器组件的外一层，它接收上面Provider提供的store里面的<code>state</code>和<code>dispatch</code>，传给一个构造函数，返回一个对象，以属性形式传给我们的容器组件。</p><p>它共有四个参数 <strong>mapStateToProps, mapDispatchToProps, mergeProps以及options</strong>。</p><p><code>mapStateToProps</code> 的作用是将store里的state（数据源）绑定到指定组件的props中</p><p><code>mapDispatchToProps</code> 的作用是将store里的action（操作数据的方法）绑定到指定组件的props中</p><p>其实就是利用上下文获取所有的store,然后执行store.getState()保证能获取最新的数据，然后在利用mapStateToProps，mapDispatchToProps 把需要用到的解构出来</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> mapStateToProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ({</span><span style="color:#E06C75;font-style:italic;">loginReducer</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">loading</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">    userInfo</span><span style="color:#ABB2BF;">: {...</span><span style="color:#E06C75;">loginReducer</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">loading</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> mapDispatchToProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;">  (</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   const</span><span style="color:#E5C07B;"> actions</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> bindActionCreators</span><span style="color:#ABB2BF;">({...</span><span style="color:#E06C75;">globalActions</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#ABB2BF;"> {...</span><span style="color:#E06C75;">actions</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mapStateToProps</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">mapDispatchToProps</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">Index</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//通过props获取用户信息</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userInfo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>connect部分源码</p><p>新版的太复杂，看下老版本的，便于理解</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> connect</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">mapStateToProps</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">mapDispatchToProps</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">WrappedComponent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  class</span><span style="color:#E5C07B;"> Connect</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> contextTypes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      store</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">object</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">      super</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    componentDidMount</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //使用subscribe，会实时检测store的变化</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">unsubscribe</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setProps</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    componentWillUnMount</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unsubscribe</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    setProps</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> stateProps</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> mapStateToProps</span></span>
<span class="line"><span style="color:#C678DD;">        ?</span><span style="color:#61AFEF;"> mapStateToProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">storeState</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        :</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 不传为空</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> dispatchProps</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> mapDispatchToProps</span></span>
<span class="line"><span style="color:#C678DD;">        ?</span><span style="color:#61AFEF;"> mapDispatchToProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        :</span><span style="color:#61AFEF;"> mapDispatchToProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;"> })); </span><span style="color:#7F848E;font-style:italic;">// 默认传进去dispatch</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //mapDispatchToProps里面还可能会有bindActionCreators这个方法；bindActionCreators的作用是将一个或多个action和dispatch组合起来生成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //通过dispatch将action包裹起来，这样可以通过bindActionCreators创建的方法，直接调用dispatch(action)(隐式调用），相当于直接组合成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //dispatch({type:type.ADD_ITEM, text}) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //export function whenMapDispatchToPropsIsObject(mapDispatchToProps) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //    return wrapMapToPropsConstant(dispatch =&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //        bindActionCreators(mapDispatchToProps, dispatch)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // }</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">          ...</span><span style="color:#E06C75;">stateProps</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          ...</span><span style="color:#E06C75;">dispatchProps</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">          ...</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    render</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">WrappedComponent</span><span style="color:#C678DD;"> {</span><span style="color:#ABB2BF;">...</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> Connect</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="异步处理" tabindex="-1">异步处理 <a class="header-anchor" href="#异步处理" aria-label="Permalink to &quot;异步处理&quot;">​</a></h2><h3 id="redux-thunk" tabindex="-1">redux-thunk <a class="header-anchor" href="#redux-thunk" aria-label="Permalink to &quot;redux-thunk&quot;">​</a></h3><p><strong>源码</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createThunkMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">extraArgument</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">getState</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;font-style:italic;"> next</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;font-style:italic;"> action</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> action</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;function&#39;</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">//判别action的类型，如果action是函数，就调用这个函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //发现实参为dispatch和getState，因此我们在定义action为thunk函数是，一般形参为dispatch和getState。</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#61AFEF;"> action</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">extraArgument</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> thunk</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createThunkMiddleware</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">thunk</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">withExtraArgument</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> createThunkMiddleware</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> thunk</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面的dispatch其实是中间件执行之后通过其他方法把store自带的dispatch覆盖， 所以我们平时使用的store.dispatch(action)其实就是中间件执行之后的dispatch, 而这里的next其实是store自带的dispatch，<strong>虽然最终还是通过store自带的dispatch实现的，</strong> 但是调用的确是中间件的方法，虽然都叫做dispatch。</p><p><strong>使用方式</strong></p><p>可以传入对象或者函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> myBoardList</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">getState</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">     const</span><span style="color:#E5C07B;"> action</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">TYPES</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BOARD_MY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            payload</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">               my_list</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#61AFEF;">     dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>缺点</strong></p><p>thunk的缺点也是很明显的，thunk<code>仅仅做了执行</code>这个函数，<code>并不在乎函数主体内是什么</code><br> thunk使得redux可以接受函数作为action,这就会使得异步操作<code>太为分散</code>【往往需要promise或者async/wait的支持才可以】</p><p>action的形式不统一</p><h3 id="redux-saga" tabindex="-1">redux-saga <a class="header-anchor" href="#redux-saga" aria-label="Permalink to &quot;redux-saga&quot;">​</a></h3><p><strong>流程:</strong></p><p>异步操作——&gt;Effect函数——&gt;纯文本对象——&gt;saga-middleware——&gt;执行异步操作</p><p><strong>配置sage</strong></p><p><strong>effect.js</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;">  *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> Api</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;../services&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">call</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">put</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">takeEvery</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;redux-saga/effects&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 副作用处理 effects：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  用于异步处理请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> effects</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 获取话题列表</span></span>
<span class="line"><span style="color:#C678DD;">  *</span><span style="color:#61AFEF;">fetchTopics</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Api</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">topics</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      yield</span><span style="color:#61AFEF;"> put</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;topics&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        payload</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">          topics</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //......</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  异步 action 监听： 所有的effect整合到了一块</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *  dispatch 对应的action时，调用对应的异步处理方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function*</span><span style="color:#61AFEF;"> watcher</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  yield</span><span style="color:#61AFEF;"> takeEvery</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;fetchTopics&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">effects</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fetchTopics</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  yield</span><span style="color:#61AFEF;"> takeEvery</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;aaa&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">effects</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">aaa</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  yield</span><span style="color:#61AFEF;"> takeEvery</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;bbb&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">effects</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">bbb</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //.....</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><strong>reducers.js</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 多个reducer 需要用到combineReducers合并</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化State</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> initState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  topics</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">  topic</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">  collected</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 纯函数 reducer：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 传入旧 state 和 action，从而返回一个信息state</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> reducers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> initState</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &#39;topics&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        topics</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">payload</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">topics</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //.....</span></span>
<span class="line"><span style="color:#C678DD;">    default</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>这里的写法和redux-thunk中reducers写法一样</p><p><strong>index.js</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//统一导出reducers和effects</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reducers</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./reducers&#39;</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">watcher</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./effects&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  reducers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  watcher</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>main.js</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDOM</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Provider</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-redux&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">applyMiddleware</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;redux&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> createSagaMiddleware</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;redux-saga&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">reducers</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">watcher</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./redux&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sagaMiddleware</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createSagaMiddleware</span><span style="color:#ABB2BF;">();</span></span>
<span class="line highlighted"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    reducers</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">//这里是所有的reducer</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">  applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sagaMiddleware</span><span style="color:#ABB2BF;">), </span><span style="color:#7F848E;font-style:italic;">//执行saga的中间件</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">sagaMiddleware</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">watcher</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">Provider</span><span style="color:#D19A66;font-style:italic;"> store</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">store</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E5C07B;">  document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;app&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这里的sagaMiddleware.run() 方法，主要是启动saga，<strong>用于监听actions请求</strong>，待匹配到定义的effects type时，转发调用effects方法，从而处理异步请求，然后再调用redux中的dispatch来触发新的action，来更新store！</p><p><strong>页面使用</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">(({ </span><span style="color:#E06C75;font-style:italic;">topics</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">loading</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({  </span><span style="color:#7F848E;font-style:italic;">//type的值</span></span>
<span class="line"><span style="color:#E06C75;">  topics</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  loading</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">componentDidMount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;fetchTopics&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//effect的函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>处理步骤：</strong></p><ol><li><p>用户dispatch执行一个异步函数</p></li><li><p>调用redux-saga/effects中的方法 call，访问接口获取数据；</p></li><li><p>接口访问成功，使用redux-saga/effects中的方法put，发起action，这里的put方法和dispatch一样，都是用于发起action；</p></li><li><p>put发起action后，redux的reducers会收到action，从而更新state。</p></li></ol><p>集中处理了所有的异步操作，异步接口部分一目了然</p><p>异步操作的流程是可以控制的，可以随时取消相应的异步操作。</p><h2 id="redux-middleware-源码分析" tabindex="-1">redux middleware 源码分析 <a class="header-anchor" href="#redux-middleware-源码分析" aria-label="Permalink to &quot;redux middleware 源码分析&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 以 redux-thunk、logger 中间件为例介绍中间件的使用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> enhancer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">thunk</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;">),  </span></span>
<span class="line"><span style="color:#E5C07B;">const</span><span style="color:#ABB2BF;"> store </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rootReducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">enhancer</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>applyMiddleware 调用入口</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">preloadedState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">enhancer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 通过下面代码可以发现，如果 createStore 传入 2 个参数，第二个参数相当于就是 enhancer</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> preloadedState</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;function&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> enhancer</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    enhancer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> preloadedState</span></span>
<span class="line"><span style="color:#E06C75;">    preloadedState</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> enhancer</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> enhancer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">preloadedState</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>由上述 createStore 源码发现，applyMiddleware 会进行 <code>applyMiddleware(thunk, logger)(createStore)(reducer, preloadedState)</code> 的调用。</p><p><strong>applyMiddleware 源码如下</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> applyMiddleware</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">middlewares</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 柯理化  ()=&gt;()=&gt;{}</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;font-style:italic;"> createStore</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">//store  =  {getState,dispatch.....}</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dispatch</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> chain</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> middlewareAPI</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      getState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getState</span><span style="color:#ABB2BF;">,                </span><span style="color:#7F848E;font-style:italic;">// 调用 redux 原生方法，获取状态</span></span>
<span class="line"><span style="color:#61AFEF;">      dispatch</span><span style="color:#ABB2BF;">: (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 调用 redux 原生 dispatch 方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 串行 middleware</span></span>
<span class="line"><span style="color:#E06C75;">    chain</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> middlewares</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> middleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">middlewareAPI</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// thunk的参数参数正是 ({ dispatch, getState })</span></span>
<span class="line"><span style="color:#E06C75;">    dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">chain</span><span style="color:#ABB2BF;">)(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      dispatch</span><span style="color:#7F848E;font-style:italic;"> // 返回加工过的 dispatch</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }  </span><span style="color:#7F848E;font-style:italic;">//然后 &lt;Provider store={store} /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>dispatch 是如何被加工的</strong></p><p>compose 的源码</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">funcs</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> funcs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> a</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">getState</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;font-style:italic;"> next</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;font-style:italic;"> action</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 经 compose 源码分析，此处 next 为 Store.dispatch</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // action  为 this.props.dispatch(\`action\`)</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> action</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;function&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> action</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>其 middleware 的内部串行调用方式如下，从而完成了 dispatch 功能的增强(支持如 this.props.dispatch(action) 的调用以及日志功能)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> action</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;function&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> action</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dispatch</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>applyMiddleware的核心就是 执行的createStore,在dispatch里面添加一些方法,最后返回加工过的 dispatch,这个dispatch 有中间价的一些处理</p>`,77),o=[e];function r(t,c,B,i,y,b){return a(),n("div",null,o)}const C=s(p,[["render",r]]);export{u as __pageData,C as default};
