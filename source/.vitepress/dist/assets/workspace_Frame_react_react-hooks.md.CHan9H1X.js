import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const u=JSON.parse('{"title":"Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/react/react-hooks.md","filePath":"workspace/Frame/react/react-hooks.md","lastUpdated":1713971483000}'),p={name:"workspace/Frame/react/react-hooks.md"},e=l(`<h1 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">​</a></h1><h2 id="hook的规则" tabindex="-1">Hook的规则 <a class="header-anchor" href="#hook的规则" aria-label="Permalink to &quot;Hook的规则&quot;">​</a></h2><ul><li>只在最顶层使用 Hook <ul><li>不要在<code>循环</code>，<code>条件</code>或<code>嵌套函数</code>中调用 Hook， 确保总是在你的 React 函数的最顶层调用他们。遵守这条规则，你就能确保 Hook 在每一次渲染中都按照同样的 <strong><code>顺序</code></strong> 被调用。这让 React 能够在多次的 useState 和 useEffect 调用之间保持 hook 状态的正确。</li></ul></li><li>只在 React 函数中调用 Hook <ul><li>在 React 的函数组件中调用 Hook</li><li>在自定义 Hook 中调用其他 Hook <ul><li><strong>在类中使用报错警告</strong> 「Hooks can only be called inside the body of a function component」</li></ul></li></ul></li></ul><h2 id="使用hooks的好处" tabindex="-1">使用Hooks的好处 <a class="header-anchor" href="#使用hooks的好处" aria-label="Permalink to &quot;使用Hooks的好处&quot;">​</a></h2><p><strong>1.class 学习成本高</strong><br> 生命周期，this指向啥的，hooks只要会usestate useeffect差不多能解决所有问题<br><strong>2.class业务逻辑分散</strong><br> 定时器，dom2事件啥的一定要在componentWillUnMount 去卸载。而是用hooks就非常聚合了，直接返回函数里面清楚就可以了<br><strong>3.class逻辑复用困难</strong><br> hooks最有优势的就数她的逻辑复用能力了<br> 在class中一般用Render Props（局限性）和高阶组件（嵌套太深）做逻辑复用<br> 比如一个列表渲染，class每次都要写数据请求，下拉加载，上拉刷新重置分页，loading展示，而在hooks里直接自定义一个hooks就可以做到全部的列表加载逻辑公用<br><strong>4.</strong> class 打包时无法对 class 的属性方法进行优化，而使用 hooks 则可以将代码压缩到极致。<br><strong>5.</strong> 最直接的就是业务变更的时候不需要再把函数式组件变成class了</p><p><strong>缺点</strong><br> 形成太多闭包，容易导致内存泄漏<br> function写太多代码后期不好维护</p><p><strong>自定义过的</strong><br> useFetch<br> useMouse<br> useScroll<br> useSize<br> useFrom<br> useTable<br> useStore<br></p><p>真正说服我使用 react hooks 的，是 react blog 里面提到的，使用 class component 打包时无法对 class 的属性方法进行优化，而<strong>使用 hooks 则可以将代码压缩到极致</strong>。<br> 有人会说 hooks 是趋势是未来啥的，但是，实际上，hooks 比 class 复杂和难理解多了，而且随着业务逻辑的增长，一个 function 里面将会写出越来越多的代码， 越来越复杂，让你无法维护。而实际上，在运行时，两则的差别不是特别大，都没有性能上的优劣。<br></p><h2 id="hooks的方法" tabindex="-1">Hooks的方法 <a class="header-anchor" href="#hooks的方法" aria-label="Permalink to &quot;Hooks的方法&quot;">​</a></h2><table><thead><tr><th style="text-align:left;"><span style="display:block;text-align:left;"> 钩子名</span></th><th style="text-align:left;"><span style="display:block;text-align:left;"> 作用</span></th></tr></thead><tbody><tr><td style="text-align:left;">useState</td><td style="text-align:left;">初始化和设置状态</td></tr><tr><td style="text-align:left;">useEffect</td><td style="text-align:left;">componentDidMount，componentDidUpdate和componentWillUnmount和结合体,所以可以监听useState定义值的变化</td></tr><tr><td style="text-align:left;">useContext</td><td style="text-align:left;">定义一个全局的对象,类似 context</td></tr><tr><td style="text-align:left;">useReducer</td><td style="text-align:left;">可以增强函数提供类似 Redux 的功能</td></tr><tr><td style="text-align:left;">useCallback</td><td style="text-align:left;">记忆作用,共有两个参数，第一个参数为一个匿名函数，就是我们想要创建的函数体。第二参数为一个数组，里面的每一项是用来判断是否需要重新创建函数体的变量，如果传入的变量值保持不变，返回记忆结果。如果任何一项改变，则返回新的结果</td></tr><tr><td style="text-align:left;">useMemo</td><td style="text-align:left;">作用和传入参数与 useCallback 一致,useCallback返回函数,useDemo 返回值</td></tr><tr><td style="text-align:left;">useRef</td><td style="text-align:left;">获取 ref 属性对应的 dom</td></tr><tr><td style="text-align:left;">useImperativeMethods</td><td style="text-align:left;">自定义使用ref时公开给父组件的实例值</td></tr><tr><td style="text-align:left;">useLayoutEffect</td><td style="text-align:left;">作用与useEffect相同，但在所有DOM改变后同步触发</td></tr><tr><td style="text-align:left;">useDebugValue</td><td style="text-align:left;">useDebugValue 可用于在 React 开发者工具中显示自定义 hook 的标签。</td></tr></tbody></table><h2 id="usestate" tabindex="-1">useState <a class="header-anchor" href="#usestate" aria-label="Permalink to &quot;useState&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//直接传入初始值</span></span>
<span class="line highlighted"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setState</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//传入一个函数，在函数中计算并返回初始的 state，此函数只在初始渲染时被调用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setState</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>官方建议推荐把 state 切分成多个 state 变量，每个变量包含的不同值会在同时发生变化。</p><p><strong>好处是</strong></p><ul><li>后期把一些相关的逻辑抽取到一个自定义 Hook 变得容易<br></li><li>赋值的时候简单，多个需要克隆下，把不变的存储下来</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">//直接从初始值里面获取</span></span>
<span class="line"><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">prevState</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">prevState</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//该函数将接收先前的state,并返回一个更新后的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="useeffect" tabindex="-1">useEffect <a class="header-anchor" href="#useeffect" aria-label="Permalink to &quot;useEffect&quot;">​</a></h2><p><code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code>：useEffect Hook 可以表达所有这些(包括 不那么 常见 的场景)的组合。</p><p>默认情况下，effect 将在每轮<code>渲染结束后执行</code>，但你可以选择让它 在只有<code>某些值改变</code>的时候 才执行。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Counter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, []); </span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>为防止内存泄漏，清除函数会在组件卸载前执行。另外，如果组件多次渲染（通常如此），则在执行下一个 effect 之前，<code>上一个 effect 就已被清除</code>。看下个栗子：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Example</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;11&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;22&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">            {</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;渲染&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">                setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt; +</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><img src="https://ae01.alicdn.com/kf/H66bfd87154314ad49baee2dd855336acT.gif" alt=""></p><p>打印的顺序为 <strong>渲染-&gt;22-&gt;11</strong></p><p>若多次执行effect，其内部会生成新的函数，（effect还是原函数，或者说指向原地址）这样的话如果我是定义的事件，每次更新都会执行，那么岂不是在事件还没有移除掉又定义了一次，所以useEffect加入了这个功能。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Example</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">width</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setWidth</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> resizeHandle</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">        setWidth</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerWidth</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    };</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;resize&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resizeHandle</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">            // window.removeEventListener(&quot;resize&quot;, resizeHandle)</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    });  </span><span style="color:#7F848E;font-style:italic;">//或者使用[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">width</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;+</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>看下面图片可以看出来，重复多次执行了<code>resize</code>方法</p><p><img src="https://ae01.alicdn.com/kf/H9d109cbe0722447baf4ef132fa24268fE.gif" alt=""></p><p><a href="http://file.wkdevhub.cn/workspace/Frame/react/use-hooks.html#useeffect%E5%9C%A8%E5%A4%96%E9%9D%A2%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0&#39;" target="_blank" rel="noreferrer">官方建议effect使用的方法声明在其内部</a></p><h2 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">​</a></h2><p>React16中更新了Context API，Context主要用于爷孙组件的传值问题，新的Context API使用订阅发布者模式方式实现在爷孙组件中传值</p><p>React Hooks出现之后也对Context API出了响应的Hook useContext。同样也是解传值的问题</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> stateContext</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createContext</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;default&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//父组件</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">stateContext.Provider</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">    value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#98C379;">&quot;Hello React&quot;</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">ContextComponent</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">stateContext.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//子组件 </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> ContextComponent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stateContext</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>可以看出，使用<code>useContext仍然需要在上层组件中使用&lt;MyContext.Provider&gt;</code>来为下层组件提供context。</p><h2 id="usereducer" tabindex="-1">useReducer <a class="header-anchor" href="#usereducer" aria-label="Permalink to &quot;useReducer&quot;">​</a></h2><p>看到<code>useReducer</code>,肯定会想到Redux，没错它和Redux的工作方式是一样的。useReducer的出现是useState的替代方案，能够让我们更好的管理状态。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialArg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在某些场景下，useReducer 会比 useState 更适用，例如 state <code>逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state </code>等。 并且，使用 useReducer 还能给那些会触发深更新的组件做性能优化，<code>因为你可以向子组件传递 dispatch 而不是回调函数</code> 。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &#39;increment&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line highlighted"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">};</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &#39;decrement&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line highlighted"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">};</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line highlighted"><span style="color:#C678DD;">      throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">();</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">  }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Counter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      Count: </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;decrement&#39;</span><span style="color:#ABB2BF;">})</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;-&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;increment&#39;</span><span style="color:#ABB2BF;">})</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;+&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><strong>第三个参数(惰性初始化)</strong></p><p>useReducer的第三个参数接受一个函数作为参数，并把第二个参数当作函数的参数执行。主要作用是初始值的惰性求值，把一些对状态的逻辑抽离出来，有利于重置state。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useMemo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useReducer</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">};</span></span>
<span class="line highlighted"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {...</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">};</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;increment&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;decrement&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">};</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;reset&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line highlighted"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Counter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            Count: </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;decrement&#39;</span><span style="color:#ABB2BF;">})</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;-&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;increment&#39;</span><span style="color:#ABB2BF;">})</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;+&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;reset&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">initialState</span><span style="color:#ABB2BF;">})</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;重置&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Counter</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="usecallback" tabindex="-1">useCallback <a class="header-anchor" href="#usecallback" aria-label="Permalink to &quot;useCallback&quot;">​</a></h2><p>返回一个memoized回调<code>函数</code>。</p><p><a href="http://file.wkdevhub.cn/workspace/Frame/react/use-hooks.html#usecallback%E7%A4%BA%E4%BE%8B%E4%BD%95%E6%97%B6%E6%9B%B4%E6%96%B0" target="_blank" rel="noreferrer">下面介绍的使用方式</a></p><h2 id="usememo" tabindex="-1">useMemo <a class="header-anchor" href="#usememo" aria-label="Permalink to &quot;useMemo&quot;">​</a></h2><p>返回一个memoized<code>值</code>。</p><p>useMemo和useCallback很像，唯一不同的就是</p><p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)。</p><p>公用的<code>方法</code>用<code>useCallback</code>,若是直接<code>渲染值</code>则用<code>useMemo</code>，用<code>useCallback</code>的话也是每次都要执行的，但是<code>useMemo</code>是直接把值记忆存储了（前面的都是废话，其实都能实现，不过这样更符合习惯）</p><h2 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h2><p>本质上<code>useRef</code>就像是可以在其<code>.current</code>属性中保存一个可变值的“盒子”，<code>useRef(null)返回值</code>是不可拓展的属性,<code>.current</code>可以。</p><p>下篇文章介绍如何使用而useRef自己最新的值，或者存储上一次props或者state的值；我们直接声明一个值存储当前的值不好吗，为啥要借助useRef()</p><p><strong>这是因为它创建的是一个普通Javascript对象。而useRef()和自建一个 {current: ...}对象的唯一区别是，useRef会在每次渲染时返回同一个ref对象。</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useMemo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useReducer</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Example</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> inputRef</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        inputRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">focus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, []);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">inputRef</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="useimperativehandle" tabindex="-1">useImperativeHandle <a class="header-anchor" href="#useimperativehandle" aria-label="Permalink to &quot;useImperativeHandle&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">useImperativeHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">createHandle</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">deps</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>useImperativeHandle</code>可以让你在使用 ref 时<code>自定义</code>暴露给父组件的实例值。在大多数情况下，应当避免使用 ref 这样的命令式代码。<code>useImperativeHandle</code> 应当与 <code>forwardRef</code> 一起使用</p><p>就是说：当我们使用父组件把ref传递给子组件的时候，这个Hooks允许在子组件中把自定义实例附加到父组件传过来的ref上，有利于父组件控制子组件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    Fragment</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    useRef</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    useImperativeHandle</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    forwardRef</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    useEffect</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> FancyInput</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ref</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> inputRef</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">    useImperativeHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">            addText</span><span style="color:#ABB2BF;">: () </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">                inputRef.current.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;我是由父级添加的&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            },</span></span>
<span class="line highlighted"><span style="color:#E06C75;">            focus</span><span style="color:#ABB2BF;">: () </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">                inputRef.current.focus();</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    ));</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">inputRef</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> TempFancyInput</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> forwardRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">FancyInput</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Example</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ref</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addText</span><span style="color:#ABB2BF;">();</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">focus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">TempFancyInput</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">ref</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p><img src="https://ae01.alicdn.com/kf/H3eab0df2695d4654a1f9e9a9b1f20edem.png" alt=""></p><h2 id="uselayouteffect" tabindex="-1">useLayoutEffect <a class="header-anchor" href="#uselayouteffect" aria-label="Permalink to &quot;useLayoutEffect&quot;">​</a></h2><p>这个钩子函数与useEffect相同，但它会在所有的DOM变更之后<code>同步</code>调用effect。可以使用它来读取DOM布局并同步触发重渲染。在浏览器执行绘制之前，useLayoutEffect 内部的更新计划将被同步刷新。</p><p>官网建议还是尽可能的是使用标准的useEffec以避免阻塞视觉更新。</p><h2 id="usedebugvalue" tabindex="-1">useDebugValue <a class="header-anchor" href="#usedebugvalue" aria-label="Permalink to &quot;useDebugValue&quot;">​</a></h2><p>useDebugValue 可用于在 React 开发者工具中显示自定义 hook 的标签。</p><h2 id="自定义-hook-必须以-use-开头吗" tabindex="-1">自定义 Hook 必须以 use 开头吗？ <a class="header-anchor" href="#自定义-hook-必须以-use-开头吗" aria-label="Permalink to &quot;自定义 Hook 必须以 use 开头吗？&quot;">​</a></h2><p>必须如此。这个约定非常重要。不遵循的话，由于无法判断某个函数是否包含对其内部 Hook 的调用，React 将无法自动检查你的 Hook 是否违反了 Hook 的<a href="https://react.docschina.org/docs/hooks-rules.html" target="_blank" rel="noreferrer">规则</a>。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useWinResize</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">size</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setSize</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">     width</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientWidth</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">     height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span></span>
<span class="line"><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> resize</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCallback</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">     setSize</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">     width</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientWidth</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">     height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span></span>
<span class="line"><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;"> }, [])</span></span>
<span class="line"><span style="color:#61AFEF;"> useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">     window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;resize&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resize</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;resize&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resize</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }, []);</span></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Home</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">width</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">height</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useWinResize</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">         &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;width: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">width</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">         &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;height: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">height</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="面试题示例" tabindex="-1">面试题示例 <a class="header-anchor" href="#面试题示例" aria-label="Permalink to &quot;面试题示例&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useInterval</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">delay</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> id</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, [</span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Home</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">diff</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setDiff</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    useInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">diff</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt; count: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt; diff: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">diff</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">ms &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setDiff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">diff</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt; 加快50ms&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setDiff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">diff</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt; 减慢50ms&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Home</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>可是这段运行后很奇怪，页面从0到1后，就再也不变了，console.log(count)的输出表明代码并没有卡死，那么问题出在哪儿了？<br> React组件中的props和state是可以改变的，React会重渲染它们且「丢弃」任何关于上一次渲染的结果，它们之间不再有相关性。<br> useEffect()Hook也「丢弃」上一次渲染结果，它会清除上一次effect再建立下一个effect，下一个effect<code>锁住新的props和state</code>，这也是我们第一次尝试简单示例可以正确工作的原因。<br> 但setInterval不会「丢弃」。它会一直引用老的props和state直到你把它换掉——不重置时间你是无法做到的。这里就要用到useRef这个hook了，我们把callback存储到ref中，当callback更新时去更新ref.current的值：</p><p>两种方法:【一种是把count存起来，一种是把定时器里面的函数存起来】</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useInterval</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> saveCallback</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        saveCallback</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#ABB2BF;">    },[</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">delay</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> id</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">saveCallback</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, [</span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Home</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">diff</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setDiff</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    useInterval</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">diff</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt; count: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt; diff: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">diff</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">ms &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setDiff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">diff</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt; 加快50ms&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setDiff</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">diff</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt; 减慢50ms&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const useInterval = (callback, delay) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     const saveCallback = useRef();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         // 每次渲染后，保存新的回调到我们的 ref 里</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         saveCallback.current = callback;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         function tick() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//             saveCallback.current();  //每次执行最新的callback</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         if (delay !== null) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//             let id = setInterval(tick, delay);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//             return () =&gt; clearInterval(id);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }, [delay]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Home</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="hooks-faq" tabindex="-1"><code>Hooks FAQ</code> <a class="header-anchor" href="#hooks-faq" aria-label="Permalink to &quot;\`Hooks FAQ\`&quot;">​</a></h2><h3 id="useeffect在外面声明函数" tabindex="-1">useEffect在外面声明函数 <a class="header-anchor" href="#useeffect在外面声明函数" aria-label="Permalink to &quot;useEffect在外面声明函数&quot;">​</a></h3><p><strong>一般来说，不安全</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">someProp</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someProp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    doSomething</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, []); </span><span style="color:#7F848E;font-style:italic;">// 🔴 这样不安全（它调用的 \`doSomething\` 函数使用了 \`someProp\`）</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>要记住 effect 外部的函数使用了哪些 props 和 state 很难。这也是为什么 通常你会想要在 effect 内部 去声明它所需要的函数。 这样就能容易的看出那个 effect 依赖了组件作用域中的哪些值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">someProp</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#61AFEF;">  useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someProp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    doSomething</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, [</span><span style="color:#E06C75;">someProp</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// ✅ 安全（我们的 effect 仅用到了 \`someProp\`）</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>如果处于某些原因你无法把一个函数移动到effect内部，还有一些其他办法：</strong></p><ul><li><p>你可以尝试把那个函数移动到你的组件之外。那样一来，这个函数就肯定不会依赖任何 props,或state并且也不用出现在依赖列表中了。</p></li><li><p>如果你所调用的方法是一个纯计算，并且可以在渲染时调用，你可以 转而在 effect 之外调用它， 并让 effect 依赖于它的返回值。</p></li><li><p>万不得已的情况下，你可以把函数加入effect的依赖但 把它的定义包裹 进<code>useCallback Hook</code>。这就确保了它不随渲染而改变，除非 它自身 的依赖发生了改变</p></li></ul><h2 id="如何获取上一轮的-props-或-state" tabindex="-1">如何获取上一轮的 props 或 state <a class="header-anchor" href="#如何获取上一轮的-props-或-state" aria-label="Permalink to &quot;如何获取上一轮的 props 或 state&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> usePrevious</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> ref</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> prevCount</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> usePrevious</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //此时prevCount是上一次的effect的调用，内部已经改变,只是没有重新渲染</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">//先渲染后执行这个effect</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Now: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">, before: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">prevCount</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            点击加一</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="https://ae01.alicdn.com/kf/Hd6588fe44428462c90a0d7ee879c5948a.gif" alt=""></p><p>考虑到这是一个相对常见的使用场景，很可能在未来 React 会自带一个 usePrevious Hook。</p><h2 id="为什么我修改后在别的函数中获取的还是上一次的值" tabindex="-1">为什么我修改后在别的函数中获取的还是上一次的值 <a class="header-anchor" href="#为什么我修改后在别的函数中获取的还是上一次的值" aria-label="Permalink to &quot;为什么我修改后在别的函数中获取的还是上一次的值&quot;">​</a></h2><p>组件内部的任何函数，包括事件处理函数和 effect，都是从它<code>被创建</code>的那次渲染中拿到的</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> handleClick</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;函数内部&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">        handleClick</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#E5C07B;">     console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;函数外面&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;You clicked </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> times&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">add</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                点击我</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">handleClick</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                获取值</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="https://ae01.alicdn.com/kf/H70f6508f638a4c35bb9d095a2a5fde9cE.gif" alt=""></p><p>你发现<code>handleClick</code>每次获取的都是上一次的值，<strong>因为它获取的是创建它的那次值</strong>，此时可以用<code>useRef</code>曲线救国</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> ref</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> handleClick</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> add</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">        ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        handleClick</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;You clicked </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> times&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">add</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                点击我</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">handleClick</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                获取值</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="获取dom-节点" tabindex="-1">获取DOM 节点 <a class="header-anchor" href="#获取dom-节点" aria-label="Permalink to &quot;获取DOM 节点&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">width</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setWidth</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const inputEl = useRef(null)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //      setWidth(inputEl.current.getBoundingClientRect().width);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // });</span></span>
<span class="line"><span style="color:#ABB2BF;">          </span></span>
<span class="line highlighted"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ref</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCallback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">node</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">            setWidth</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBoundingClientRect</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }, []);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">ref</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Hello, world&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;当前屏幕宽度为 </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">px&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这里我们没有选择使用<code>useRef</code>，用的ref的回调函数，因为当ref是一个对象时它并不会把当前ref的值的变化通知到我们，最终还是要借助effect来实现「代码如上」</p><p><strong>抽离出来</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useClientRect</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">width</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setWidth</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ref</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCallback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">node</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">            setWidth</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBoundingClientRect</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">        }</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }, []);</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">]</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">width</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ref</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useClientRect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">ref</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Hello, world&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;当前屏幕宽度为 </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">px&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="usecallback示例何时更新" tabindex="-1">useCallback示例何时更新 <a class="header-anchor" href="#usecallback示例何时更新" aria-label="Permalink to &quot;useCallback示例何时更新&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> set1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 21</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//【2】</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;wk&quot;</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">};</span><span style="color:#7F848E;font-style:italic;">//【1】如果是对象的话，他会指向一个地址，除非改变地址他才会重新执行useCallback，否则他返回的是上次缓存的函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Form</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">text</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">updateText</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> textRef</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">        c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//【2】</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#E5C07B;">        textRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#E06C75;">        obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {...</span><span style="color:#E06C75;">textRef</span><span style="color:#ABB2BF;">}; </span><span style="color:#7F848E;font-style:italic;">//【1】</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> handleSubmit</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCallback</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> currentText</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> textRef</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">currentText</span><span style="color:#ABB2BF;">));</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }, [</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    set1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handleSubmit</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">set1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">text</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> updateText</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#C678DD;">            {</span><span style="color:#7F848E;font-style:italic;">/*&lt;div&gt;{textRef.current}&lt;/div&gt;*/</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">c</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">handleSubmit</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Form</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p><img src="https://ae01.alicdn.com/kf/H7410c03e8eab4361b28a18bfce16c4ba9.gif" alt=""></p><p>由此可见obj每次执行都要<code>浅克隆</code>，useCallback依赖于<code>obj</code>所以每次都会生成新的函数。</p><h2 id="usememo优化组件" tabindex="-1">useMemo优化组件 <a class="header-anchor" href="#usememo优化组件" aria-label="Permalink to &quot;useMemo优化组件&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Only re-rendered if \`a\` changes:</span></span>
<span class="line highlighted"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> child1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useMemo</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Child1</span><span style="color:#D19A66;font-style:italic;"> a</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">a</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;, [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Only re-rendered if \`b\` changes:</span></span>
<span class="line highlighted"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> child2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useMemo</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Child2</span><span style="color:#D19A66;font-style:italic;"> b</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">b</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;, [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;&gt;</span></span>
<span class="line highlighted"><span style="color:#C678DD;">      {</span><span style="color:#E06C75;">child1</span><span style="color:#C678DD;">}</span></span>
<span class="line highlighted"><span style="color:#C678DD;">      {</span><span style="color:#E06C75;">child2</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>注意这种方式在循环中是无效的</code></p><h2 id="如何向下传递回调" tabindex="-1">如何向下传递回调？ <a class="header-anchor" href="#如何向下传递回调" aria-label="Permalink to &quot;如何向下传递回调？&quot;">​</a></h2><p>我们已经发现大部分人并不喜欢在组件树的每一层手动传递回调。尽管这种写法更明确，但这给人感觉像错综复杂的管道工程一样麻烦。</p><p>在<code>大型</code>的组件树中建议使用 context 用 useReducer 往下传一个 <code>dispatch</code> 函数：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> TodosDispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createContext</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> TodosApp</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 提示：\`dispatch\` 不会在重新渲染之间变化</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">todos</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todosReducer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">TodosDispatch.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">dispatch</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">DeepTree</span><span style="color:#D19A66;font-style:italic;"> todos</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">todos</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">TodosDispatch.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> DeepTree</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 如果我们想要执行一个 action，我们可以从 context 中获取 dispatch。</span></span>
<span class="line highlighted"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">TodosDispatch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> handleClick</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line highlighted"><span style="color:#61AFEF;">    dispatch</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;add&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">handleClick</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Add todo&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="自定义hooks" tabindex="-1">自定义Hooks <a class="header-anchor" href="#自定义hooks" aria-label="Permalink to &quot;自定义Hooks&quot;">​</a></h2><h3 id="usefetch" tabindex="-1">useFetch <a class="header-anchor" href="#usefetch" aria-label="Permalink to &quot;useFetch&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useDataApi</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">initialUrl</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">initialData</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setData</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">initialData</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setUrl</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">initialUrl</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">isLoading</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setIsLoading</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">isError</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setIsError</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#61AFEF;"> fetchData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            setIsError</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">            setIsLoading</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // const result = await axios.get(url);</span></span>
<span class="line"><span style="color:#61AFEF;">                setData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">                setIsError</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">                setData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">initialData</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#61AFEF;">            setIsLoading</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#61AFEF;">    fetchData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, [</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> [{</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isLoading</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isError</span><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;">setUrl</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="hooks原理分析" tabindex="-1">Hooks原理分析 <a class="header-anchor" href="#hooks原理分析" aria-label="Permalink to &quot;Hooks原理分析&quot;">​</a></h2><h3 id="简单实现一个usestate" tabindex="-1">简单实现一个useState <a class="header-anchor" href="#简单实现一个usestate" aria-label="Permalink to &quot;简单实现一个useState&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">initialValue</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">    _state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _state</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> initialValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newState</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">        _state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        render</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">_state</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">setState</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>setState第一个参数可以使函数，当为函数的时候，参数为当前的_state</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">initialValue</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">    _state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _state</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> initialValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fun</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">        _state</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fun</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_state</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> _state</span></span>
<span class="line"><span style="color:#61AFEF;">        render</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">_state</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">setState</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDOM</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Button</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;antd&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#98C379;"> &quot;./styles.css&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> _state</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 把 state 存储在外面</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">initialValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">  _state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> _state</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> initialValue</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 如果没有 _state，说明是第一次执行，把 initialValue 复制给它</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    _state</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    render</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">_state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setState</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">Button</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">        onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">          setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        点击1</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">Button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> rootElement</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> /&gt;, </span><span style="color:#E06C75;">rootElement</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="简单实现一个useeffect" tabindex="-1">简单实现一个useEffect <a class="header-anchor" href="#简单实现一个useeffect" aria-label="Permalink to &quot;简单实现一个useEffect&quot;">​</a></h2><p>dependencies:依赖关系</p><p>Effect有几个特点</p><ul><li>有两个参数 callback 和 dependencies 数组</li><li>如果 dependencies 不存在，那么 callback 每次 render 都会执行</li><li>如果 dependencies 存在，只有当它发生了变化， callback 才会执行</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> _deps</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// _deps 记录 useEffect 上一次的 依赖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useEffect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">depArray</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> hasNoDeps</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">depArray</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 如果 dependencies 不存在</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> hasChangedDeps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_deps</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">depArray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">every</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> el</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> _deps</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]) </span><span style="color:#7F848E;font-style:italic;">// 两次的 dependencies 是否完全相等</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /* 如果 dependencies 不存在，或者 dependencies 有变化*/</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hasNoDeps</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> hasChangedDeps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    callback</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    _deps</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> depArray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>到现在的话，在页面能正常使用了，但是每次使用只能用一次，因为你声明多次的话，它是公用的一个变量，不能重复使用。</p><p>们可以使用数组，来解决 Hooks 的复用问题</p><p><strong>代码关键在于：</strong></p><p>初次渲染的时候，按照 <code>useState，useEffect</code> 的顺序，把 <code>state，deps</code> 等按顺序塞到 <code>memoizedState</code> 数组中。 更新的时候，按照顺序，从 <code>memoizedState</code> 中把上次记录的值拿出来。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> memoizedState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// hooks 存放在这个数组</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> cursor</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 当前 memoizedState 下标</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">initialValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">  memoizedState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cursor</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> memoizedState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cursor</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> initialValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> currentCursor</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cursor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    memoizedState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">currentCursor</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    render</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">memoizedState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cursor</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">setState</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 返回当前 state，并把 cursor 加 1</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useEffect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">depArray</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> hasNoDeps</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">depArray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> deps</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> memoizedState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cursor</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> hasChangedDeps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">deps</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">depArray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">every</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> el</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> deps</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hasNoDeps</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> hasChangedDeps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    callback</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    memoizedState</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cursor</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> depArray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  cursor</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>到这里基本的业务已经满足了，但是有几个需要注意的点：</p><ul><li>memoizedState 数组是按 hook定义的顺序来放置数据的，如果hooks的顺序变化，memoizedState 并不会感知到所以不要再循环或者判断语句中调用。</li><li>自定义的hooks也是共享同一个 memoizedState，共享同一个顺序。</li></ul><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="https://react.docschina.org/docs/hooks-reference.html" target="_blank" rel="noreferrer">hooks</a></p><p><a href="https://www.robinwieruch.de/react-hooks" target="_blank" rel="noreferrer">react-hooks-fetch</a></p><p><a href="https://react.docschina.org/docs/hooks-faq.html" target="_blank" rel="noreferrer">hooks-faq</a></p><p><a href="https://github.com/facebook/react/blob/master/packages/react/src/ReactHooks.js" target="_blank" rel="noreferrer">ReactHooks源码</a></p>`,135),o=[e];function t(c,r,B,y,i,F){return a(),n("div",null,o)}const A=s(p,[["render",t]]);export{u as __pageData,A as default};
