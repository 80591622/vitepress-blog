import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const u=JSON.parse('{"title":"React-SSR","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/react/ssr.md","filePath":"workspace/Frame/react/ssr.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/react/ssr.md"},e=l(`<h1 id="react-ssr" tabindex="-1">React-SSR <a class="header-anchor" href="#react-ssr" aria-label="Permalink to &quot;React-SSR&quot;">​</a></h1><p>先附上github地址<a href="https://github.com/wkvictory/react-ssr,%E6%96%B9%E4%BE%BF%E5%A4%A7%E5%AE%B6%E6%9B%B4%E5%AE%B9%E6%98%93%E7%90%86%E8%A7%A3%EF%BC%8C%E4%B8%8D%E7%84%B6%E5%90%8E%E9%9D%A2%E5%BE%88%E5%A4%9A%E5%9C%B0%E6%96%B9%E4%BC%9A%E4%B8%80%E5%A4%B4%E9%9B%BE%E6%B0%B4%E3%80%82" target="_blank" rel="noreferrer">https://github.com/wkvictory/react-ssr,方便大家更容易理解，不然后面很多地方会一头雾水。</a></p><p>欢迎大家点star,提issue，一起进步！😄</p><h2 id="客户端渲染与服务端渲染" tabindex="-1">客户端渲染与服务端渲染 <a class="header-anchor" href="#客户端渲染与服务端渲染" aria-label="Permalink to &quot;客户端渲染与服务端渲染&quot;">​</a></h2><p><strong>CSR:</strong></p><p>页面渲染是JS负责进行的</p><p>浏览器发送请求–&gt;服务器返回HTML–&gt;浏览器发送bundle.js请求–&gt;服务器返回bundle.js–&gt;浏览器执行bundle.js中的react代码完成渲染</p><p><strong>SSR:</strong></p><p>服务器端直接返回HTML让浏览器直接渲染</p><p>浏览器发送请求–&gt;服务器运行React代码生成页面–&gt;服务器返回页面</p><p><strong>传统CSR的弊端:</strong></p><ol><li><p>由于页面显示过程要进行JS文件拉取和React代码执行，在这个渲染过程中至少涉及到两个 HTTP请求周期（html+js），所以会有一定的耗时，首屏加载时间会比较慢。</p></li><li><p>对于SEO(Search Engine Optimazition,即搜索引擎优化)，完全无能为力，因为搜索引擎爬虫只认识html结构的内容，而不能识别JS代码内容。</p></li></ol><p><strong>SSR的弊端:</strong></p><p>ssr的出现，就是为了解决这些传统CSR的弊端</p><p>在 React 中使用 ssr 技术，我们让 React 代码在服务器端先执行一次，使得用户下载的 HTML 已经包含了所有的页面展示内容，这样，页面展示的过程只需要经历一个 HTTP 请求周期，TTFP（Time To First Page） 时间得到一倍以上的缩减</p><p>但是使用 ssr 这种技术，将使原本简单的 React 项目变得非常复杂</p><ol><li><p>相对于仅仅需要提供静态文件的服务器，ssr中使用的渲染程序自然会占用更多的CPU和内存资源</p></li><li><p>在服务器生成的页面所以，一些常用的浏览器API可能无法正常使用，比如window、docment和alert等，如果使用的话需要对运行的环境加以判断</p></li><li><p>开发调试会有一些麻烦，因为涉及了浏览器及服务器，对于SPA的一些组件的生命周期的管理会变得复杂</p></li><li><p>可能会由于某些因素导致服务器端渲染的结果与浏览器端的结果不一致，项目的可维护性会降低，代码问题的追溯也会变得困难</p></li></ol><p>所以，使用 ssr 在解决问题的同时，也会带来非常多的副作用，有的时候，这些副作用的伤害比起 ssr 技术带来的优势要大的多。一般建议ssr，除非你的项目特别依赖搜索引擎流量，或者对首屏时间有特殊的要求，否则不建议使用 ssr,如果只对seo有要求可使用 <a href="https://github.com/prerender/prerender" target="_blank" rel="noreferrer">prerender预渲染</a>。</p><h2 id="ssr的实现本质" tabindex="-1">SSR的实现本质 <a class="header-anchor" href="#ssr的实现本质" aria-label="Permalink to &quot;SSR的实现本质&quot;">​</a></h2><p>这里介绍的是ssr，是基于React 的SPA项目，不是像 thinkphp、jsp、nodeJs+ejs 这种纯后端直出渲染方式，所以这种大多数只是针对首屏的ssr,因为浏览器的路由跳转方式是用的H5的<code>history API</code>的<code>window.history.pushState()</code> ，使得我们即可以修改 <code>url</code> 也可以不刷新页面，所以是不会走服务端的【可以通过预加载获取需要的数据】。</p><p><strong>ssr 之所以能够实现，本质上是因为虚拟 DOM 的存在</strong></p><p>ssr 的工程中，React 代码会在客户端和服务器端各执行一次,因为代码在 Node 环境下是没有DOM这个概念的，所以在React 框架中引入了一个概念叫做虚拟 DOM，React 在做页面操作时，实际上不是直接操作 DOM，而是操作虚拟 DOM，也就是操作普通的 JavaScript 对象，这就使得 ssr 成为了可能。在服务器，我可以操作 JavaScript 对象，判断环境是服务器环境，我们把虚拟 DOM 映射成字符串输出；在客户端，我也可以操作 JavaScript 对象，判断环境是客户端环境，我就直接将虚拟 DOM 映射成真实 DOM，完成页面挂载。</p><h2 id="方案筛选" tabindex="-1">方案筛选 <a class="header-anchor" href="#方案筛选" aria-label="Permalink to &quot;方案筛选&quot;">​</a></h2><ul><li><a href="./[https://nextjs.frontendx.cn/docs/#安装](https://nextjs.frontendx.cn/docs/#安装)">next.js</a>/<a href="https://www.nuxtjs.cn/guide/installation" target="_blank" rel="noreferrer">nuxt.js</a> 成本低,安心的写页面就行了，无需过多关心服务端路由（多页面应用，新框架）</li><li><a href="https://github.com/wkvictory/prerender" target="_blank" rel="noreferrer">prerender </a>实现spa项目的服务端预渲染</li><li>使用谷歌 <a href="https://github.com/wkvictory/rendertron" target="_blank" rel="noreferrer">rendertron</a> 实现spa项目的服务端渲染 【据说会被判作弊的，降权处理】</li><li>秉承学习的态度了解下基本原理，选择了自己去搭，（中间断了一段时间，现在又重新拾起来），之前看到有人用 react + redux + Express 搭ssr的文章，所以基于对dva和koa的熟悉和特别喜好，就直接选择了dva-core + koa 做状态管理搭建。</li></ul><h2 id="koa实现基础版本的ssr" tabindex="-1">Koa实现基础版本的SSR <a class="header-anchor" href="#koa实现基础版本的ssr" aria-label="Permalink to &quot;Koa实现基础版本的SSR&quot;">​</a></h2><h3 id="不使用koa-router" tabindex="-1">不使用koa-router <a class="header-anchor" href="#不使用koa-router" aria-label="Permalink to &quot;不使用koa-router&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;/&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#98C379;">      \`</span></span>
<span class="line"><span style="color:#98C379;">     &lt;html&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;">         &lt;title&gt;禾口和ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;/head&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;body&gt;</span></span>
<span class="line"><span style="color:#98C379;">         &lt;h1&gt;hello&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#98C379;">         &lt;h2&gt;world&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;">     &lt;/html&gt;</span></span>
<span class="line"><span style="color:#98C379;">     \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;9999&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">port</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">address</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`http://localhost:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">port</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="使用koa-router" tabindex="-1">使用koa-router <a class="header-anchor" href="#使用koa-router" aria-label="Permalink to &quot;使用koa-router&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;koa-router&quot;</span><span style="color:#ABB2BF;">)() </span><span style="color:#7F848E;font-style:italic;">// 这里也可以使用构造函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#98C379;">    \`</span></span>
<span class="line"><span style="color:#98C379;">   &lt;html&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;">         &lt;title&gt;禾口和ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;/head&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;body&gt;</span></span>
<span class="line"><span style="color:#98C379;">         &lt;h1&gt;hello&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#98C379;">         &lt;h2&gt;world&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#98C379;">       &lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;">     &lt;/html&gt;</span></span>
<span class="line"><span style="color:#98C379;">    \`</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">routes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">//自动设置响应头ctx.status完善response响应头</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;9999&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">port</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">address</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`http://localhost:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">port</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>这样一个简单的服务端渲染就搞定了，服务器端直接返回HTML让浏览器直接渲染，而且网页源代码中是有这些dom信息的对seo非常友好，我们react、vue这些都是通过webpack引入了js,所有的功能页面展示统统由js完成。</p><h2 id="实现react组件的服务端渲染" tabindex="-1">实现React组件的服务端渲染 <a class="header-anchor" href="#实现react组件的服务端渲染" aria-label="Permalink to &quot;实现React组件的服务端渲染&quot;">​</a></h2><p>到这一步已经不能直接用node启动服务了，因为没有<code>babel</code>， React不会转化成<code>createElement</code>的形式，而且使用node也不能直接使用import导入方式。</p><p>随便编写一个React的组件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/pages/home</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Home</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Home组件&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Home</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后我们把当前组件，使用服务员渲染出来，看下面配置：</p><h3 id="webpack-base" tabindex="-1">Webpack base <a class="header-anchor" href="#webpack-base" aria-label="Permalink to &quot;Webpack base&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// config/webpack.base.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  module</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    rules</span><span style="color:#ABB2BF;">: [{</span></span>
<span class="line"><span style="color:#E06C75;">      test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">jsx</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;babel-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      exclude</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /node_modules/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        presets</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;@babel/preset-react&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;@babel/preset-env&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">          targets</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            browsers</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;last 2 versions&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }]]</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="服务器端-webpack-配置" tabindex="-1">服务器端 Webpack 配置 <a class="header-anchor" href="#服务器端-webpack-配置" aria-label="Permalink to &quot;服务器端 Webpack 配置&quot;">​</a></h3><p>服务端运行的代码如果需要依赖 Node 核心模块或者第三方模块，<code>就不再需要把客户端的一些模块代码打包到最终代码中了</code>。因为环境已经安装这些依赖，可以直接引用。这样一来，就需要我们在 webpack 中配置：<code>target：node</code>，并借助 webpack-node-externals 插件，解决第三方依赖打包的问题。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// config/webpack.server.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nodeExternals</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;webpack-node-externals&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> merge</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;webpack-merge&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./webpack.base&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> serverConfig</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;node&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 编译出能让node识别的代码  https://webpack.docschina.org/concepts/targets/</span></span>
<span class="line"><span style="color:#E06C75;">  mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;development&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里的mode要特别注意</span></span>
<span class="line"><span style="color:#E06C75;">  entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./src/server/index.js&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 对应服务端的代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // https://webpack.docschina.org/configuration/externals/</span></span>
<span class="line"><span style="color:#E06C75;">  externals</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">nodeExternals</span><span style="color:#ABB2BF;">()], </span><span style="color:#7F848E;font-style:italic;">// 为了忽略node_modules文件夹中的所有模块</span></span>
<span class="line"><span style="color:#E06C75;">  output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bundle.js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../bundle&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> merge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">serverConfig</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>target: &#39;node&#39; 和 target: &#39;web&#39; 的大致区别</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// target: &#39;node&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ids</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">modules</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// target: &#39;web&#39; </span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;webpackJsonp&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;webpackJsonp&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> []).</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">],{</span></span>
<span class="line"><span style="color:#ABB2BF;">}])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// server/index.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Koa</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;koa&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Router</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;koa-router&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 必须引入</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderToString</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-dom/server&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// react-dom提供的方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Home</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;../src/pages/home&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderToString</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">Home</span><span style="color:#ABB2BF;">/&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#98C379;">    \`</span></span>
<span class="line"><span style="color:#98C379;">    &lt;html&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;title&gt;禾口和ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;div id=&quot;root&quot;&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">content</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#98C379;">    \`</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">routes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;9999&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">port</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">address</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`http://localhost:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">port</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>以上使用了<strong>renderToString</strong>, 我们都知道react-dom提供了四种服务端渲染函数,如下:</p><ol><li><strong>renderToString</strong>：将 React Component 转化为 HTML 字符串，生成的 HTML 的 DOM 会带有额外属性：各个 DOM 会有data-react-id属性，第一个 DOM 会有data-reactroot属性。</li><li><strong>renderToStaticMarkup</strong>：将 React Component 转化为 HTML 字符串，但是生成 HTML 的 DOM 不会有额外属性，从而节省 HTML 字符串的大小。</li><li><strong>renderToNodeStream:</strong> 以流的形式输出html, 不用像renderToString生成整个html才发送给客户端。相对于renderToString能更快的响应客户端，提升页面渲染速度。</li><li><strong>renderToStaticNodeStream</strong>：和 renderToNodeStream一样，也是输出流，但是html中不带data-reactroot等属性。</li></ol><p><strong>对于服务端渲染而言</strong></p><ul><li><strong>renderToString</strong>方法渲染的节点会带有data-react-id属性, 在前端 react 加载完成后, 前端 react 会认识之前服务端渲染的内容, 不会重新渲染 DOM 节点, 前端 react 会接管页面, 执行 <code>componentDidMout</code> 绑定浏览器事件等 这些在服务端没完成也不可能执行任务。</li><li><strong>renderToStaticMarkup</strong> 渲染出的是不带<code>data-react-id</code>的纯 html 在前端 react 加载完成后, 之前服务端渲染的页面会抹掉之前服务端的重新渲染(可能页面会闪一下). 换句话说 <strong>前端react就根本就不认识之前服务端渲染的内容</strong>, render 方法会使用 innerHTML 的方法重写 #react-target 里的内容</li></ul><p>在package添加启动配置</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// package.json</span></span>
<span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm-run-all --parallel dev:build:server dev:start&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;dev:build:server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack --config config/webpack.server.js --watch&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;dev:start&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;nodemon ./bundle/bundle.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>执行 yarn dev ,打开 <a href="./.html">http://localhost:9999/ </a>页面直接在浏览上显示， 到此，就初步实现了一个React组件是服务端渲染,加入你在组件Home里面添加一些方法或者调取接口，你会发现这些都没有执行，所以我们还需要接下来进一步完善。</p><h2 id="同构" tabindex="-1">同构 <a class="header-anchor" href="#同构" aria-label="Permalink to &quot;同构&quot;">​</a></h2><p>要解决上面上面的问题，就需要同构了，所谓同构，通俗的讲，就是一套React代码在服务器上运行一遍，到浏览器渲染时在运行一遍，服务端渲染完成页面结构，浏览器端渲染完成事件绑定接口调取（重复加载的js或者css客户端协调阶段时候会进行比对，如果一样则不渲染了）。</p><h3 id="客户端针对路由打包js" tabindex="-1">客户端针对路由打包JS <a class="header-anchor" href="#客户端针对路由打包js" aria-label="Permalink to &quot;客户端针对路由打包JS&quot;">​</a></h3><p>把打包后的js,注入到html中，这样到浏览器就会再次请求，就可以完成事件绑定等行为操作。</p><p>我们要用到react-dom的<code>hydrate</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// client/index.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDom</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">BrowserRouter</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> Router</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Switch</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-router-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderRoutes</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-router-config&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Loadable</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-loadable&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 这里是我的一个路由拆分，你们可以不用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> routes</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;../router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> App</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">          {</span><span style="color:#61AFEF;">renderRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Loadable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preloadReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hydrate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">/&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>hydrate() 描述的是 ReactDOM 复用 ReactDOMServer 服务端渲染的内容时尽可能保留结构，并补充事件绑定等 Client 特有内容的过程</p><p>说白了<code>render()</code> 标签上没有唯一的属性，但是要尽可能复用 ssr 的 HTML 结构,所以就出现了<code>hydrate()</code>,但是目前两者都是可以用的，17版本<code>render()</code>就不在支持<code>ssr</code></p><p><a href="https://www.zhihu.com/question/66068748" target="_blank" rel="noreferrer">知乎对 ReactDom.hydrate 的解释</a></p><p>然后配置客户端的webpack将其编译打包成js，在服务端html里面引入。</p><h3 id="客户端-webpack-配置" tabindex="-1">客户端 Webpack 配置 <a class="header-anchor" href="#客户端-webpack-配置" aria-label="Permalink to &quot;客户端 Webpack 配置&quot;">​</a></h3><p>客户端和服务端打包后的输出目录</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// config/outputPath </span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  OUTPUTCLIENT</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;static&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  OUTPUTSERVER</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bundle&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// config/webpack.client.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> merge</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;webpack-merge&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./webpack.base&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">OUTPUTCLIENT</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./outputPath&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> outputPath</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`../</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">OUTPUTCLIENT</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> clientConfig</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;development&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  entry</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../client/index.js&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">  output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;index.[chunkhash:8].js&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里我用的hash，目的是防止缓存</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">outputPath</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  module</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    rules</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#E06C75;">        test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">css</span><span style="color:#D19A66;">?</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        use</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;style-loader&#39;</span><span style="color:#ABB2BF;">, {</span><span style="color:#7F848E;font-style:italic;">// 这里建议使用style-loader，少量的css直接采用客户端渲染了</span></span>
<span class="line"><span style="color:#E06C75;">          loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            modules</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这要跟服务端保持一致，不然head里面有样式，客户端没有对应的class</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }]</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#E06C75;">        test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">(png</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">jpeg</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">jpg</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">gif</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">svg)</span><span style="color:#D19A66;">?</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;url-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">          limit</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">          outputPath</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">outputPath</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 输入路径</span></span>
<span class="line"><span style="color:#E06C75;">          publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> merge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">clientConfig</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>然后在上面的<code>package.json</code>,里面添加<code> &quot;dev:build:client&quot;: &quot;webpack --config webpack.client.js --watch&quot;</code>，就能对浏览器用到的一些js完成打包。</p><h3 id="服务端的路由逻辑" tabindex="-1">服务端的路由逻辑 <a class="header-anchor" href="#服务端的路由逻辑" aria-label="Permalink to &quot;服务端的路由逻辑&quot;">​</a></h3><p>服务器端路由代码相对要复杂一点，需要你把 <code>location</code>（当前请求路径）传递给 <code>StaticRouter</code> 组件，这样 <code>StaticRouter</code> 才能根据路径分析出当前所需要的组件是谁。（PS：<code>StaticRouter</code> 是 <code>React-Router</code>针对服务器端渲染专门提供的一个路由组件。）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// server/index.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Koa</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;koa&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Router</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;koa-router&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderToString</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-dom/server&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">StaticRouter</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-router-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Loadable</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-loadable&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> routes</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@/router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderRoutes</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">matchRoutes</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-router-config&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderHTML</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./tem&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;/:route?&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">|</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">], (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderToString</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重点是这</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#D19A66;font-style:italic;"> location</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        {</span><span style="color:#61AFEF;">renderRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">, {})</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这里要注意下中间件的先后顺序</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa-static&#39;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;/static&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">routes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Loadable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preloadAll</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;9999&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E5C07B;">port</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">address</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#56B6C2;">\\x1B</span><span style="color:#98C379;">[33m</span><span style="color:#56B6C2;">\\x1B</span><span style="color:#98C379;">[4mhttp://localhost:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">port</span><span style="color:#C678DD;">}</span><span style="color:#56B6C2;">\\x1B</span><span style="color:#98C379;">[0m\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// server/tem.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> glob</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;glob&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> project</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> glob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;/static/index.*.js&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> project</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> renderHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">content</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">  &lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;html lang=&quot;zh&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;meta charset=&quot;utf-8&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot; /&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;title&gt;禾口和ssr&lt;/title&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;/head&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;body&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;div id=&quot;root&quot;&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">content</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;script src=/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&gt;&lt;/script&gt; // 这个 &#39;/&#39; 一定要添加，坑了好久</span></span>
<span class="line"><span style="color:#98C379;">      &lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;">  &lt;/html&gt;</span></span>
<span class="line"><span style="color:#98C379;">\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="css样式问题处理" tabindex="-1">CSS样式问题处理 <a class="header-anchor" href="#css样式问题处理" aria-label="Permalink to &quot;CSS样式问题处理&quot;">​</a></h2><p>正常的服务端渲染只是返回了 HTML 字符串，样式需要浏览器加载完 CSS 后才会加上，这个样式添加的过程就<code>会造成页面的闪动</code>，所以在服务端里面直接添加需要引用的CSS。</p><p>我们不能再使用 style-loader 了，因为这个 webpack loader 会在编译时将样式模块载入到 HTML header 中。但是在服务端渲染环境下，没有 window 对象，style-loader 进而会报错。一般我们换用 <code>isomorphic-style-loader</code> ,同时 <code>isomorphic-style-loader </code>也会解决页面样式闪动的问题，它的原理也不难理解：<code>isomorphic-style-loader </code>利用 context API，在渲染页面组件时获取所有 React 组件的样式信息，在服务器端输出 html 字符串的同时，也将样式插入到 html 字符串当中，将结果一同传送到客户端。</p><p>因为我们已经开启了cssmodules，所以直接导入到head里面是不会存在样式冲突的问题。<code>isomorphic-style-loader </code>已经给我们提供了一些导入css 的 高阶函数 <code>withsSyles</code></p><p>和 hooks <code>useStyles</code>，用的时候比较省事。</p><p><strong>看下代码配置</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// config/webpack.client.js</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  test</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">less</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    use</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">      &#39;style-loader&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 也可以跟服务端的一样，就是麻烦点，每次使用css,都需要额外的手续</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#E06C75;">        loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">          modules</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#98C379;">      &#39;less-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// config/webpack.server.js</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  test</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">less</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    use</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">      &#39;isomorphic-style-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      {</span></span>
<span class="line"><span style="color:#E06C75;">        loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">          modules</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#98C379;">      &#39;less-loader&#39;</span><span style="color:#7F848E;font-style:italic;">  // 必须配置 不然会当成css,视觉可能看不出来，因为客户端配置了less</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>服务端首页</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// server/index.js </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  ...</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> css</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 这个必须在路由函数里面，在外面的话，就会累加出现之前的css</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> insertCss</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">styles</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> styles</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">style</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> css</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_getCss</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderToString</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#D19A66;font-style:italic;"> location</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">insertCss</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="color:#C678DD;">           {</span><span style="color:#61AFEF;">renderRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   &lt;/</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ....</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>客户端也需要配置</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// client/index.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDom</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">BrowserRouter</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> Router</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-router-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderRoutes</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-router-config&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Loadable</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-loadable&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> StyleContext</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;isomorphic-style-loader/StyleContext&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> routes</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;../router&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> insertCss</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">styles</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> removeCss</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> styles</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">style</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_insertCss</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> style</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_insertCss</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> removeCss</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dispose</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> dispose</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> dispose</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> App</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        {</span><span style="color:#61AFEF;">renderRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Loadable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preloadReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hydrate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">insertCss</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>这样服务端和客户端都可以直接使用<code>isomorphic-style-loader</code>的一些API, <strong>有些<code>不重要</code>的页面，或者不重要的css可以直接采用客户端渲染</strong>,就不需要引入高阶函数或者useStyles。</p><p>在页面内具体使用</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 函数式组件</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> useStyles</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;isomorphic-style-loader/useStyles&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> styles</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./index.css&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Index</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  useStyles</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">styles</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 类组件使用</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> withStyles</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;isomorphic-style-loader/withStyles&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> styles</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./index.css&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">withStyles</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">styles</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 需要在base里面额外配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Index</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用客户端渲染</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> styles</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./index.css&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> Index</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里也可以使用useStyles 部分使用客户端渲染</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">styles</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;title-center&#39;</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;message&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#98C379;">&#39;title-center&#39;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;message&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>然后打开网页的源代码就可以看见head里面已经有我们需要的css了。</p><p><img src="https://user-gold-cdn.xitu.io/2020/7/23/1737b44ea25a4b63?w=1251&amp;h=881&amp;f=png&amp;s=177846" alt="image-20200702185101916"></p><h2 id="ssr中异步数据的获取-dva的使用" tabindex="-1">SSR中异步数据的获取 + Dva的使用 <a class="header-anchor" href="#ssr中异步数据的获取-dva的使用" aria-label="Permalink to &quot;SSR中异步数据的获取 + Dva的使用&quot;">​</a></h2><h3 id="dva的使用" tabindex="-1">Dva的使用 <a class="header-anchor" href="#dva的使用" aria-label="Permalink to &quot;Dva的使用&quot;">​</a></h3><p>之前项目一直用的dva，这里直接使用的dva-core代替的redux，不会配置的自行查下文档。</p><p>创建 <code>Store</code>：这一部分有坑，要注意避免，大家知道，在客户端渲染中，用户的浏览器中永远只存在一个 <code>Store</code>，所以代码上你可以这么写</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dvaApp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  initialState</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">  models</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">models</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> dvaApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然而在服务器端，这么写就有问题了，因为服务器端的 <code>Store</code> 是所有用户都要用的，如果像上面这样构建 <code>Store</code>，<code>Store</code> 变成了一个单例，所有用户共享 <code>Store</code>，显然就有问题了。所以在服务器端渲染中，<code>Store</code> 的创建应该i像下面这样，返回一个函数，每个用户访问的时候，这个函数重新执行，为每个用户提供一个独立的 <code>Store</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dvaApp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  initialState</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">  models</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">models</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;">  () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> dvaApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>别慌，你如果这样的做的话，redux的数据还是所有客户同步公用，因为你的model是一个对象，是静态导入，这个时候你应该把model写成函数的形式，这样后台每次都能获取到最新的数据</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> menuTree</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    namespace</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;menuTree&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      routes</span><span style="color:#ABB2BF;">: []</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    effects</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#C678DD;">      *</span><span style="color:#61AFEF;"> reset</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;font-style:italic;">call</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">put</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">select</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">update</span><span style="color:#ABB2BF;">}) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         // .........</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    reducers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">      save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">}) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> {...</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> menuTree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>换成函数的导出形式就OK了，然后在createApp的方法，原有的<code>models.forEach(model =&gt; app.model(model);</code>转换成 <code>models.forEach(model =&gt; app.model(model()));</code> 就OK了。</p><h3 id="数据获取" tabindex="-1">数据获取 <a class="header-anchor" href="#数据获取" aria-label="Permalink to &quot;数据获取&quot;">​</a></h3><p>数据获取的解决方案是配置路由 route-router-config，结合 <code>matchRoutes</code>，找到页面上相关组件所需的请求接口的方法并执行请求，这就要求开发者通过路由配置信息，显式地告知服务端请求内容。</p><p><strong>客户端路由改造</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// router/index.js</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/login&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  exact</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  component</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Login</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  loadData</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Login</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loadData</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这里就是请求数据的方法</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;登录页&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 客户端组件使用</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Index</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Index</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">store</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;menuTree/reset&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我试试这个到底加载不&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Index</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>服务端代码</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// server/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取请求的方法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> promises</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">matchedRoutes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loadData</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> promise</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 这里用了.then 所以组件里面必须使用async或者promise</span></span>
<span class="line"><span style="color:#E5C07B;">      item</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#E5C07B;">    promises</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这里要注意的一个问题，你的方法可能是异步的，会出现 ctx.body 没有执行的问题，所以要把这个中间件设置为异步的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 为了确保组件的loadData的方法执行完毕</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promises</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> css</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 防止钩子函数执行两次</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#61AFEF;"> insertCss</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">styles</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> styles</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">style</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> css</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_getCss</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> helmet</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Helmet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">renderStatic</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderToString</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">Provider</span><span style="color:#D19A66;font-style:italic;"> store</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">store</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#D19A66;font-style:italic;"> location</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">insertCss</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">            {</span><span style="color:#61AFEF;">renderRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;/</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     )</span></span>
<span class="line"><span style="color:#E5C07B;">     ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">helmet</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="注水和脱水" tabindex="-1">注水和脱水 <a class="header-anchor" href="#注水和脱水" aria-label="Permalink to &quot;注水和脱水&quot;">​</a></h3><p><strong>涉及到数据的预获取，也是服务端渲染的真正意义。</strong></p><p>上面的代码正常运行是没问题了，但是发现客户端和服务端的store，存在不同步的问题。</p><p>其实也很好理解。当服务端拿到store并获取数据后，客户端的js代码又执行一遍，在客户端代码执行的时候又创建了一个空的store，两个store的数据不能同步。</p><p>所以 在服务器端渲染时，首先服务端请求接口拿到数据，并处理准备好数据状态（如果使用 Redux，就是进行 store 的更新），为了减少客户端的请求，我们需要保留住这个状态。一般做法是在服务器端返回 HTML 字符串的时候，将数据 JSON.stringify 一并返回，这个过程，叫做注水；在客户端，就不再需要进行数据的请求了，可以直接使用服务端下发下来的数据，这个过程叫脱水。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   window.context = </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 这里是注水</span></span>
<span class="line"><span style="color:#E06C75;">   state</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">serialize</span><span style="color:#ABB2BF;">(store.getState())}  </span><span style="color:#7F848E;font-style:italic;">// serialize 是为了防止xss的攻击</span></span>
<span class="line"><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">create</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;dva-core&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">opt</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // .....</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 服务端的redux</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dvaApp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  initialState</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">  models</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">models</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> dvaApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 客户端的redux</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getClientStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 需要先拿到服务端的数据, 脱水</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> initialState</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> dvaClientApp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createApp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    initialState</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    models</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">models</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> dvaClientApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStore</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="配置代理" tabindex="-1">配置代理 <a class="header-anchor" href="#配置代理" aria-label="Permalink to &quot;配置代理&quot;">​</a></h3><p>服务端是没有域的存在，所以不会存在跨域的问题，但是在客户端调取接口还存在跨域的问题，所以还需要配置下代理，代码如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> httpProxy</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;http-proxy-middleware&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> k2c</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;koa2-connect&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转发代理</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/api&#39;</span><span style="color:#ABB2BF;">)) { </span><span style="color:#7F848E;font-style:italic;">//匹配有api字段的请求url</span></span>
<span class="line"><span style="color:#E5C07B;">    ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">respond</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#7F848E;font-style:italic;"> // 绕过koa内置对象response ，写入原始res对象，而不是koa处理过的response</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#61AFEF;"> k2c</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">httpProxy</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;https://api.xxxxx.xxx&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        changeOrigin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        secure</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        pathRewrite</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">          &#39;^/api&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ))(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>还可以安装koa的代理模块 <code>koa2-proxy-middleware</code>,用法如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa2-proxy-middleware&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  targets</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">    &#39;/user&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // this is option of http-proxy-middleware</span></span>
<span class="line"><span style="color:#E06C75;">      target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://localhost:3001&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// target host</span></span>
<span class="line"><span style="color:#E06C75;">      changeOrigin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// needed for virtual hosted sites</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#98C379;">    &#39;/user/:id&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://localhost:3001&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      changeOrigin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#98C379;">    &#39;/api/*&#39;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://localhost:3001&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      changeOrigin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      pathRewrite</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;/passager/xx&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/mPassenger/ee&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// rewrite path</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>源码也没几行，有兴趣可以看下 <a href="https://github.com/sunyongjian/koa2-proxy-middleware/blob/master/lib/index.js" target="_blank" rel="noreferrer">koa2-proxy-middleware</a></p><h2 id="引入react-helmet" tabindex="-1">引入react-helmet <a class="header-anchor" href="#引入react-helmet" aria-label="Permalink to &quot;引入react-helmet&quot;">​</a></h2><p>做更完整的SEO</p><p>App 组件嵌入到 <code>document.getElementById(&#39;root&#39;)</code> 节点当中，一般是不包含 head 标签的，但是单页应用在切换路由时，可能也会需要动态修改 head 标签信息，比如 title 内容。也就是说：在单页面应用切换页面，不会经过服务端渲染，但是我们仍然需要更改 document 的 title 内容。</p><p>如果直接改客户端的title,直接就可以使用<code>document.title</code>,但是我们现在要把SEO做好，然后我们要更改服务端head里面的meta title等内容,这里我们要用到 <a href="https://github.com/nfl/react-helmet" target="_blank" rel="noreferrer">react-helmet</a>。</p><p>具体代码非常简单</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 客户端实现方式</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">Helmet</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-helmet&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Index</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">Helmet</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;这是login页&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">          &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#D19A66;font-style:italic;"> content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;这里是禾口和react-ssr的调研&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">Helmet</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     )</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 服务端实现</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Koa</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;koa&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Router</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;koa-router&quot;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">renderToString</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-dom/server&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">StaticRouter</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-router-dom&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">Helmet</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-helmet&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 这里引入</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ....</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;/:route?&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">|</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">], (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ....</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> helmet</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Helmet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">renderStatic</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 这里获取下当前的head信息</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderToString</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#D19A66;font-style:italic;"> location</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">insertCss</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        {</span><span style="color:#61AFEF;">renderRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">routes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E5C07B;">StyleContext.Provider</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">    &lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#98C379;">      &lt;html lang=&quot;zh-Hans-CN&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;head&gt;</span></span>
<span class="line"><span style="color:#98C379;">          &lt;meta charset=&quot;utf-8&quot;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">          \${</span><span style="color:#E5C07B;">helmet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">title</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">          \${</span><span style="color:#E5C07B;">helmet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">          &lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.ico&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">          &lt;style&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#ABB2BF;">[...</span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/style&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;/head&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;body&gt;</span></span>
<span class="line"><span style="color:#98C379;">          &lt;div id=&quot;root&quot;&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">content</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;">          &lt;script src=/index.js&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;/body&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;/html&gt;</span></span>
<span class="line"><span style="color:#98C379;">  \`</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="请求token处理" tabindex="-1">请求token处理 <a class="header-anchor" href="#请求token处理" aria-label="Permalink to &quot;请求token处理&quot;">​</a></h2><p>客户端登录的时候，把登录的token，放到浏览器的cookie中并且存到redux一份，cookie在服务端可以通过请求的页面直接获取到；所以当用户刷新页面的时候，可以通过页面请求获取到token,然后向redux里面存放一份，这样客户端想要获取token就可以直接在redux里面拿了，loadDate函数可以通过第二个参数传进获取。</p><p><img src="https://ae01.alicdn.com/kf/Hab97bac5556440f787abf0ecde0a0f349.jpg" alt=""></p><h2 id="_404页面" tabindex="-1">404页面 <a class="header-anchor" href="#_404页面" aria-label="Permalink to &quot;404页面&quot;">​</a></h2><p>用<code>react-router-config</code>的<code>matchRoutes</code>方法，当捕获为空数组的时候，说明没有当前路由，跳转到404 页面，这里面有一个注意的点是，如说有二级或二级以上的路由，这个方法能捕获第一个路由的方法，所以要判断当前获取到的是不是一级路由，而且当前数据还不能为空。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// server/index.js  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断404</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> hasRoute</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> matchedRoutes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !!</span><span style="color:#E06C75;">matchedRoutes</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E5C07B;">route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hasRoute</span><span style="color:#56B6C2;"> ||</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">matchedRoutes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/404&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 添加 ‘/’ 重定向是一样的套路</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="安全问题" tabindex="-1">安全问题 <a class="header-anchor" href="#安全问题" aria-label="Permalink to &quot;安全问题&quot;">​</a></h2><p>安全问题非常关键，尤其是涉及到服务端渲染，开发者要格外小心。这里提出一个点：我们前面提到了注水和脱水过程，其中的代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  window.context = </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">    initialState</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{JSON.stringify(store.getState())}</span></span>
<span class="line"><span style="color:#C678DD;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>非常容易遭受 XSS 攻击，JSON.stringify 可能会造成 script 注入,使用 serialize-javascript 库进行处理，这也是同构应用中最容易被忽视的细节。</p><p><strong>另一个规避这种 XSS 风险的做法是</strong>：将数据传递个页面中一个隐藏的 textarea 的 value 中，textarea 的 value 自然就不怕 XSS 风险了。</p><h2 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-label="Permalink to &quot;优化&quot;">​</a></h2><ol><li>客户端js拆包，压缩代码</li><li>客户端打包的js带有hash后缀</li><li>使用copy-webpack-plugin，直接把需要的文件，打包到对应的文件夹。</li><li>中间件转发代理 跨域等</li><li>静态资源使用cdn</li><li>服务端使用缓存</li><li>对服务端压力过大的时候，切换到客户端渲染</li><li>nodeJs/ReactJs的版本升级</li></ol><h2 id="遇到的问题汇总" tabindex="-1">遇到的问题汇总 <a class="header-anchor" href="#遇到的问题汇总" aria-label="Permalink to &quot;遇到的问题汇总&quot;">​</a></h2><ol><li><p>二级菜单的时候获取到静态资源的路径，带着第一级菜单的路径</p></li><li><p>服务端导入css 的时候，css是有做hash 处理不能正确的加载css (cssmodules)</p></li><li><p>服务端导入css时发生在componentWillMount周期函数，不能在componentDidMount,此时已经到客户端了。</p></li><li><p>koa的路由不像express那样不能直接使用 ***** ， （可能可以，在我这报错）</p></li><li><p>中间件的顺序、和异步时 ctx.body=&#39;&#39; 的问题（如果有异步操作中间件就必须写成 async 函数）</p></li><li><p>react-helmet 使用时，服务端没有显示设置的title等信息 （在最外层导入）</p></li><li><p>注水的时候，注意redux客户端和服务端的区别和联系</p></li><li><p>注水异步加载的问题 promise.all()</p></li><li><p>客户端路由使用的history,跳转不访问koa的路由</p></li><li><p>ssr 部署代码体积特别大 ,添加并发，公共单独拆出、使用cdn</p></li><li><p>pm2环境变量的问题，</p></li><li><p>开启cssModules后把antd的样式也编译了</p></li><li><p>添加一个常量数组，用来表示那些必须用来服务端渲染(提高加载速度)，不能太多，影响性能【记得去重】</p></li><li><p>从别的页面跳转过来的，为什么打开网页源代码有渲染好的html,不应该只有首屏渲染吗？【打开控制台相当于重新渲染了】</p></li><li><p><a href="https://github.com/wkvictory/react-ssr/blob/master/src/pages/home/model.js#L27" target="_blank" rel="noreferrer">服务端获取了数据，客户端怎么判断已经获取了，不再调取接口</a></p></li><li><p>服务端有了css客户端还需要吗？</p><p><strong>答案是需要的。</strong></p><p>服务端的css其实就是客户端给的！SSR的渲染只是针对页面的首屏，也就是用户 第一次打开的页面，当从首屏跳转到别的页面的时候，这时候还是需要客户端来渲染的，head的css也是通过js的高阶函数，传进去的，所以当客户端没有了css，服务端一定是没有css的。在react的项目中是没有真正的css的，所谓的css也是通过js来实现动态引入，所以css也是js,包括图片。</p></li><li><p>ssr怎么进行参数的传输和获取</p><ul><li><strong>直接使用问号传参</strong></li></ul><p>客户端path： /a/b?id=1008611 然后通过正则或者使用qs获取到id的值</p><ul><li><strong>地址栏传参</strong></li></ul></li></ol><p><strong>方法一</strong></p><pre><code>想要传参客户端路由在后台设置下，使它能直接获取到params
例如：route.get(&#39;detail/id:?&#39;()=&gt;{}))
最好是把客户端所有要传参url都添加一样的前缀
页面A menu/homeDetail/1212
页面B menu/aboutDetail/3434

route.get(&#39;menu/:pageInfo?/:id?&#39;()=&gt;{}))

 **方法二**
 也是我再用的方法，获取到当前的路由path和请求的url,通过正则获取到当前的id也可以直接用\`path-to-regexp\`
</code></pre><blockquote><p>上面的问题，均已解决，可能文章介绍的不具体，具体以源码为准。</p></blockquote><p><code>喜欢的mark👍</code></p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><p><a href="http://blog.poetries.top/2018/11/18/react-ssr/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noreferrer">从零到一搭建React SSR工程架构</a></p><p><a href="https://zhuanlan.zhihu.com/p/66672794" target="_blank" rel="noreferrer">知乎 rendertron</a></p><p><a href="https://github.com/wkvictory/react-ssr" target="_blank" rel="noreferrer">本文的github地址</a></p>`,148),o=[e];function r(t,c,B,y,i,b){return a(),n("div",null,o)}const F=s(p,[["render",r]]);export{u as __pageData,F as default};
