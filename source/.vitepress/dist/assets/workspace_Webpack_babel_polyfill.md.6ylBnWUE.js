import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const m=JSON.parse('{"title":"Babel-polyfill","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Webpack/babel_polyfill.md","filePath":"workspace/Webpack/babel_polyfill.md","lastUpdated":1713942612000}'),e={name:"workspace/Webpack/babel_polyfill.md"},p=l(`<h1 id="babel-polyfill" tabindex="-1">Babel-polyfill <a class="header-anchor" href="#babel-polyfill" aria-label="Permalink to &quot;Babel-polyfill&quot;">​</a></h1><h2 id="babel-preset-env、-babel-polyfill和-babel-plugin-transform-runtime" tabindex="-1">@babel/preset-env、@babel/polyfill和@babel/plugin-transform-runtime <a class="header-anchor" href="#babel-preset-env、-babel-polyfill和-babel-plugin-transform-runtime" aria-label="Permalink to &quot;@babel/preset-env、@babel/polyfill和@babel/plugin-transform-runtime&quot;">​</a></h2><p>@babel/preset-env,这可以说是babel官方的得意之作，最早的时候没有这个包，有的是babel-preset-es2015这样的包，后来每次新标准发布之后，就要新加一个包。<br> babel顺应民意，发布了babel-preset-env这个包，它一次性囊括了已发布的所有标准包。<br> 首先我们需要明确一下，preset-env的首要作用，不是帮我们把ES6+代码转成ES5.它的首要作用是认读ES6+代码。<br> 在使用preset-env之前，babel是无法认识ES6+代码的，运行时会报Token错误。在使用preset-env之后，babel才能认识这些代码语法，并将它们抽象出AST树。<br> preset-env本身包含了一大堆plugin，并通过配置来控制插件，从而控制转码效果<br></p><h2 id="polyfill了解下" tabindex="-1">polyfill了解下 <a class="header-anchor" href="#polyfill了解下" aria-label="Permalink to &quot;polyfill了解下&quot;">​</a></h2><p>babel 编译时只<code>转换语法</code>，几乎可以编译所有时新的 JavaScript 语法，但并不会转化BOM里面不兼容的API<br> 比如 <strong>Promise,Set,Symbol,Array.from,Array.is,async</strong> 等等的一些API<br> 这时候就需要 polyfill 来转转化这些API<br> babel 转译语法需要一些plugin<br> 如<strong>babel-preset-es2015,stage-0,stage-1</strong>等等<br> 其中的 es2015 表示 babel会加载 es6 相关的编译模块，然后 stage-0 表示的是什么呢？<br> stage 系列集合了一些对 es7 的草案支持的插件，由于是草案，所以作为插件的形式提供。<br></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">stage</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">0</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> Strawman</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">just</span><span style="color:#E06C75;"> an</span><span style="color:#E06C75;"> idea</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">possible</span><span style="color:#E06C75;"> Babel</span><span style="color:#E06C75;"> plugin</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E06C75;">stage</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> Proposal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> worth</span><span style="color:#E06C75;"> working</span><span style="color:#E06C75;"> on</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E06C75;">stage</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> Draft</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">initial</span><span style="color:#E06C75;"> spec</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E06C75;">stage</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> Candidate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">complete</span><span style="color:#E06C75;"> spec</span><span style="color:#E06C75;"> and</span><span style="color:#E06C75;"> initial</span><span style="color:#E06C75;"> browser</span><span style="color:#E06C75;"> implementations</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E06C75;">stage</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> Finished</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">will</span><span style="color:#E06C75;"> be</span><span style="color:#E06C75;"> added</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> next</span><span style="color:#E06C75;"> yearly</span><span style="color:#E06C75;"> release</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>stage 是向下兼容 0&gt;1&gt;2&gt;3&gt;4 所包含的插件数量依次减少</p><p>polyfill 有三种：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span></span>
<span class="line highlighted"><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">plugin</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">transform</span><span style="color:#56B6C2;">-</span><span style="color:#61AFEF;">runtime</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">推荐</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">默认依赖于babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">polyfill</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>因为babel编译es6到es5的过程中，babel-plugin-transform-runtime这个插件会自动polyfill es5不支持的特性，<br> 这些polyfill包就是在babel-runtime这个包里 core-js 、regenerator等 polyfill。<br> babel-runtime和 babel-plugin-transform-runtime的区别是，相当一前者是手动挡而后者是自动挡，每当要转译一个api时都要手动加上require(&#39;babel-runtime&#39;)，<br> 而babel-plugin-transform-runtime会由工具自动添加，主要的功能是为api提供沙箱的垫片方案，不会污染全局的api，因此适合用在第三方的开发产品中。<br></p><h2 id="babel-preset-env" tabindex="-1">@babel/preset-env <a class="header-anchor" href="#babel-preset-env" aria-label="Permalink to &quot;@babel/preset-env&quot;">​</a></h2><p><strong>targets</strong> 控制目标浏览器的版本</p><p><strong>modules</strong> 默认为commonjs，设置为false时，不会转码模块加载，import from 语法不会转码</p><p><strong>useBuiltIns</strong> 是否自动加载polyfill。它有三个值可选：false（默认）, entry, usage。</p><p><strong>corejs</strong> 承接useBuiltIns，当useBuiltIns值为entry或usage时，有效。它可以设置为：2，3，<code>{ version:2, proposals:true }</code></p><h2 id="babel-polyfill-1" tabindex="-1">@babel/polyfill <a class="header-anchor" href="#babel-polyfill-1" aria-label="Permalink to &quot;@babel/polyfill&quot;">​</a></h2><p>这个包是一个纯运行时的包，不是babel插件。它的作用是直接改写全局变量，从而让运行环境支持经过present-env转码后的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#98C379;">  &#39;@babel/preset-env&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#98C379;">    &#39;corejs&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 使用 core-js@3 版本，core-js@2 从 ES2017 之后就没再更新了，不推荐使用</span></span>
<span class="line"><span style="color:#98C379;">    &#39;useBuiltIns&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;usage&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 只转译用到的新语言元素</span></span>
<span class="line"><span style="color:#98C379;">    &#39;bugfix&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// v7.9 之后引入的新选项，尽量减小转译后的代码体积，v8 之后会变成默认选项</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">],</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h26ym1lcfhj20te0g8jsq.jpg" alt=""></p><p>直接重写了 Promise ，污染全局</p><h2 id="babel-plugin-transform-runtime" tabindex="-1">@babel/plugin-transform-runtime <a class="header-anchor" href="#babel-plugin-transform-runtime" aria-label="Permalink to &quot;@babel/plugin-transform-runtime&quot;">​</a></h2><p>在webpack中，<strong>babel-plugin-transform-runtime 实际上是依赖babel-runtime</strong> <br></p><ul><li>它有两个作用： <ul><li>将preset-env所产生的helpers函数提出到一个独立文件中，从而减少代码量</li><li>建立运行时沙盒，避免全局污染</li></ul></li></ul><p><strong>corejs</strong></p><p><strong>helpers</strong> 是否要将所有helper函数提炼到另外一个公共文件中。默认为true。</p><p>当使用@babel/plugin-trasnform-runtime之后，原本babel会直接在文件中创建一个helper函数，现在会采用require的方式，从@babel/runtime中引入这些函数，这样就可以减少代码量</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h26yo5knxaj21k20u0n0w.jpg" alt=""></p><h2 id="babel7中-corejs-和-corejs2-的区别" tabindex="-1">babel7中 corejs 和 corejs2 的区别 <a class="header-anchor" href="#babel7中-corejs-和-corejs2-的区别" aria-label="Permalink to &quot;babel7中 corejs 和 corejs2 的区别&quot;">​</a></h2><p>最近在给项目升级babel7，有一些改变但是变化不大,在升级中发现 babel7 变化挺大的，包括插件和包。 其中一项功能特别赞，就是 @babel/preset-env 中的 useBuiltIns 选项，如果你设置了 usage ，babel 编绎的时候就不用整个 polyfills , 只加载你使用 polyfills，这样就可以减少包的大小。 在使用 babel 中还想减少代码，就需要引入 babel 的运行时：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">yarn</span><span style="color:#E06C75;"> add</span><span style="color:#ABB2BF;"> @</span><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">plugin</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">transform</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;">D</span></span>
<span class="line"><span style="color:#E06C75;">yarn</span><span style="color:#E06C75;"> add</span><span style="color:#ABB2BF;"> @</span><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">runtime</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>需要注意的是：</p><ol><li><code>两个包引入的范围不一样：一个在开发时引入，一个在运行时引入。</code></li><li>plugin-transform-runtime 已经默认包括了 @babel/polyfill，因此不用在独立引入。</li></ol><p>在 plugin-transform-runtime 中有一个 corejs 很奇怪，可以设置成 false 或者 2。这是为什么这样？<br> 大家知道 corejs 是一个给低版本的浏览器提供接口的库，如 Promise, map, set 等。<br> 在 babel 中你设置成 false 或者不设置，就是引入的是 corejs 中的库，而且在全局中引入，也就是说侵入了全局的变量。可以观察以下的代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你写的代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ms</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">ms</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// babel 编绎成的代码</span></span>
<span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;core-js/modules/es6.promise&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 这里可以看出是全局引入</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ms</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">ms</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果你的全局有一个引入，防止引入的库影响全局，那你就需要引把 corejs 设置成2。下面就是设真置成2，编绎成的代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _interopRequireDefault</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@babel/runtime-corejs2/helpers/interopRequireDefault&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _promise</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> _interopRequireDefault</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@babel/runtime-corejs2/core-js/promise&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 独立变量</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ms</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> _promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">ms</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以从编绎出的代码看到，Promise 代码变成了一个独立的变量 _promise，不会影响全局的 Promise。<br> 这样的好处是，引入的库者自己引入了一个变量，这样如果你引入的第三方库会对 Promise 进行一些自定义操作，这样就可以避免第三方库报错。<br> 还要注意一点是： 如果你设置了 corejs2，那你就需要加入下面的库:</p><table><thead><tr><th>corejs选项</th><th>安装命令</th><th>包含的文件</th></tr></thead><tbody><tr><td>false</td><td><code>yarn add @babel/runtime</code></td><td>helpers、regenerator</td></tr><tr><td>2</td><td><code>yarn add @babel/runtime-corejs2</code></td><td>core-js、helpers、regenerator</td></tr><tr><td>3</td><td><code>yarn add @babel/runtime-corejs3</code></td><td>还支持实例属性（例如[].includes)</td></tr></tbody></table><h2 id="参考文档" tabindex="-1">参考文档：<br> <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档：&lt;br/&gt;&quot;">​</a></h2><p><a href="https://babeljs.io/docs/en/babel-preset-env/" target="_blank" rel="noreferrer">babel-preset-env</a></p><p><a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime" target="_blank" rel="noreferrer">babel-plugin-transform-runtime</a></p><p>runtime转换器插件主要做了三件事：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">当你使用generators</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">async方法</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">函数时自动调用babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">regenerator</span></span>
<span class="line"><span style="color:#E06C75;">当你使用ES6</span><span style="color:#E06C75;"> 的Map或者内置的东西时自动调用babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">core</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">js</span></span>
<span class="line"><span style="color:#E06C75;">移除内联babel</span><span style="color:#E06C75;"> helpers并替换使用babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">helpers来替换</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">transform</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime优点</span></span>
<span class="line"><span style="color:#E06C75;">    不会污染全局变量</span></span>
<span class="line"><span style="color:#E06C75;">    多次使用只会打包一次</span></span>
<span class="line"><span style="color:#E06C75;">    依赖统一按需引入</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">无重复引入</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">无多余引入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">transform</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime缺点</span></span>
<span class="line"><span style="color:#E5C07B;">   不支持实例化的方法Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">就不能转化</span></span>
<span class="line"><span style="color:#E06C75;">   如果使用的API用的次数不是很多</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">那么transform</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime</span><span style="color:#E06C75;"> 引入polyfill的包会比不是transform</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime时大</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">polyfill则是通过改写全局prototype的方式实现</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">比较适合单独运行的项目</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E06C75;">    开启babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">polyfill的方式</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">可以直接在代码中require</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">或者在webpack的entry中添加</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">也可以在babel的env中设置useBuildins为true来开启</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E06C75;">    但是babel</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">polyfill会有近100K</span><span style="color:#ABB2BF;">，</span></span>
<span class="line"><span style="color:#E06C75;">    打包后代码冗余量比较大</span><span style="color:#ABB2BF;">，</span></span>
<span class="line"><span style="color:#E06C75;">    对于现代的浏览器</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">有些不需要polyfill</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">造成流量浪费</span></span>
<span class="line"><span style="color:#E06C75;">    污染了全局对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E06C75;">babel</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">runtime</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">corejs2包含三个文件夹</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#E06C75;">    core</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">js</span><span style="color:#E06C75;">  引用core</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">js这个npm包</span></span>
<span class="line"><span style="color:#E06C75;">    helpers</span><span style="color:#E06C75;">  定义了一些处理新的语法关键字的帮助函数</span></span>
<span class="line"><span style="color:#E06C75;">    regenerator</span><span style="color:#E06C75;">  仅仅是引用regenerator</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">runtime这个npm包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="库项目" tabindex="-1">库项目 <a class="header-anchor" href="#库项目" aria-label="Permalink to &quot;库项目&quot;">​</a></h2><p>@babel/preset-env 拥有根据 useBuiltIns 参数的多种polyfill实现，优点是覆盖面比较全（entry）， 缺点是会污染全局， 推荐在业务项目中使用</p><p>库类项目推荐使用 <code>@babel/plugin-transform-runtime</code>，因为库项目通常会面临另一个问题。如果我们直接导入 core-js 作 polyfill 的话，像 <code>Promise</code>，<code>Set</code>，<code>Map</code> 这样的全局对象就会被覆盖。对于一般的应用而言，问题不大；但如果是库，你无法预期其它开发者会在什么情况下使用你的库，很可能他的目标平台都支持这些新语法元素，不希望转译污染。</p><p>此时，使用 <code>@babel/plugin-transform-runtime</code> 可以让 babel 在转译时使用沙箱垫片和代码复用， 避免帮助函数重复 inject 过多的问题， 该方式的优点是不会污染全局</p>`,48),o=[p];function r(t,c,i,y,b,B){return a(),n("div",null,o)}const C=s(e,[["render",r]]);export{m as __pageData,C as default};
