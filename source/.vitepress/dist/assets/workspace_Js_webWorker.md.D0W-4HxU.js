import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Js/webWorker.md","filePath":"workspace/Js/webWorker.md","lastUpdated":1713942612000}'),p={name:"workspace/Js/webWorker.md"},e=l(`<h3 id="web-worker" tabindex="-1">Web Worker <a class="header-anchor" href="#web-worker" aria-label="Permalink to &quot;Web Worker&quot;">​</a></h3><p>JavaScript 语言采用的是<code>单线程模型</code>，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。随着电脑计算能力的增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。</p><p>Web Worker 的作用，就是为 JavaScript <code>创造多线程环境</code>，允许主线程创建 Worker 线程，将一些任务分配给后者运行。 在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。 这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><p>Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。 这样有利于随时响应主线程的通信。但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p><h2 id="web-worker-有以下几个使用注意点" tabindex="-1">Web Worker 有以下几个使用注意点 <a class="header-anchor" href="#web-worker-有以下几个使用注意点" aria-label="Permalink to &quot;Web Worker 有以下几个使用注意点&quot;">​</a></h2><p>(1)<strong>同源限制</strong><br> 分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p><p>(2)<strong>DOM 限制</strong><br> Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用<code>document、window、parent</code>这些对象。 但是，Worker 线程可以<code>navigator对象和location</code>对象。</p><p>(3)<strong>通信联系</strong><br> Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p><p>(4)<strong>脚本限制</strong><br> Worker 线程不能执行<code>alert()</code>方法和<code>confirm()</code>方法，但可以使用 <code>XMLHttpRequest</code> 对象发出 AJAX 请求。</p><p>(5)<strong>文件限制</strong><br> Worker 线程无法读取本地文件，即不能打开本机的文件系统（<code>file://</code>），它所加载的脚本，必须来自网络。</p><h2 id="worker用法" tabindex="-1">Worker用法 <a class="header-anchor" href="#worker用法" aria-label="Permalink to &quot;Worker用法&quot;">​</a></h2><p>通常情况下，Worker 载入的是一个<code>单独的 JavaScript 脚本文件</code>，但是也可以载入与主线程在同一个网页的代码。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;worker&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app/worker&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      addEventListener(&#39;message&#39;, function () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        postMessage(&#39;some message&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, false);</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面是一段嵌入网页的脚本，注意必须指定script标签的type属性是一个浏览器不认识的值，上例是<code>app/worker</code>。</p><p>然后，读取这一段嵌入页面的脚本，用 Worker 来处理。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> blob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Blob</span><span style="color:#ABB2BF;">([</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#worker&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">blob</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> worker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // e.data === &#39;some message&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，先将嵌入网页的脚本代码，转成一个二进制对象，然后为这个二进制对象生成 URL，再让 Worker 加载这个 URL。这样就做到了，主线程和 Worker 的代码都在同一个网页上面。</p><p><code>可以配合webpack 使用worker-loader 方便其操作</code></p><h2 id="主线程初始化webworker" tabindex="-1">主线程初始化WebWorker <a class="header-anchor" href="#主线程初始化webworker" aria-label="Permalink to &quot;主线程初始化WebWorker&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//方法一 同页面的 Web Worker</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> WebWorker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">worker</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> code</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> blob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Blob</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;(&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> code</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;)()&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">blob</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">worker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WebWorker</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">worker</span><span style="color:#ABB2BF;">,{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;这是worker的名称  self.name能获取出来&#39;</span><span style="color:#ABB2BF;">});  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//方法二 worker.js放到public目录</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">worker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;worker.js&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="主线程向worker发消息" tabindex="-1">主线程向Worker发消息 <a class="header-anchor" href="#主线程向worker发消息" aria-label="Permalink to &quot;主线程向Worker发消息&quot;">​</a></h2><p>然后，<code>主线程调用worker.postMessage()</code>方法，向 Worker 发消息。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    users</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    types</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#7F848E;font-style:italic;">  //这里加个类型，方便子线程判断  【e.data.types】</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>worker.postMessage()方法的参数，就是主线程传给 Worker 的数据。它可以是<code>各种数据类型</code>，包括二进制数据。</p><h2 id="子线程发回处理后的数据" tabindex="-1">子线程发回处理后的数据 <a class="header-anchor" href="#子线程发回处理后的数据" aria-label="Permalink to &quot;子线程发回处理后的数据&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//worker.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;message&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// eslint-disable-line no-restricted-globals</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> users</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> j</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> users</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                    const</span><span style="color:#E5C07B;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">                    users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">                    users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#61AFEF;">        postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//self代表子线程自身，即子线程的全局对象</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//这里可以添加判断，调用不同的方法</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &#39;users&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">     break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//子线程内部关闭自身。</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="主线程接收数据" tabindex="-1">主线程接收数据 <a class="header-anchor" href="#主线程接收数据" aria-label="Permalink to &quot;主线程接收数据&quot;">​</a></h2><p>接着，<code>主线程通过worker.onmessage</code>指定监听函数，接收子线程发回来的消息。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;message&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> sortedList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        users</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">sortedList</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        isSorting</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="关闭worker" tabindex="-1">关闭Worker <a class="header-anchor" href="#关闭worker" aria-label="Permalink to &quot;关闭Worker&quot;">​</a></h2><p>Worker 完成任务以后，<code>主线程</code>就可以把它关掉。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">terminate</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的error事件。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>子线程内部也可以监听error事件。</p><h2 id="worker线程完成轮询" tabindex="-1">Worker线程完成轮询 <a class="header-anchor" href="#worker线程完成轮询" aria-label="Permalink to &quot;Worker线程完成轮询&quot;">​</a></h2><p>有时，浏览器需要轮询服务器状态，以便第一时间得知状态改变。这个工作可以放在 Worker 里面。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> WebWorker</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">worker</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> code</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> blob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Blob</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;(&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> code</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;)()&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">blob</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pollingWorker</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> WebWorker</span><span style="color:#ABB2BF;">( (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">new</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">old</span><span style="color:#ABB2BF;">) { ... };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  setInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">    fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/my-api-endpoint&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //如果不一致</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">compare</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">        cache</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//主进程</span></span>
<span class="line"><span style="color:#E5C07B;">worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;message&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> sortedList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    .....</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">pollingWorker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;success&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>Worker 每秒钟轮询一次数据，然后跟缓存做比较。如果不一致，就说明服务端有了新的变化，因此就要通知主线程。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p><strong>主线程</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myWorker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">jsUrl</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Worker()构造函数，可以接受两个参数。第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且<code>只能加载JS脚本</code>，否则会报错。第二个参数是配置对象，该对象可选。它的一个作用就是<code>指定Worker的名称</code>，用来区分多个Worker线程。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 主线程</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myWorker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;worker.js&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">name </span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;myWorker&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Worker 线程</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#7F848E;font-style:italic;"> // myWorker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Worker()构造函数返回一个 Worker 线程对象，用来供主线程操作 Worker。</p><p><strong>主线程对象的属性和方法</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">Worker</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onerror</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">指定</span><span style="color:#E06C75;"> error</span><span style="color:#E06C75;"> 事件的监听函数</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">Worker</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onmessage</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">指定</span><span style="color:#E06C75;"> message</span><span style="color:#E06C75;"> 事件的监听函数</span><span style="color:#ABB2BF;">，</span><span style="color:#E5C07B;">发送过来的数据在Event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data属性中</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">Worker</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onmessageerror</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">指定</span><span style="color:#E06C75;"> messageerror</span><span style="color:#E06C75;"> 事件的监听函数</span><span style="color:#ABB2BF;">。</span><span style="color:#E06C75;">发送的数据无法序列化成字符串时</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">会触发这个事件</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">Worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">()：</span><span style="color:#E06C75;">向</span><span style="color:#E06C75;"> Worker</span><span style="color:#E06C75;"> 线程发送消息</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">Worker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">terminate</span><span style="color:#ABB2BF;">()：</span><span style="color:#E06C75;">立即终止</span><span style="color:#E06C75;"> Worker</span><span style="color:#E06C75;"> 线程</span><span style="color:#ABB2BF;">。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Worker 线程</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">： </span><span style="color:#E06C75;">Worker</span><span style="color:#E06C75;"> 的名字</span><span style="color:#ABB2BF;">。</span><span style="color:#E06C75;">该属性只读</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">由构造函数指定</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onmessage</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">指定message事件的监听函数</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onmessageerror</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">指定messageerror事件的监听函数</span><span style="color:#ABB2BF;">。</span><span style="color:#E06C75;">发送的数据无法序列化成字符串时</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">会触发这个事件</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">()：</span><span style="color:#E06C75;">关闭Worker线程</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">()：</span><span style="color:#E06C75;">向主线程发送消息</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">importScripts</span><span style="color:#ABB2BF;">()：</span><span style="color:#E06C75;">加载JS脚本</span><span style="color:#ABB2BF;">。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><p>webWorker解决的是js中数据处理导致的UI线程阻塞</p><ul><li>计算量数据大的，不能控制在毫秒级内的运算都可以考虑放在web worker中执行。</li><li>高频的用户交互根据用户的输入习惯、历史记录以及缓存等信息来协助用户完成输入的纠错、校正功能等类似场景，用户频繁输入的响应处理同样可以考虑放在web worker中执行</li></ul>`,53),o=[e];function r(c,t,B,y,i,b){return a(),n("div",null,o)}const A=s(p,[["render",r]]);export{C as __pageData,A as default};
