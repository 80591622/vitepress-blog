import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.BQQWXjGs.js";const C=JSON.parse('{"title":"理论解答","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Interviews/theory.md","filePath":"workspace/Interviews/theory.md","lastUpdated":1713942612000}'),p={name:"workspace/Interviews/theory.md"},e=l(`<h1 id="理论解答" tabindex="-1">理论解答 <a class="header-anchor" href="#理论解答" aria-label="Permalink to &quot;理论解答&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#基本数据类型">基本数据类型</a></li><li><a href="#new做了什么">new做了什么</a></li><li><a href="#移动端点击问题">移动端点击问题</a><ul><li><a href="#移动端click300毫秒点击延迟">移动端Click300毫秒点击延迟</a></li><li><a href="#点透问题">点透问题</a></li></ul></li><li><a href="#浏览器并发请求个数">浏览器并发请求个数</a></li><li><a href="#jsonp-原理">JSONP 原理</a></li><li><a href="#react-redux是如何把store绑定到组件上的-底层实现">react-redux是如何把store绑定到组件上的，底层实现</a></li><li><a href="#http缓存">http缓存</a></li><li><a href="#http状态码有那些-分别代表是什么意思">http状态码有那些？分别代表是什么意思？</a></li><li><a href="#react和vue的区别">react和vue的区别</a></li><li><a href="#如何实现浏览器内多个标签页之间的通信-阿里">如何实现浏览器内多个标签页之间的通信? (阿里)</a></li><li><a href="#setinterval方法的返回值什么">setInterval方法的返回值什么?</a></li><li><a href="#你能说出浏览器上到此支持多少个中文字吗">你能说出浏览器上到此支持多少个中文字吗</a></li></ul></nav><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#E06C75;">number</span></span>
<span class="line"><span style="color:#E06C75;">boolean</span></span>
<span class="line"><span style="color:#D19A66;">null</span></span>
<span class="line"><span style="color:#D19A66;">undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">bigint</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt) // typeof BigInt(Number.MAX_SAFE_INTEGER)</span></span>
<span class="line"><span style="color:#E06C75;">symbol</span><span style="color:#7F848E;font-style:italic;"> // typeof Symbol(&#39;fn&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="new做了什么" tabindex="-1">new做了什么 <a class="header-anchor" href="#new做了什么" aria-label="Permalink to &quot;new做了什么&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1.创建了一个全新的对象。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2.这个对象会被执行[[Prototype]]（也就是__proto__）链接。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//3.生成的新对象会绑定到函数调用的this。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//4.如果函数没有返回对象类型Object(包含Functoin, Array, Date, RegExg, Error)，那么new表达式中的函数调用会自动返回这个新的对象。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//new运算符的执行过程，实现一个new</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> realizeNew</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">con</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">    obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> con</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> con</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;object&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> ret</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//举列</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">/*属性*/</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){  </span><span style="color:#7F848E;font-style:italic;">/*实例方法*/</span></span>
<span class="line"><span style="color:#61AFEF;">        alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&#39;在运动&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}    </span></span>
<span class="line"><span style="color:#61AFEF;">realizeNew</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;王可&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="移动端点击问题" tabindex="-1">移动端点击问题 <a class="header-anchor" href="#移动端点击问题" aria-label="Permalink to &quot;移动端点击问题&quot;">​</a></h2><h3 id="移动端click300毫秒点击延迟" tabindex="-1">移动端Click300毫秒点击延迟 <a class="header-anchor" href="#移动端click300毫秒点击延迟" aria-label="Permalink to &quot;移动端Click300毫秒点击延迟&quot;">​</a></h3><ul><li>为了对早期普通网页更好的体验，iphone设计了<code>双击放大显示的功能</code>--这就是300ms延迟的来源：如果用户一次点击后300ms内没有其他操作，则认为是个单击行为；否则为双击放大行为。</li></ul><p><strong>解决方法</strong></p><ul><li>1.meta标签禁止放大</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//不适用于所有的</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;font-style:italic;"> content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>2.fastclick.js</li></ul><p>fastclick.js的原理是：FastClick的实现原理是在检测到touchend事件的时候，会通过DOM自定义事件立即触发模拟一个click事件，并把浏览器在300ms之后真正的click事件阻止掉</p><h3 id="点透问题" tabindex="-1">点透问题 <a class="header-anchor" href="#点透问题" aria-label="Permalink to &quot;点透问题&quot;">​</a></h3><p>当A/B两个层上下z轴重叠，上层的A点击后消失或移开（这一点很重要），并且B元素本身有默认click事件（如a标签）或绑定了click事件。在这种情况下，点击A/B重叠的部分，就会出现点透的现象。</p><p><strong>点透问题的出现原因</strong></p><p>点透问题出现的原因就是因为我们上边说过的移动端click事件300ms延迟问题， 当点击上层元素时，先触发touchstart事件，然后在300ms后会触发click事件，而此时上层元素已经消失，所以下边的元素会触发click事件，这就是点透</p><p><strong>点透问题的解决方案</strong></p><p>1.使用click,解决300ms延迟问题 (解决了300毫秒延迟问题即解决了点透问题)<br> 2.给上面元素加preventDefault()<br></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">button</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ontouchstart</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ev</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> oEvent</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ev</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> event</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">display</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;none&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    oEvent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">div</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>3.使用一个(透明)遮罩层，屏蔽所有事件，然后400ms(对于IOS来说是个理想值)后自动隐藏<br> 4.下层避开click事件，如a链接改为span等标签，使用js跳转页面（通过一个变量，只有在touchend触发时，才实现跳转）<br></p><h2 id="浏览器并发请求个数" tabindex="-1">浏览器并发请求个数 <a class="header-anchor" href="#浏览器并发请求个数" aria-label="Permalink to &quot;浏览器并发请求个数&quot;">​</a></h2><p>因为浏览器对同一域名下的最大连接数做了限制，为了让浏览器并发加载，利用domain hash也就是将资源分散到不同域名下。 因此，新的浏览器加大了并发数的限制，控制在8以内，缺点是需要DNS解析更多的域名。</p><p><a href="https://www.zhihu.com/question/20474326" target="_blank" rel="noreferrer">https://www.zhihu.com/question/20474326</a></p><h2 id="jsonp-原理" tabindex="-1">JSONP 原理 <a class="header-anchor" href="#jsonp-原理" aria-label="Permalink to &quot;JSONP 原理&quot;">​</a></h2><p>利用了script的src属性不受同源策略的约束（link的href、img的src都不受约束），所以用script的src请求第三方的接口，但是后台需要做一些特殊处理。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    function fn(data)</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;https://www.baidu.com/s?wd=666&amp;callback=fn&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="react-redux是如何把store绑定到组件上的-底层实现" tabindex="-1">react-redux是如何把store绑定到组件上的，底层实现 <a class="header-anchor" href="#react-redux是如何把store绑定到组件上的-底层实现" aria-label="Permalink to &quot;react-redux是如何把store绑定到组件上的，底层实现&quot;">​</a></h2><p><a href="/workspace/Frame/react/react-redux.html">redux源码解析</a></p><h2 id="http缓存" tabindex="-1">http缓存 <a class="header-anchor" href="#http缓存" aria-label="Permalink to &quot;http缓存&quot;">​</a></h2><p><a href="/workspace/Server/nginx/nginx_base.html">HTTP缓存控制</a></p><h2 id="http状态码有那些-分别代表是什么意思" tabindex="-1">http状态码有那些？分别代表是什么意思？ <a class="header-anchor" href="#http状态码有那些-分别代表是什么意思" aria-label="Permalink to &quot;http状态码有那些？分别代表是什么意思？&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#D19A66;">100</span><span style="color:#E06C75;">  Continue</span><span style="color:#E06C75;">	继续</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">一般在发送post请求时</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">已发送了http</span><span style="color:#E06C75;"> header之后服务端将返回此信息</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">表示确认</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">之后发送具体参数信息</span></span>
<span class="line"><span style="color:#D19A66;">200</span><span style="color:#E5C07B;">  OK</span><span style="color:#E06C75;"> 		正常返回信息</span></span>
<span class="line"><span style="color:#D19A66;">201</span><span style="color:#E06C75;">  Created</span><span style="color:#E06C75;">  	请求成功并且服务器创建了新的资源</span></span>
<span class="line"><span style="color:#D19A66;">202</span><span style="color:#E06C75;">  Accepted</span><span style="color:#E06C75;"> 	服务器已接受请求</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">但尚未处理</span></span>
<span class="line"><span style="color:#D19A66;">301</span><span style="color:#E06C75;">  Moved</span><span style="color:#E06C75;"> Permanently</span><span style="color:#E06C75;">  请求的网页已永久移动到新位置</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">302</span><span style="color:#E06C75;">  Found</span><span style="color:#E06C75;">  		临时性重定向</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">303</span><span style="color:#E06C75;">  See</span><span style="color:#E06C75;"> Other</span><span style="color:#E06C75;">  	临时性重定向</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">且总是使用</span><span style="color:#E5C07B;"> GET</span><span style="color:#E06C75;"> 请求新的</span><span style="color:#E5C07B;"> URI</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">304</span><span style="color:#E06C75;">  Not</span><span style="color:#E06C75;"> Modified</span><span style="color:#E06C75;"> 自从上次请求后</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">请求的网页未修改过</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">400</span><span style="color:#E06C75;">  Bad</span><span style="color:#E06C75;"> Request</span><span style="color:#E06C75;">  服务器无法理解请求的格式</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">客户端不应当尝试再次使用相同的内容发起请求</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">401</span><span style="color:#E06C75;">  Unauthorized</span><span style="color:#E06C75;"> 请求未授权</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">403</span><span style="color:#E06C75;">  Forbidden</span><span style="color:#E06C75;">  	禁止访问</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">404</span><span style="color:#E06C75;">  Not</span><span style="color:#E06C75;"> Found</span><span style="color:#E06C75;">  	找不到如何与</span><span style="color:#E5C07B;"> URI</span><span style="color:#E06C75;"> 相匹配的资源</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">500</span><span style="color:#E06C75;">  Internal</span><span style="color:#E06C75;"> Server</span><span style="color:#E06C75;"> Error</span><span style="color:#E06C75;">  最常见的服务器端错误</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#D19A66;">503</span><span style="color:#E06C75;">  Service</span><span style="color:#E06C75;"> Unavailable</span><span style="color:#E06C75;"> 服务器端暂时无法处理请求</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">可能是过载或维护</span><span style="color:#ABB2BF;">）。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="react和vue的区别" tabindex="-1">react和vue的区别 <a class="header-anchor" href="#react和vue的区别" aria-label="Permalink to &quot;react和vue的区别&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;"> 相同点</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#ABB2BF;">1.</span><span style="color:#E06C75;">数据驱动页面</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">提供响应式的试图组件</span></span>
<span class="line"><span style="color:#ABB2BF;">2.</span><span style="color:#E06C75;">都有virtual</span><span style="color:#E5C07B;"> DOM</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">组件化的开发</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">通过props参数进行父子之间组件传递数据</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">都实现了webComponents规范</span></span>
<span class="line"><span style="color:#ABB2BF;">3.</span><span style="color:#E06C75;">数据流动单向</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">都支持服务器的渲染SSR</span></span>
<span class="line"><span style="color:#ABB2BF;">4.</span><span style="color:#E06C75;">都有支持native的方法</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">react有React</span><span style="color:#E06C75;"> native</span><span style="color:#ABB2BF;">， </span><span style="color:#E06C75;">vue有wexx</span></span>
<span class="line"><span style="color:#E06C75;">不同点</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#ABB2BF;">1.</span><span style="color:#E06C75;">数据绑定</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">Vue实现了双向的数据绑定</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">react数据流动是单向的</span></span>
<span class="line"><span style="color:#ABB2BF;">2.</span><span style="color:#E06C75;">数据渲染</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">大规模的数据渲染</span><span style="color:#ABB2BF;">，</span><span style="color:#61AFEF;">react更快</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">react推崇不可变</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">vue推崇可变</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">3.</span><span style="color:#E06C75;">使用场景</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">React配合Redux架构适合大规模多人协作复杂项目</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">Vue适合小快的项目</span></span>
<span class="line"><span style="color:#ABB2BF;">4.</span><span style="color:#E06C75;">开发风格</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">react推荐做法jsx</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> inline</span><span style="color:#E06C75;"> style把html和css都写在js了</span></span>
<span class="line"><span style="color:#E06C75;">           vue是采用webpack</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> vue</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">loader单文件组件格式</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">css同一个文件</span></span>
<span class="line"><span style="color:#ABB2BF;">5.</span><span style="color:#E06C75;">vue都是基于各种指令</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">react则比较接近原生es6的写法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="如何实现浏览器内多个标签页之间的通信-阿里" tabindex="-1">如何实现浏览器内多个标签页之间的通信? (阿里) <a class="header-anchor" href="#如何实现浏览器内多个标签页之间的通信-阿里" aria-label="Permalink to &quot;如何实现浏览器内多个标签页之间的通信? (阿里)&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">WebSocket</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">SharedWorker</span><span style="color:#ABB2BF;">；</span></span>
<span class="line"><span style="color:#E06C75;">也可以调用localstorge</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">cookies等本地存储方式</span><span style="color:#ABB2BF;">；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">localstorge另一个浏览上下文里被添加</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">修改或删除时</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">它都会触发一个事件</span><span style="color:#ABB2BF;">，</span></span>
<span class="line"><span style="color:#E06C75;">我们通过监听事件</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">控制它的值来进行页面信息通信</span><span style="color:#ABB2BF;">；</span></span>
<span class="line"><span style="color:#E06C75;">注意quirks</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">Safari</span><span style="color:#E06C75;"> 在无痕模式下设置localstorge值时会抛出</span><span style="color:#E06C75;"> QuotaExceededError</span><span style="color:#E06C75;"> 的异常</span><span style="color:#ABB2BF;">；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="setinterval方法的返回值什么" tabindex="-1">setInterval方法的返回值什么? <a class="header-anchor" href="#setinterval方法的返回值什么" aria-label="Permalink to &quot;setInterval方法的返回值什么?&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hi&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//一个唯一的id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="你能说出浏览器上到此支持多少个中文字吗" tabindex="-1">你能说出浏览器上到此支持多少个中文字吗 <a class="header-anchor" href="#你能说出浏览器上到此支持多少个中文字吗" aria-label="Permalink to &quot;你能说出浏览器上到此支持多少个中文字吗&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0x4e00</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">0x9fa5</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;">+=</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromCharCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,42),o=[e];function r(t,c,i,B,y,b){return n(),a("div",null,o)}const d=s(p,[["render",r]]);export{C as __pageData,d as default};
