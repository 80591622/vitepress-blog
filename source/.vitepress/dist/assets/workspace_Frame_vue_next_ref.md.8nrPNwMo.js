import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.BQQWXjGs.js";const C=JSON.parse('{"title":"ref","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/vue/next/ref.md","filePath":"workspace/Frame/vue/next/ref.md","lastUpdated":1713942612000}'),p={name:"workspace/Frame/vue/next/ref.md"},e=l(`<h1 id="ref" tabindex="-1">ref <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;ref&quot;">​</a></h1><p><code>ref</code>可以将原始数据类型也转换成响应式数据，需要通过<code>.value</code>属性进行获取值</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">track</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">trigger</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./effect&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TrackOpTypes</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">TriggerOpTypes</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./operations&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">isObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hasChanged</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@vue/shared&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isProxy</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">toRaw</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./reactive&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ComputedRef</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./computed&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CollectionTypes</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./collectionHandlers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 简单使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* const count = ref(0)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  value: 0,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*  __v_isRef: true/false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> RefSymbol</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unique</span><span style="color:#E5C07B;"> symbol</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> /*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 接口类型色声明</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 用来与唯一的key,来做接口的的一个描述值，让isRef函数做类型判断</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E06C75;">RefSymbol</span><span style="color:#ABB2BF;">]: true,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //value 值是真正存放数据的地方</span></span>
<span class="line"><span style="color:#E06C75;">  value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> ToRefs</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">]&gt; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 查看ref 的参数是不是一个对象，如果是对象的话 走reactive,不是对象的话走当前值</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> convert</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断是不是一个 ref创建出来的对象</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#C678DD;"> is</span><span style="color:#E5C07B;"> Ref</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> r</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> r</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__v_isRef</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> true</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这里是Ref的执行代码</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object&gt;(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Ref</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">UnwrapRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">UnwrapRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt;(): </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> | undefined&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> createRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这里是shallowRef的执行代码，默认不走reactive，所以就跟直接设置一个对象是没什么区别的</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> shallowRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Ref</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> shallowRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt;(): </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> | undefined&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> shallowRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> createRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// TODO: 正文 ref 的核心代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">rawValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">shallow</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> rawValue</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 如果是true的话 说明他不是一个对象，是基本数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> shallow</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> rawValue</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> r</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    __v_isRef</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 监听函数收集依赖的方法。</span></span>
<span class="line"><span style="color:#61AFEF;">      track</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TrackOpTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">GET</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;value&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#C678DD;">    set</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 先把传进来的数据转换成原生的对象,然后对比是否有变化，再决定要不要向下进行</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">hasChanged</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">toRaw</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">rawValue</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">        rawValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> shallow</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> newVal</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //  触发监听函数执行的方法</span></span>
<span class="line"><span style="color:#61AFEF;">        trigger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TriggerOpTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SET</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;value&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">__DEV__</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> r</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// toRefs()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> toRefs</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object&gt;(</span><span style="color:#E06C75;font-style:italic;">object</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">ToRefs</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 要求是reactive类型的对象</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__DEV__</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#61AFEF;">isProxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`toRefs() expects a reactive object but received a plain one.\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> ret</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    ret</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> ret</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> toRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> object, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  object</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">  key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">K</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">]&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    __v_isRef</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    get</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> object</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#C678DD;">    set</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 这块有点奇怪，它没有继续递归，或者直接把对象变成响应式的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 可能作者前面已经报警告了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 这样会导致如果不是响应式对象并且对象嵌套多级的话，不能动态渲染页面</span></span>
<span class="line"><span style="color:#E06C75;">      object</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newVal</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> any</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 记笔记</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* ref VS reactive</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 对于\`基本数据类型\`，函数传递或者\`对象解构\`时，会丢失原始数据的引用，换言之，我们没法让基本数据类型，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 或者解构后的变量(如果它的值也是基本数据类型的话)，成为响应式的数据  Proxy不能监听基本数据类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* const pos = reactive({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    a: 0,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*    b: 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* return {...pos}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 正确的用法 ✅ toRefs(pos)或者直接导出pos（就是用的时候可能麻烦点）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br></div></div>`,3),o=[e];function r(c,t,B,y,i,b){return a(),n("div",null,o)}const E=s(p,[["render",r]]);export{C as __pageData,E as default};
