import{_ as s,c as a,o as n,a5 as l}from"./chunks/framework.BQQWXjGs.js";const b=JSON.parse('{"title":"git基础","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Git/git.md","filePath":"workspace/Git/git.md","lastUpdated":1714126308000}'),e={name:"workspace/Git/git.md"},t=l(`<h1 id="git基础" tabindex="-1">git基础 <a class="header-anchor" href="#git基础" aria-label="Permalink to &quot;git基础&quot;">​</a></h1><h2 id="git-emoji" tabindex="-1">git emoji <a class="header-anchor" href="#git-emoji" aria-label="Permalink to &quot;git emoji&quot;">​</a></h2><p>执行 git commit 时使用 emoji 为本次提交打上一个 &quot;标签&quot;, 使得此次 commit 的主要工作得以凸现，也能够使得其在整个提交历史中易于区分与查找。</p><table><thead><tr><th style="text-align:left;">emoji</th><th style="text-align:left;">emoji 代码</th><th style="text-align:left;">commit 说明</th></tr></thead><tbody><tr><td style="text-align:left;">🎉 (庆祝)</td><td style="text-align:left;"><code>:tada:</code></td><td style="text-align:left;">初次提交</td></tr><tr><td style="text-align:left;">✨ (火花)</td><td style="text-align:left;"><code>:sparkles:</code></td><td style="text-align:left;">引入新功能</td></tr><tr><td style="text-align:left;">🔖 (书签)</td><td style="text-align:left;"><code>:bookmark:</code></td><td style="text-align:left;">发行/版本标签</td></tr><tr><td style="text-align:left;">🐛 (bug)</td><td style="text-align:left;"><code>:bug:</code></td><td style="text-align:left;">修复 bug</td></tr><tr><td style="text-align:left;">🚑 (急救车)</td><td style="text-align:left;"><code>:ambulance:</code></td><td style="text-align:left;">重要补丁</td></tr><tr><td style="text-align:left;">🌐 (地球)</td><td style="text-align:left;"><code>:globe_with_meridians:</code></td><td style="text-align:left;">国际化与本地化</td></tr><tr><td style="text-align:left;">💄 (口红)</td><td style="text-align:left;"><code>:lipstick:</code></td><td style="text-align:left;">更新 UI 和样式文件</td></tr><tr><td style="text-align:left;">🎬 (场记板)</td><td style="text-align:left;"><code>:clapper:</code></td><td style="text-align:left;">更新演示/示例</td></tr><tr><td style="text-align:left;">🚨 (警车灯)</td><td style="text-align:left;"><code>:rotating_light:</code></td><td style="text-align:left;">移除 linter 警告</td></tr><tr><td style="text-align:left;">🔧 (扳手)</td><td style="text-align:left;"><code>:wrench:</code></td><td style="text-align:left;">修改配置文件</td></tr><tr><td style="text-align:left;">➕ (加号)</td><td style="text-align:left;"><code>:heavy_plus_sign:</code></td><td style="text-align:left;">增加一个依赖</td></tr><tr><td style="text-align:left;">➖ (减号)</td><td style="text-align:left;"><code>:heavy_minus_sign:</code></td><td style="text-align:left;">减少一个依赖</td></tr><tr><td style="text-align:left;">⬆️ (上升箭头)</td><td style="text-align:left;"><code>:arrow_up:</code></td><td style="text-align:left;">升级依赖</td></tr><tr><td style="text-align:left;">⬇️ (下降箭头)</td><td style="text-align:left;"><code>:arrow_down:</code></td><td style="text-align:left;">降级依赖</td></tr><tr><td style="text-align:left;">⚡ (闪电)<br>🐎 (赛马)</td><td style="text-align:left;"><code>:zap:</code><br><code>:racehorse:</code></td><td style="text-align:left;">提升性能</td></tr><tr><td style="text-align:left;">📈 (上升趋势图)</td><td style="text-align:left;"><code>:chart_with_upwards_trend:</code></td><td style="text-align:left;">添加分析或跟踪代码</td></tr><tr><td style="text-align:left;">🚀 (火箭)</td><td style="text-align:left;"><code>:rocket:</code></td><td style="text-align:left;">部署功能</td></tr><tr><td style="text-align:left;">✅ (白色复选框)</td><td style="text-align:left;"><code>:white_check_mark:</code></td><td style="text-align:left;">增加测试</td></tr><tr><td style="text-align:left;">📝 (备忘录)</td><td style="text-align:left;"><code>:memo:</code></td><td style="text-align:left;">撰写文档</td></tr><tr><td style="text-align:left;">🔨 (锤子)</td><td style="text-align:left;"><code>:hammer:</code></td><td style="text-align:left;">重大重构</td></tr><tr><td style="text-align:left;">🎨 (调色板)</td><td style="text-align:left;"><code>:art:</code></td><td style="text-align:left;">改进代码结构/代码格式</td></tr><tr><td style="text-align:left;">🔥 (火焰)</td><td style="text-align:left;"><code>:fire:</code></td><td style="text-align:left;">移除代码或文件</td></tr><tr><td style="text-align:left;">✏️ (铅笔)</td><td style="text-align:left;"><code>:pencil2:</code></td><td style="text-align:left;">修复 typo</td></tr><tr><td style="text-align:left;">🚧 (施工)</td><td style="text-align:left;"><code>:construction:</code></td><td style="text-align:left;">工作进行中</td></tr><tr><td style="text-align:left;">👷 (工人)</td><td style="text-align:left;"><code>:construction_worker:</code></td><td style="text-align:left;">添加 CI 构建系统</td></tr><tr><td style="text-align:left;">💚 (绿心)</td><td style="text-align:left;"><code>:green_heart:</code></td><td style="text-align:left;">修复 CI 构建问题</td></tr><tr><td style="text-align:left;">🔒 (锁)</td><td style="text-align:left;"><code>:lock:</code></td><td style="text-align:left;">修复安全问题</td></tr><tr><td style="text-align:left;">🐳 (鲸鱼)</td><td style="text-align:left;"><code>:whale:</code></td><td style="text-align:left;">Docker 相关工作</td></tr><tr><td style="text-align:left;">🍎 (苹果)</td><td style="text-align:left;"><code>:apple:</code></td><td style="text-align:left;">修复 macOS 下的问题</td></tr><tr><td style="text-align:left;">🐧 (企鹅)</td><td style="text-align:left;"><code>:penguin:</code></td><td style="text-align:left;">修复 Linux 下的问题</td></tr><tr><td style="text-align:left;">🏁 (旗帜)</td><td style="text-align:left;"><code>:checked_flag:</code></td><td style="text-align:left;">修复 Windows 下的问题</td></tr></tbody></table><p>最后附上gitmoji网站</p><p><a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noreferrer">https://gitmoji.carloscuesta.me</a></p><p>以及github支持的表情超市</p><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet" target="_blank" rel="noreferrer">https://www.webfx.com/tools/emoji-cheat-sheet</a></p><h2 id="git实用命令" tabindex="-1">git实用命令 <a class="header-anchor" href="#git实用命令" aria-label="Permalink to &quot;git实用命令&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> rebase</span><span style="color:#D19A66;"> -i</span><span style="color:#98C379;"> HEAD~4</span><span style="color:#98C379;"> 合并commit</span><span style="color:#98C379;"> 的记录</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#D19A66;"> --depth=1</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reflog</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#D19A66;"> -v</span><span style="color:#98C379;"> :查看仓库源</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#D19A66;"> -b</span><span style="color:#ABB2BF;"> [name]:创建并切换</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> -–hard</span><span style="color:#98C379;"> ID</span><span style="color:#98C379;"> :回退代码</span><span style="color:#98C379;">   git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> origin/master</span><span style="color:#98C379;"> 可以用来清空本地的代码</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> merge</span><span style="color:#ABB2BF;"> [name] :合并分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -l</span><span style="color:#98C379;"> :查看本地分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;"> :查看远程分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -a</span><span style="color:#98C379;"> :查看全部分支（远程的和本地的）</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> dev</span><span style="color:#98C379;"> develop</span><span style="color:#98C379;">   :换本地分支名字，然后删除远程的，提交下就可以同步更新</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -d</span><span style="color:#98C379;"> （分支名称）</span><span style="color:#98C379;"> :可以删除本地分支（在主分支中）</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#D19A66;"> --delete</span><span style="color:#ABB2BF;"> [name] :删除线上的分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#D19A66;"> --</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">fil</span><span style="color:#ABB2BF;">e&gt;  </span><span style="color:#98C379;">:丢弃工作区的修改</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> .</span><span style="color:#98C379;">  :本地所有修改的。没有的提交的，都返回到原来的状态</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> blame</span><span style="color:#98C379;"> src/pages/item/ItemTable/ItemTable.js</span><span style="color:#98C379;">  :查看当前谁修改过代码</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> HEAD</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">fil</span><span style="color:#ABB2BF;">e&gt;  </span><span style="color:#98C379;">:当你不但改乱了工作区某个文件的内容，还添加到了暂存时，想丢弃修改</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> --amend</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;">&#39;新提交消息&#39;</span><span style="color:#98C379;">  :提交信息出错\`</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> stash  :储藏</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> stash pop  :删除当前储藏</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;">  config </span><span style="color:#D19A66;">--global</span><span style="color:#98C379;">  user.name &#39;hezhenfeng&#39;  :修改git的用户名 </span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;">  config </span><span style="color:#D19A66;">--global</span><span style="color:#98C379;">  user.email &#39;feng960106@163.com&#39;  :修改git的邮箱</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config –-list   ：查看信息</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config </span><span style="color:#D19A66;">--global</span><span style="color:#98C379;"> credential.helper cache  :设置记住密码（默认15分钟）</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config credential.helper &#39;cache --timeout=3600&#39;  :设置记住密码（1h）</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config </span><span style="color:#D19A66;">--global</span><span style="color:#98C379;"> credential.helper store :永久</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="git-revert-和-git-reset-的区别" tabindex="-1">git revert 和 git reset 的区别 <a class="header-anchor" href="#git-revert-和-git-reset-的区别" aria-label="Permalink to &quot;git revert 和 git reset 的区别&quot;">​</a></h2><ul><li><p><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。</p></li><li><p>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交 ，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除， 因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</p></li><li><p><code>git reset</code> 是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</p></li></ul><h2 id="拉取代码-git-pull-rebase" tabindex="-1">拉取代码 git pull --rebase <a class="header-anchor" href="#拉取代码-git-pull-rebase" aria-label="Permalink to &quot;拉取代码 git pull --rebase&quot;">​</a></h2><p>假设提交线图在执行 pull 前是这样的：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">   A---B---C</span><span style="color:#98C379;">  remotes/origin/master</span></span>
<span class="line"><span style="color:#61AFEF;">                /</span></span>
<span class="line"><span style="color:#61AFEF;">           D---E---F---G</span><span style="color:#98C379;">  master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果是执行 git pull 后，提交线图会变成这样：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;"> A---B---C</span><span style="color:#98C379;"> remotes/origin/master</span></span>
<span class="line"><span style="color:#61AFEF;">                /</span><span style="color:#56B6C2;">         \\</span></span>
<span class="line"><span style="color:#98C379;">           D---E---F---G---H</span><span style="color:#98C379;"> master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>结果多出了 H 这个没必要的提交记录。如果是执行 git pull --rebase 的话，提交线图就会变成这样：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">  remotes/origin/master</span></span>
<span class="line"><span style="color:#ABB2BF;">                           |</span></span>
<span class="line"><span style="color:#61AFEF;">           D---E---A---B---C---F</span><span style="color:#61AFEF;">&#39;---G&#39;</span><span style="color:#98C379;">  master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>F G 两个提交通过 rebase 方式重新拼接在 C 之后，多余的分叉去掉了，目的达到</p><div class="danger custom-block"><p class="custom-block-title">注意：</p><p>git pull = git fetch + git merge</p><p>git pull --rebase = git fetch + git rebase</p></div><h2 id="rebase合并分支" tabindex="-1">rebase合并分支 <a class="header-anchor" href="#rebase合并分支" aria-label="Permalink to &quot;rebase合并分支&quot;">​</a></h2><p>master分支,节点链表指向为: c1&lt;--C3&lt;--c4</p><p>dev分支，节点链表指向为: c1&lt;--C2&lt;--c5</p><p>master分支和dev分支祖先为c1,假定在master分支上做git merge dev合并，得到的提交历史为:</p><p>c1&lt;--c2&lt;--c3&lt;--c4&lt;--c5&lt;--C6 (c1、 c4、 c5做了-次三方合并发现冲突,手工处理完毕后git add/commit增加了提交节点c6)</p><p>采用git merge dev处理提交log是按照时间戳先后顺序的。</p><p>假定采用的是git rebase处理过程为:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> checkout</span><span style="color:#E06C75;"> dev</span></span>
<span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> rebase</span><span style="color:#E06C75;"> master</span><span style="color:#7F848E;font-style:italic;"> //将dev上的c2、 c5在master分支 上做次衍合处理,并且保证在dev新增的commit 会排在 log 的最后</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//git提示出现了代码冲突，此处为之前埋下的冲突点，处理完毕后</span></span>
<span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> add</span><span style="color:#ABB2BF;"> . </span><span style="color:#7F848E;font-style:italic;">//添加冲突处理后的文件</span></span>
<span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> rebase</span><span style="color:#56B6C2;"> --</span><span style="color:#C678DD;">continue</span><span style="color:#7F848E;font-style:italic;">  //单加上--continue参数让rebase继续处理 ，无需执行 git-commit </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//开发完成, 在 master 上用 mergin 合并dev,不会自动产生合并分支的 &#39;commit&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><a href="https://imgssl.luxiaoquan.com/FtjtK3w9rjUXEip-hxjzSQhRSCSC?imageView2/2/w/640/interlace/1" target="_blank" rel="noreferrer"></a></p><h2 id="git分支命名" tabindex="-1">git分支命名 <a class="header-anchor" href="#git分支命名" aria-label="Permalink to &quot;git分支命名&quot;">​</a></h2><p>master：主分支，负责记录上线版本的迭代，该分支代码与线上代码是完全一致的。</p><p>develop：开发分支，该分支记录相对稳定的版本，所有的feature分支和bugfix分支都从该分支创建。其它分支为短期分支，其完成功能开发之后需要删除</p><p>feature/*：特性（功能）分支，用于开发新的功能，不同的功能创建不同的功能分支，功能分支开发完成并自测通过之后，需要合并到 develop 分支，之后删除该分支。</p><p>bugfix/*：bug修复分支，用于修复不紧急的bug，普通bug均需要创建bugfix分支开发，开发完成自测没问题后合并到 develop 分支后，删除该分支。</p><p>release/*：发布分支，用于代码上线准备，该分支从develop分支创建，创建之后由测试同学发布到测试环境进行测试，测试过程中发现bug需要开发人员在该release分支上进行bug修复，所有bug修复完后，在上线之前，需要合并该release分支到master分支和develop分支。</p><p>hotfix/*：紧急bug修复分支，该分支只有在紧急情况下使用，从master分支创建，用于紧急修复线上bug，修复完成后，需要合并该分支到master分支以便上线，同时需要再合并到develop分支。</p><h2 id="gitlab的key" tabindex="-1">gitlab的key <a class="header-anchor" href="#gitlab的key" aria-label="Permalink to &quot;gitlab的key&quot;">​</a></h2><p>ssh-keygen -t rsa -C &quot;<a href="mailto:feng960106@163.com" target="_blank" rel="noreferrer">feng960106@163.com</a>&quot;</p><p>cat ~/.ssh/id_rsa.pub</p><h2 id="迁移-github" tabindex="-1">迁移 github <a class="header-anchor" href="#迁移-github" aria-label="Permalink to &quot;迁移 github&quot;">​</a></h2><p>sed -i &#39;&#39; &quot;s/115.28.166.109/123.57.86.216/g&quot; .git/config</p><h2 id="git-无法添加文件夹下文件" tabindex="-1">git 无法添加文件夹下文件 <a class="header-anchor" href="#git-无法添加文件夹下文件" aria-label="Permalink to &quot;git 无法添加文件夹下文件&quot;">​</a></h2><p>最近做项目时，发现无法提交某个子文件夹下的文件。</p><p>google后发现可能是该子文件夹下有.git文件夹导致无法上传。</p><p>删除子文件夹下.git后，依然无法提交子文件夹下的文件。</p><p>继续google，</p><p>尝试以下方法：</p><p>git rm --cached directory git add directory</p><p><strong>注：</strong> directory为子文件夹的路径。</p><p>但是执行 git rm --cached directory 时，提示</p><blockquote><p>fatal: Unable to create &#39;xx/.git/index.lock&#39;: File exists.</p></blockquote><p>执行 <code>rm -f xx/.git/index.lock</code> 后解决</p><h2 id="扫盲-git" tabindex="-1">扫盲 .git <a class="header-anchor" href="#扫盲-git" aria-label="Permalink to &quot;扫盲 .git&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// .git</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E5C07B;">COMMIT_EDITMSG</span><span style="color:#ABB2BF;">  # </span><span style="color:#61AFEF;">最新一次提交的备注信息</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">并不是HEAD所指备注</span><span style="color:#ABB2BF;">)，</span><span style="color:#E06C75;">git系统不会用到</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">给用户一个参考</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">配置文件</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">项目用户名</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">邮箱在该文件配置</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">仓库的描述信息</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">主要给gitweb等git托管系统使用</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E5C07B;">FETCH_HEAD</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">是一个版本链接</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">指向着目前已经从远程仓库取下来的分支的末端版本</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E5C07B;">HEAD</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">映射到ref引用</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">即当前commit对象哈希值</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">该文件表示暂存区</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#E5C07B;">ORIG_HEAD</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">当前commit对象的前一个commit对象hash值</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">与logs</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">HEAD文件的最新一行的第一个hash值保持一致</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">hooks</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> #</span><span style="color:#E06C75;">Git执行特定事件</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">如commit</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">push</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">receive等</span><span style="color:#ABB2BF;">）</span><span style="color:#E06C75;">后触发运行的一些shell脚本</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">applypatch</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">msg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">commit</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">msg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">fsmonitor</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">watchman</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">post</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">update</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">applypatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">commit</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">merge</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">commit</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">prepare</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">commit</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">msg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">push</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">rebase</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">receive</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">│ └</span><span style="color:#E5C07B;">update</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sample</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">存放仓库的信息</span></span>
<span class="line"><span style="color:#ABB2BF;">│ └</span><span style="color:#E06C75;">exclude</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">logs</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">保存所有更新的引用记录</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E5C07B;">HEAD</span><span style="color:#ABB2BF;"> # (</span><span style="color:#E06C75;">切换前的commit对象hash值</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">切换后的commit对象hash值</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">切换者</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">切换者邮箱</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">切换时间</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">切换操作信息</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">refs</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ ├</span><span style="color:#E06C75;">stash</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">heads</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">所有分支提交信息</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">保存每个分支的commit对象链</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ │ ├</span><span style="color:#E06C75;">master</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">master分支的commit对象链</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ │ └</span><span style="color:#E06C75;">testchanges</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">testchanges分支的commit对象链</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">objects</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> #</span><span style="color:#E06C75;">对象目录</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">object有</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">commit</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">tree</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">blob</span><span style="color:#ABB2BF;">、</span><span style="color:#E06C75;">tag</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">08</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └8</span><span style="color:#E06C75;">aa22897a71f1ff5d34eedd8b30c35997a8ce8</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;">0</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └20</span><span style="color:#E06C75;">aead00e76e9afc1ee8775b2705c77e790cf6</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">12</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └</span><span style="color:#E06C75;">d5be03b603f88bc9611979039e58848afa647b</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">14</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └</span><span style="color:#E06C75;">ed3a8427cc35eec36784d7579db54646b098e9</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">15</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └</span><span style="color:#E06C75;">aa63597ef2de8f3574b2258a912c8ab63d0694</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">│ └</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">pack</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">refs</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> #</span><span style="color:#E06C75;">commit</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">tree</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">blob</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">tag对象的引用</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#E06C75;">stash</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">heads</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">当前分支的当前head指针</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">便于分支切换</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ ├</span><span style="color:#E06C75;">master</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">master分支当前head指针</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └</span><span style="color:#E06C75;">testchanges</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">testchanges分支当前head指针</span></span>
<span class="line"><span style="color:#ABB2BF;">│ ├</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">tags</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">保存所有的标签哈希值</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">保存first标签的哈希值</span></span>
<span class="line"><span style="color:#ABB2BF;">│ │ └</span><span style="color:#E06C75;">fsecond</span><span style="color:#ABB2BF;"> # </span><span style="color:#E06C75;">保存second标签的哈希值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="git获取最后一次提交的的时间和commit-id" tabindex="-1">git获取最后一次提交的的时间和commit id <a class="header-anchor" href="#git获取最后一次提交的的时间和commit-id" aria-label="Permalink to &quot;git获取最后一次提交的的时间和commit id&quot;">​</a></h2><p><strong>获取最后一次commit的时间</strong></p><p>git show --pretty=format:&quot;%ci %cr&quot; | head -1</p><p>2022-05-11 14:54:23 +0800 37 minutes ago</p><p><strong>获取最后一次提交的commit Id</strong></p><p>git rev-parse HEAD</p><p>31cab83b6cc7b844dc407291d47ac72f1d495690</p><p><strong>获取最后一次提交的short commit Id</strong></p><p>git rev-parse --short HEAD</p><p>31cab83b6</p><h2 id="git怎么删除所有tag" tabindex="-1">git怎么删除所有tag <a class="header-anchor" href="#git怎么删除所有tag" aria-label="Permalink to &quot;git怎么删除所有tag&quot;">​</a></h2><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 只能在终端用   命令后面有个空格</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">远端：  </span><span style="color:#C678DD;">git</span><span style="color:#ABB2BF;"> tag|grep </span><span style="color:#98C379;">&quot;2022&quot;</span><span style="color:#ABB2BF;">|xargs git push origin --delete tag  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">本地：  </span><span style="color:#C678DD;">git</span><span style="color:#ABB2BF;"> tag|grep </span><span style="color:#98C379;">&quot;2022&quot;</span><span style="color:#ABB2BF;">|xargs git tag -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>删除本地tag</p><p>git tag -d $(git tag -l)</p><p>拉取远程tag</p><p>git fetch</p><p>删除远程tag</p><p>git push origin --delete $(git tag -l)</p><p>删除本地tag</p><p>git tag -d $(git tag -l)</p><p>获取最后一次 tag 的名称</p><p>git describe --abbrev=0</p><h2 id="git放弃本地文件修改" tabindex="-1">git放弃本地文件修改 <a class="header-anchor" href="#git放弃本地文件修改" aria-label="Permalink to &quot;git放弃本地文件修改&quot;">​</a></h2><p><strong>未使用git add 缓存代码</strong></p><p>使用git checkout -- 文件名，注意中间有 --</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> checkout</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;"> filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>放弃所有文件修改 git checkout .</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> checkout</span><span style="color:#ABB2BF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此命令用来放弃掉所有还没有加入到缓存区（就是 git add 命令）的修改：内容修改与整个文件删除。 此命令不会删除新建的文件，因为新建的文件还没加入git管理系统中，所以对git来说是未知，只需手动删除即可。</p><p><strong>已使用git add 缓存代码，未使用git commit</strong></p><p>使用 git reset HEAD 文件名</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> reset</span><span style="color:#E5C07B;"> HEAD</span><span style="color:#E06C75;"> filename</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>放弃所有文件修改 git reset HEAD</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> reset</span><span style="color:#E5C07B;"> HEAD</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此命令用来清除 git 对于文件修改的缓存。相当于撤销 git add 命令所在的工作。在使用本命令后，本地的修改并不会消失，而是回到了第一步 <strong>1. 未使用git add 缓存代码，继续使用用git checkout --filename，就可以放弃本地修改</strong>。</p><p><strong>已经用 git commit 提交了代码</strong></p><p>使用 git reset --hard HEAD^ 来回退到上一次commit的状态。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> reset</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">hard</span><span style="color:#E5C07B;"> HEAD</span><span style="color:#56B6C2;">^</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者回退到任意版本git reset --hard commit id ，使用git log命令查看git提交历史和commit id。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> reset</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">hard</span><span style="color:#E06C75;"> commit</span><span style="color:#E06C75;"> id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-diff" tabindex="-1">git diff <a class="header-anchor" href="#git-diff" aria-label="Permalink to &quot;git diff&quot;">​</a></h2><p>git diff 命令可以对比两个版本的差异，具体来说包括：</p><ul><li><p>本地工作区和暂存区的diff信息：git diff 或者 git diff file</p></li><li><p>暂存区和版本库的diff信息（使用git add 将工作区修改保存到了暂存区后）：git diff --cached</p></li><li><p>版本库中不同commit、分支的diff信息（使用git commit 将暂存区修改提交到了版本库）：git diff commit1 commit2 或 git diff branch1 branch2</p></li><li><p>可以查看最近一次提交的版本与往过去时间线前数X个的版本之间的所有文件之间的增删改 git diff HEAD~X 或 git diff HEAD^1</p></li></ul><p><strong>如何使git diff写入stdout</strong></p><pre><code>- git --no-pager diff
</code></pre><h2 id="git-切换分支" tabindex="-1">git 切换分支 <a class="header-anchor" href="#git-切换分支" aria-label="Permalink to &quot;git 切换分支&quot;">​</a></h2><p>如果本地分支已经存在，你可以使用以下命令来切换到该分支：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> checkout</span><span style="color:#E06C75;"> branch</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你想要从远程分支创建一个新的本地分支，并且不确定本地是否已经存在该分支，那么可以使用以下命令来实现：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> checkout</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">b</span><span style="color:#E06C75;"> branch</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">name</span><span style="color:#E06C75;"> origin</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">branch</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你既不确定本地是否有这个分支，也不想进行区分，你可以使用以下命令：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> checkout</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;">B</span><span style="color:#E06C75;"> branch</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">name</span><span style="color:#E06C75;"> origin</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">branch</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>git checkout 命令的 -B 选项和 -b 选项在使用上有一些区别：</strong></p><p>-b 选项（小写）：</p><p>使用方式：<code>git checkout -b &lt;branch-name&gt; [&lt;start-point&gt;]</code> 如果指定的分支名称不存在，会创建一个新的本地分支，并将当前分支切换到这个新分支。 如果指定的分支名称已经存在，会产生一个错误，阻止分支的创建。你需要先删除同名的分支，然后再创建新的分支。 可以选择性地提供 <code>&lt;start-point&gt;</code> 参数，它可以是提交哈希、分支名等，用于指定新分支的起始点。</p><p>-B 选项（大写）：</p><p>使用方式：<code>git checkout -B &lt;branch-name&gt; [&lt;start-point&gt;]</code> 无论指定的分支名称是否已经存在，都会创建一个新的本地分支，并将当前分支切换到这个新分支。 如果同名的分支已经存在，会强制覆盖该分支，不会产生错误。这意味着同名分支的本地更改会被覆盖，所以请谨慎使用。 可以选择性地提供 <code>&lt;start-point&gt;</code> 参数，用于指定新分支的起始点。</p><h2 id="mac系统sourcetree一直提示输入密码的问题" tabindex="-1">mac系统sourceTree一直提示输入密码的问题 <a class="header-anchor" href="#mac系统sourcetree一直提示输入密码的问题" aria-label="Permalink to &quot;mac系统sourceTree一直提示输入密码的问题&quot;">​</a></h2><p>作为一个习惯使用 SourceTree 在 MacBook Pro 上提交代码的用户，我在 macOS 上安装了该应用程序。</p><p>然而，我发现每次提交代码都需要输入密码，这对我的效率和心情产生了不良影响。我花了很多时间尝试了网上提供的各种解决方法，但是遗憾的是，都无法解决这个问题。</p><p>这个密码输入的过程让我感到非常繁琐，</p><p>其实原因是因为没有拿到push的凭据</p><p>解决办法：</p><p>1、git config credential.helper store</p><p>这将告诉 Git 使用一个简单的凭据存储方式来记住你的用户名和密码。</p><p>2、 git pull 拉下代码</p><p>在弹出的对话框中，依次输入你的用户名和密码。请注意，输入密码时不会显示任何字符，但你可以正常输入。</p><p>现在就可以 正常push了</p><h2 id="mac下sourcetree无法执行pre-commit的解决方案" tabindex="-1">Mac下SourceTree无法执行pre-commit的解决方案 <a class="header-anchor" href="#mac下sourcetree无法执行pre-commit的解决方案" aria-label="Permalink to &quot;Mac下SourceTree无法执行pre-commit的解决方案&quot;">​</a></h2><p>问题背景 最近负责的Web项目中参与人数多了起来，很多人没法自觉地遵守编码规范、在提交代码之前不检查自己的代码格式，导致提交了代码之后无法通过流水线的代码质量检查。</p><p>我是mac环境下，由于使用了nvm，不能正确识别node路径，执行代码提交后，husky一直报错：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span>.husky/pre-commit: line 8: npm: command not found</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查询husky官方文档才知道如何解决：</p><p>创建~/.huskyrc文件，增加对nvm路径的支持：</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># ~/.huskyrc</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># This loads nvm.sh and sets the correct PATH before running hook</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> NVM_DIR=</span><span style="color:#98C379;">&quot;$</span><span style="color:#E06C75;">HOME</span><span style="color:#98C379;">/.nvm&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">[ -</span><span style="color:#C678DD;">s</span><span style="color:#98C379;"> &quot;$</span><span style="color:#E06C75;">NVM_DIR</span><span style="color:#98C379;">/nvm.sh&quot;</span><span style="color:#ABB2BF;"> ] &amp;&amp; \\. </span><span style="color:#98C379;">&quot;$</span><span style="color:#E06C75;">NVM_DIR</span><span style="color:#98C379;">/nvm.sh&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,130),p=[t];function o(r,c,i,d,y,g){return n(),a("div",null,p)}const m=s(e,[["render",o]]);export{b as __pageData,m as default};
