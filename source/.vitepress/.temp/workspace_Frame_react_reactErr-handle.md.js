import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"React 错误处理","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Frame/react/reactErr-handle.md","filePath":"workspace/Frame/react/reactErr-handle.md","lastUpdated":1730803283000}');
const _sfc_main = { name: "workspace/Frame/react/reactErr-handle.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="react-错误处理" tabindex="-1">React 错误处理 <a class="header-anchor" href="#react-错误处理" aria-label="Permalink to &quot;React 错误处理&quot;">​</a></h1><p>在构建应用时，错误是不可避免的。即使采用最佳的代码实践，运行时也可能会出现意外错误，导致应用崩溃。因此，处理错误是非常重要的。本文就来看看如何在 React 中捕获和处理错误，以及更强大的 React 错误处理方式！</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>那为什么要在 React 中捕获错误呢？因为从 React 16 开始，React 生命周期中的错误如果未被停止，整个应用就会自行卸载，导致崩溃。在此之前，即使组件中存在一些小错误，它也会保留在屏幕上，但是现在，UI中某些无关紧要的部分，甚至是无法控制的某些第三方库中的未捕获错误，都可能导致页面崩溃，出现白屏的现象，影响用户体验。所以，捕获并处理 React 中的错误至关重要。</p><p>在JavaScript中，我们可以使用 try...catch 来捕获错误，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> fetchData</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> async</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> () </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  try</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    return</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> await</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> fetch</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;https://some-url-that-might-fail.com&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  } </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">catch</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">    console</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">); </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    return</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>try...catch仅适用于命令式代码，例如数据获取；而不是适用于声明式代码，例如在组件中编写的 JSX 就是声明式代码。那该如何在 React 中捕获错误呢？幸运的是，在 React 16 中，引入了一个新概念：<strong>React Error Boundary</strong>。下面来看一下它是什么，以及如何使用。</p><h2 id="react-error-boundary" tabindex="-1">React Error Boundary <a class="header-anchor" href="#react-error-boundary" aria-label="Permalink to &quot;React Error Boundary&quot;">​</a></h2><p>React Error Boundary （错误边界）是 React 应用中错误处理的一种方式。它是一个 React 组件，可以捕获子组件树中任何位置的 JavaScript 错误，并记录这些错误，显示一个备选 UI，而不是一个崩溃的组件树（白屏）。它们就像一个 JavaScript 的 <code>catch {} </code>块，但是只针对组件。</p><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><p>在错误边界引入之前，组件内部的错误会不断传播并最终导致白屏或错误的 UI，影响用户体验。但是，使用错误边界，这些未处理的错误可以被有效地包含和管理。</p><p>我们可以在整个应用范围内设置错误边界，也可以在各个组件上进行更细粒度的控制。需要注意的是，错误边界只会捕获渲染时、生命周期方法和构造函数中的错误，但不会捕获以下错误：</p><p>  ● 事件处理（对于这种情况，需要使用常规的 <code>try/catch</code> 块<br>   ● 异步代码（例如，<code>setTimeout</code> 或 <code>requestAnimationFrame</code> 回调函数）<br>   ● 服务端渲染<br>   ● 错误发生在错误边界本身而不是其子组件中时</p><p>错误边界是在 React v16 中引入的，要使用错误边界，需要定义一个类组件，并添加以下生命周期方法之一或两个：<br>   ● <code>getDerivedStateFromError()</code>: 这个生命周期方法在错误抛出后渲染备选 UI。它在渲染阶段被调用，所以不允许有副作用。<br>   ● <code>componentDidCatch()</code>: 这个方法用于记录错误信息。它在提交阶段被调用，所以可以执行副作用。</p><p>下面来看一个 ErrorBoundary 类组件的例子，它实现了 <code>getDerivedStateFromError()</code> 和 <code>componentDidCatch()</code> 生命周期方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">class</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> extends</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> React</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Component</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  constructor</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">props</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B", "font-style": "italic" })}">    super</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">props</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">    this</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">state</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">hasError</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">false</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  static</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> getDerivedStateFromError</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">    // 更新 state，下一次渲染将展示备选 UI。</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">hasError</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">true</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  componentDidCatch</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">errorInfo</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">    console</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">log</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">errorInfo</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  render</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    if</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">this</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">state</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">hasError</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">      // 可以渲染任意自定义的备选 UI</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">      return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">h1</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;出错啦！&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">h1</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    return</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> this</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">props</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">children</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// 在组件中使用</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">class</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> App</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> extends</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> React</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Component</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  render</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">        &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;/</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    );</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>这里定义了一个名为 <code>ErrorBoundary</code> 的错误边界组件。它的构造函数初始化了状态对象，并设置 <code>hasError</code> 属性为 <code>false</code>，表示当前没有发生错误。</p><p>  ● <code>getDerivedStateFromError()</code> 方法在捕获到错误时会被调用。它接收一个 <code>error</code> 对象作为参数，并返回一个新的状态对象，将<br>   <code>hasError</code> 属性设置为 <code>true</code>，以便在下一次渲染时展示备选的 UI。<br>   ● <code>componentDidCatch()</code> 方法在捕获到错误后会被调用。在这个例子中，将错误和错误信息输出到控制台。</p><p>在 <code>render()</code> 方法中，根据<code> hasError</code> 的值来决定渲染原始子组件还是备选的 UI。如果 <code>hasError</code> 为 <code>true</code>，则渲染 <code>&lt;h1&gt;出错啦！&lt;/h1&gt;</code>，否则渲染原始子组件。在组件中使用错误边界时，将需要进行错误边界保护的组件包裹在 <code>&lt;ErrorBoundary&gt;</code> 组件中即可。</p><p>在React组件中，我们可以使用 Error Boundary 来包裹任何组件，这样就不会因为一个小组件的崩溃，而导致整个组件崩溃，致使出现白屏。只有出现错误的组件处不能正常渲染，而是渲染备选 UI。也方便我们快速查找是哪个组件出了问题。</p><h2 id="实现错误边界的通用设计模式" tabindex="-1">实现错误边界的通用设计模式 <a class="header-anchor" href="#实现错误边界的通用设计模式" aria-label="Permalink to &quot;实现错误边界的通用设计模式&quot;">​</a></h2><p>在实现 React 错误边界时，可以根据实际情况使用以下三种设计模式。</p><h4 id="组件级错误边界" tabindex="-1">组件级错误边界 <a class="header-anchor" href="#组件级错误边界" aria-label="Permalink to &quot;组件级错误边界&quot;">​</a></h4><p>这种方法涉及将单个组件包装在错误边界中。这提供了高度的细粒度，允许单独处理每个组件中的错误。如果一个组件崩溃，错误边界可以捕获错误并阻止其向上传播到组件树。这意味着只有崩溃的组件受到影响，其余的应用可以继续正常运行。</p><p>组件级错误边界在有彼此隔离且不共享状态的组件时特别有用。如果其中一个组件渲染失败，它不会影响其他组件。然而，如果许多组件需要拥有自己的错误边界，这种方法可能导致很多重复代码。</p><h4 id="布局级错误边界" tabindex="-1">布局级错误边界 <a class="header-anchor" href="#布局级错误边界" aria-label="Permalink to &quot;布局级错误边界&quot;">​</a></h4><p>布局级错误边界位于组件树中更高的位置，通常包装相关组件组。当有密切相关的组件并共享一个公共状态时，这是一个不错的选择。</p><p>当一个组件发生错误时，布局级别的错误边界可以捕获它并为整个组件组显示一个错误消息或备用 UI。这可以成为处理影响应用整个部分的错误的一种好方法，例如侧边栏或仪表板等。</p><p>然而，布局级错误边界比组件级粒度更大。一个组件的错误可能会影响整个组件组，即使其他组件可以正常工作。</p><h4 id="顶层错误边界" tabindex="-1">顶层错误边界 <a class="header-anchor" href="#顶层错误边界" aria-label="Permalink to &quot;顶层错误边界&quot;">​</a></h4><p>顶层错误边界位于组件树的最顶部。它是一个通用的解决方案，可以处理应用中发生的任何错误。这种方法确保如果应用中的任何地方发生错误，都可以捕获并进行优雅处理。</p><p>这可以防止整个应用在发生错误时崩溃。然而，顶层错误边界是粒度最大的方法。一个错误可能会影响整个应用，而不仅仅是错误发生的组件或组件组。</p><h2 id="react-error-boundary-1" tabindex="-1">react-error-boundary <a class="header-anchor" href="#react-error-boundary-1" aria-label="Permalink to &quot;react-error-boundary&quot;">​</a></h2><p>上面我们提到，React Error Boundary 有一些限制，无法处理某些特殊情况。下面就介绍一个更强大的 React 错误处理方式：<strong>react-error-boundary</strong>。它是一个小型的 React 错误处理库，它提供了增强的错误处理功能和更灵活的方法来处理 React 应用中的错误，使开发人员能够创建更强大且用户友好的错误处理机制。</p><p>react-error-boundary 使用了更现代化的方法，采用了 React Hooks 和函数组件，与当前 React 开发的趋势更加一致。它使用了一个简单的组件叫做 <code>ErrorBoundary</code>，可以用它来包裹潜在的容易出错的代码。</p><p>下面是 react-error-boundary 提供的 props：<br>   ● <code>FallbackComponent</code>：用于指定一个自定义组件，在错误边界内发生错误时进行渲染。它提供了灵活性，可以创建一个视觉上吸引人且信息丰富的用户界面来显示错误，并提供任何必要的操作。<br>   ● <code>fallbackRender</code>：类似于 <code>FallbackComponent</code>，该属性用于定义一个自定义的渲染函数来渲染错误回退界面。它提供了对渲染过程的更多控制，并允许进行更高级的错误处理逻辑。<br>   ● <code>onError</code>：其接受一个回调函数，在错误边界捕获到错误时调用该函数，并传递错误对象和组件堆栈跟踪信息。它使我们能够执行额外的操作，例如记录错误或将错误报告发送到外部服务。<br>   ● <code>onReset</code>：其接受一个回调函数，在错误边界成功重置后触发。它可以用于执行清理操作或在错误恢复后更新组件的状态。<br>   ● <code>fallbackProps</code>：允许向 <code>FallbackComponent</code> 或 <code>fallbackRender</code> 函数传递额外的 props。它可以用于提供上下文或附加数据给错误回退界面。   ● <code>retry</code>：布尔值，确定错误边界是否允许重试导致错误的操作。当设置为 <code>true</code> 时，<code>resetErrorBoundary</code> 函数可以从错误回退界面中调用以重试操作。</p><h2 id="errorboundary-组件" tabindex="-1">ErrorBoundary 组件 <a class="header-anchor" href="#errorboundary-组件" aria-label="Permalink to &quot;ErrorBoundary 组件&quot;">​</a></h2><p><code>react-error-boundary</code> 提供的 ErrorBoundary 组件有一个叫做 <code>fallbackRender</code>的属性，它接受一个函数或一个 React 元素，在捕获到错误时显示。此外，它还提供了一个 <code>resetKeys</code> 属性，可以在特定 <code>props</code> 改变时重置组件的状态。</p><p>react-error-boundary 的美妙之处在于避免了手动编写类组件和处理状态，在后台完成了所有工作，使开发人员能够专注于构建应用。下面来看一个在组件中使用 react-error-boundary 的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">import</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">from</span><span style="${ssrRenderStyle({ "color": "#98C379" })}"> &#39;react-error-boundary&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> MyFallbackComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">({ </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">resetErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> }) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">div</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> role</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;alert&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">p</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;出错啦:&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">p</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">pre</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">message</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">pre</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">button</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> onClick</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">resetErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;点击重试&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">button</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">div</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  )</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  // 可能会抛出 JavaScript 错误的一些组件逻辑</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> App</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      FallbackComponent</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">MyFallbackComponent</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      onReset</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">        // 重置应用状态</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      }</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      resetKeys</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">[</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;someKey&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">]</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  )</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在这个例子中，当 <code>ErrorBoundary</code> 捕获到错误时，会渲染 <code>MyFallbackComponent</code>。它显示错误消息并提供一个按钮来重置错误状态并尝试再次渲染该组件。<code>onReset</code> 属性用于清理在抛出错误之前发生的副作用，而 <code>resetKeys</code> 属性用于控制何时重置组件状态。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// 错误上报函数</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> logErrorToService</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">info</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  // 错误上报逻辑...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">  console</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;Caught an error:&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">info</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> App</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">    	FallbackComponent</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">ErrorFallback</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      onError</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">logErrorToService</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  );</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>react-error-boundary 最强大的功能之一是就是能够重置错误边界状态，即清除错误并尝试重新渲染组件树。当错误可能是短暂的，例如由于临时断开连接而发生的网络错误时，这是非常有用的。</p><p>可以使用提供给回退组件的 <code>resetErrorBoundary</code> 函数来重置错误边界。例如，可以在按钮点击时调用此函数，允许用户手动重试失败的操作。</p><p>ErrorBoundary 可以接受一个 <code>onReset</code> 属性，该属性是一个函数，在错误状态重置之前调用。此函数对于在错误后重新渲染之前执行任何清理或状态重置操作非常有用。</p><p><code>resetKeys</code> 属性是一个值数组，当更改时，会触发错误边界的重置。当知道更改某些 props 或状态值应该解决错误时，这非常有用。以下是如何使用这些属性的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">import</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">from</span><span style="${ssrRenderStyle({ "color": "#98C379" })}"> &#39;react-error-boundary&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> ErrorFallback</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">({ </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">resetErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> }) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">div</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> role</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;alert&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">p</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;出错啦:&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">p</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">pre</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">message</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">pre</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">button</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> onClick</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">resetErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;点击重试&lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">button</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">div</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  )</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">({ </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">someKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> }) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  // 可能会抛出 JS 错误的一些组件逻辑</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> App</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  const</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> [</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">someKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">setSomeKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">] </span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> React</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">useState</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">null</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">)</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      FallbackComponent</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">ErrorFallback</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      onReset</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">=&gt;</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> setSomeKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">null</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">)</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}"> // 在这里重置应用状态</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}">      resetKeys</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">[</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">someKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">]</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}"> // 当 someKey 更改时重置错误边界</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">MyComponent</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> someKey</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">someKey</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  )</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在这个例子中，如果 <code>MyComponent</code> 中捕获到错误，则渲染 <code>ErrorFallback</code> 组件，显示错误消息和一个“点击重试”按钮。当点击此按钮时，它调用 <code>resetErrorBoundary</code>，触发 <code>onReset</code> 函数并清除错误状态，从而再次渲染 <code>MyComponent</code>。如果 <code>someKey</code> prop 更改，则错误边界也会重置，提供了一种灵活的方式，根据应用程状态的更改恢复错误。</p><h2 id="useerrorhandler-hook" tabindex="-1">useErrorHandler Hook <a class="header-anchor" href="#useerrorhandler-hook" aria-label="Permalink to &quot;useErrorHandler Hook&quot;">​</a></h2><p>react-error-boundary 还提供了一个 useErrorBoundary Hook，它是一个自定义的 React Hook，允许在函数组件的任何地方抛出错误。被抛出的错误将被最近的错误边界捕获，就像从类组件的生命周期方法或渲染函数中抛出错误时会被错误边界捕获一样。</p><p>当处理异步代码时，useErrorHandler Hook 特别有用，因为抛出的错误不会被组件的错误边界捕获。以下是使用 useErrorHandler 的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">import</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">useErrorHandler</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">from</span><span style="${ssrRenderStyle({ "color": "#98C379" })}"> &#39;react-error-boundary&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> handleError</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> useErrorHandler</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">()</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  async</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> fetchData</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    try</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">      // 获取数据</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    } </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">catch</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">      handleError</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">error</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  );</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> App</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> (</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> FallbackComponent</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">ErrorFallback</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  );</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>在这个例子中，<code>MyComponent</code> 使用 <code>useErrorHandler</code> 获取一个可以用来处理错误的函数。∑ 函数是一个异步函数，用于获取数据并捕获错误。如果发生错误，它会传递给 <code>handleError</code> 函数，该函数会抛出错误，以便可以被 <code>ErrorBoundary</code> 捕获。</p><p><code>useErrorHandler</code> 提供了一种强大的方式来处理函数组件中的错误。它与 react-error-boundary 的 <code>ErrorBoundary</code> 组件无缝配合，使得在 React 中进行错误处理变得更加简单明了。</p><h2 id="witherrorboundary-hoc" tabindex="-1">withErrorBoundary HOC <a class="header-anchor" href="#witherrorboundary-hoc" aria-label="Permalink to &quot;withErrorBoundary HOC&quot;">​</a></h2><p>react-error-boundary 包还提供了一个 <code>withErrorBoundary</code> HOC 的解决方案。它是一个高阶组件，用于包装将给定的组件，以捕获该组件中的错误。这样做的好处是，在不改变组件原始实现或向组件树中添加额外 JSX 的情况下，为组件添加错误边界。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">import</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">withErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">from</span><span style="${ssrRenderStyle({ "color": "#98C379" })}"> &#39;react-error-boundary&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  // 组件逻辑</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> MyComponentWithErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> withErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">MyComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  FallbackComponent</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">ErrorFallback</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  onError</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">logErrorToService</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  onReset</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">handleReset</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  resetKeys</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: [</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;someKey&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">]</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">});</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> App</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> &lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">MyComponentWithErrorBoundary</span><span style="${ssrRenderStyle({ "color": "#D19A66", "font-style": "italic" })}"> someKey</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">{</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">someKey</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">}</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在这个例子中，使用 <code>withErrorBoundary</code> 将 <code>MyComponent</code> 包装在一个错误边界内。<code>withErrorBoundary</code> 的第二个参数是一个可选对象，可以在其中提供与 <code>ErrorBoundary</code> 组件相同的 props：<code>FallbackComponent</code>、<code>onError</code>、<code>onReset</code> 和 <code>resetKeys</code>。</p><p>这种高阶组件（HOC）的方法是在不修改组件实现的情况下为组件添加错误边界的一种优雅的解决方案，特别适用于无法使用 Hooks 的类组件。它展示了 react-error-boundary 在适应不同的编码风格和 React 开发范式方面的灵活性。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>  ● 简单易用：该库提供了简单直观的 API，易于理解和使用。它抽象了错误处理的复杂性，并向开发人员呈现了一种简单明了的方式来管理错误。<br>   ● 适用于函数组件 ：与传统的 React 错误边界需要使用类组件不同，react-error-boundary 是专为函数组件而设计的。它使用了 Hooks，更符合当前 React 开发的趋势。<br>   ● 灵活多样：该库提供了多种使用错误边界的方式，包括作为组件、高阶组件 (HOC) 和自定义 Hook。这种灵活性使开发人员能够根据自己的需求和编码风格选择最佳的方法。<br>   ● 可自定义的回退界面：该库允许在捕获到错误时显示可自定义的回退界面。这比应用崩溃或显示空白屏幕要提供更好的用户体验。<br>   ● 重置功能：该库可以重置错误状态，使应用能够从错误中恢复。这个功能对于可以在不需要完全重新加载页面的情况下解决的临时性错误特别有用。<br>   ● 错误报告：通过 onError 属性，错误可以被记录到错误报告服务中，提供了有价值的信息用于调试和解决问题。<br>   ● 社区和维护：该库在 React 社区中得到广泛使用，并且积极维护，因此可以期待定期的更新和改进。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>无论是使用类组件还是函数组件，react-error-boundary 都能满足需求。它灵活的API包括组件、高阶组件和自定义Hooks，提供了多种将错误处理集成到组件中的方式。此外，它支持自定义备用 UI、错误重置功能和错误报告，即使出现问题，也能确保顺畅的用户体验。</p><p>在 React 应用中使用 react-error-boundary 可以实现更健壮的错误处理、更容易的调试。通过使用这个库，可以花更少的时间管理错误，更多的时间专注于为构建出色的产品功能。</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("workspace/Frame/react/reactErr-handle.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const reactErrHandle = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  reactErrHandle as default
};
