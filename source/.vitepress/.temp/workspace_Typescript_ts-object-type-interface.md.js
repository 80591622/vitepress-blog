import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"TypeScr 误区","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Typescript/ts-object-type-interface.md","filePath":"workspace/Typescript/ts-object-type-interface.md","lastUpdated":1713942612000}');
const _sfc_main = { name: "workspace/Typescript/ts-object-type-interface.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="typescr-误区" tabindex="-1">TypeScr 误区 <a class="header-anchor" href="#typescr-误区" aria-label="Permalink to &quot;TypeScr 误区&quot;">​</a></h1><h2 id="object-vs-object-vs" tabindex="-1">Object vs object vs {} <a class="header-anchor" href="#object-vs-object-vs" aria-label="Permalink to &quot;Object vs object vs {}&quot;">​</a></h2><p>TypeScript 2.2 引入了被称为 <code>object</code> 类型的新类型，它用于表示非原始类型。在 JavaScript 中以下类型被视为原始类型：<code>string</code>、<code>boolean</code>、<code>number</code>、<code>bigint</code>、<code>symbol</code>、<code>null</code> 和 <code>undefined</code>。</p><p>所有其他类型均被视为非基本类型。新的 <code>object</code> 类型表示如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// All primitive types</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">type</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Primitive</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> | </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> | </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> | </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">bigint</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> | </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">symbol</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> | null | undefined;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// All non-primitive types</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">type</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> NonPrimitive</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> object;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>让我们看看 <code>object</code> 类型，如何让我们编写更精确的类型声明。</p><h2 id="使用-object-类型进行类型声明" tabindex="-1">使用 object 类型进行类型声明 <a class="header-anchor" href="#使用-object-类型进行类型声明" aria-label="Permalink to &quot;使用 object 类型进行类型声明&quot;">​</a></h2><p>随着 TypeScript 2.2 的发布，标准库的类型声明已经更新，以使用新的对象类型。例如，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noreferrer"><code>Object.create()</code></a> 和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="noreferrer"><code>Object.setPrototypeOf()</code></a> 方法，现在需要为它们的原型参数指定 <code>object | null</code> 类型：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// node_modules/typescript/lib/lib.es5.d.ts</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ObjectConstructor</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">o</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: object | null): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  setPrototypeOf</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">o</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">proto</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: object | null): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  // ...</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>将原始类型作为原型传递给 <code>Object.setPrototypeOf()</code> 或 <code>Object.create()</code> 将导致在运行时抛出类型错误。TypeScript 现在能够捕获这些错误，并在编译时提示相应的错误：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> proto</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">proto</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);     </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">null</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);      </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">undefined</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">); </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">1337</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);      </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">true</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);      </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">create</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;oops&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);    </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>object</code> 类型的另一个用例是作为 ES2015 的一部分引入的 WeakMap 数据结构。它的键必须是对象，不能是原始值。这个要求现在反映在类型定义中：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> WeakMap</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">K</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> extends</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> object, </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">V</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">&gt; {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  delete</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">key</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">K</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  get</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">key</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">K</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">V</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> | undefined;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  has</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">key</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">K</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  set</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">key</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">K</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">value</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">V</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): this;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="对比-object-vs-object-vs" tabindex="-1">对比 Object vs object vs {} <a class="header-anchor" href="#对比-object-vs-object-vs" aria-label="Permalink to &quot;对比 Object vs object vs {}&quot;">​</a></h2><p>也许令人困惑的是，TypeScript 定义了几个类型，它们有相似的名字，但是代表不同的概念：</p><ul><li><code>object</code></li><li><code>Object</code></li><li><code>{}</code></li></ul><p>我们已经看到了上面的新对象类型。现在让我们讨论 <code>Object</code> 和 <code>{}</code> 表示什么。</p><h3 id="object-类型" tabindex="-1">Object 类型 <a class="header-anchor" href="#object-类型" aria-label="Permalink to &quot;Object 类型&quot;">​</a></h3><p>TypeScript 定义了另一个与新的 <code>object</code> 类型几乎同名的类型，那就是 <code>Object</code> 类型。该类型是所有 Object 类的实例的类型。它由以下两个接口来定义：</p><ul><li>Object 接口定义了 Object.prototype 原型对象上的属性；</li><li>ObjectConstructor 接口定义了 Object 类的属性。</li></ul><p>下面我们来看一下上述两个接口的相关定义：</p><p>1、<code>Object</code> 接口定义</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// node_modules/typescript/lib/lib.es5.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  constructor</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Function</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  toString</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  toLocaleString</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  valueOf</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  hasOwnProperty</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">v</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">PropertyKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  isPrototypeOf</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">v</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  propertyIsEnumerable</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">v</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">PropertyKey</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>2、<code>ObjectConstructor</code> 接口定义</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// node_modules/typescript/lib/lib.es5.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ObjectConstructor</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  /** Invocation via \`new\` */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  new</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">value</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">?</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  /** Invocation via function calls */</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  (</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">value</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">?</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  readonly</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> prototype</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  getPrototypeOf</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">o</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">any</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">  // ···</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">declare</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> var</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ObjectConstructor</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Object 类的所有实例都继承了 Object 接口中的所有属性。我们可以看到，如果我们创建一个返回其参数的函数：</p><p>传入一个 Object 对象的实例，它总是会满足该函数的返回类型 —— 即要求返回值包含一个 toString() 方法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Object: Provides functionality common to all JavaScript objects.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> f</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): { </span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">toString</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(): </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">  return</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>而 <code>object</code> 类型，它用于表示非原始类型（undefined, null, boolean, number, bigint, string, symbol）。使用这种类型，我们不能访问值的任何属性。</p><h3 id="object-vs-object" tabindex="-1">Object vs object <a class="header-anchor" href="#object-vs-object" aria-label="Permalink to &quot;Object vs object&quot;">​</a></h3><p>有趣的是，类型 <code>Object</code> 包括原始值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> func1</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) { }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">func1</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;semlinker&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">); </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>为什么？</p><p><code>Object.prototype</code> 的属性也可以通过原始值访问：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;semlinker&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">hasOwnProperty</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> ===</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">prototype</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">hasOwnProperty</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>感兴趣的读者，可以自行了解一下 “JavaScript 装箱和拆箱” 的相关内容。</p></blockquote><p>相反，<code>object</code> 类型不包括原始值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> func2</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: object) { }</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Argument of type &#39;&quot;semlinker&quot;&#39; </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// is not assignable to parameter of type &#39;object&#39;.(2345)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">func2</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;semlinker&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">); </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>需要注意的是，当对 Object 类型的变量进行赋值时，如果值对象属性名与 Object 接口中的属性冲突，则 TypeScript 编译器会提示相应的错误：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Type &#39;() =&gt; number&#39; is not assignable to type </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// &#39;() =&gt; string&#39;.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Type &#39;number&#39; is not assignable to type &#39;string&#39;.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> obj1</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">   toString</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() { </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">return</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 123</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>而对于 object 类型来说，TypeScript 编译器不会提示任何错误：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> obj2</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: object </span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  toString</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">() { </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">return</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 123</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>另外在处理 object 类型和字符串索引对象类型的赋值操作时，也要特别注意。比如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">let</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> strictTypeHeaders</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: { [</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">key</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">]: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> } </span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {};</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">let</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> header</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: object </span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}">=</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {};</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">header</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> strictTypeHeaders</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Type &#39;object&#39; is not assignable to type &#39;{ [key: string]: string; }&#39;.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">strictTypeHeaders</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> header</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在上述例子中，最后一行会出现编译错误，这是因为 <code>{ [key: string]: string }</code> 类型相比 <code>object</code> 类型更加精确。而 <code>header = strictTypeHeaders;</code> 这一行却没有提示任何错误，是因为这两种类型都是非基本类型，<code>object</code> 类型比 <code>{ [key: string]: string }</code> 类型更加通用。</p><h3 id="空类型" tabindex="-1">空类型 {} <a class="header-anchor" href="#空类型" aria-label="Permalink to &quot;空类型 {}&quot;">​</a></h3><p>还有另一种类型与之非常相似，即空类型：<code>{}</code>。它描述了一个没有成员的对象。当你试图访问这样一个对象的任意属性时，TypeScript 会产生一个编译时错误：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Type {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> obj</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error: Property &#39;prop&#39; does not exist on type &#39;{}&#39;.</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">obj</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">prop</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#98C379" })}"> &quot;semlinker&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>但是，你仍然可以使用在 Object 类型上定义的所有属性和方法，这些属性和方法可通过 JavaScript 的原型链隐式地使用：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Type {}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> obj</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// &quot;[object Object]&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">obj</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">toString</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 JavaScript 中创建一个表示二维坐标点的对象很简单：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {}; </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">x</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">y</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然而以上代码在 TypeScript 中，每个赋值语句都会产生错误：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {}; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// (A)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Property &#39;x&#39; does not exist on type &#39;{}&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">x</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Property &#39;y&#39; does not exist on type &#39;{}&#39;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">y</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为第 A 行中的 pt 类型是根据它的值 {} 推断出来的，你只可以对已知的属性赋值。这个问题怎么解决呢？有些读者可能会先想到接口，比如这样子：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Point</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  y</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Type &#39;{}&#39; is missing the following </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// properties from type &#39;Point&#39;: x, y(2739)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Point</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {}; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">x</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">y</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>很可惜对于以上的方案，TypeScript 编译器仍会提示错误。那么这个问题该如何解决呢？其实我们可以直接通过对象字面量进行赋值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  y</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>而如果你需要一步一步地创建对象，你可以使用类型断言（as）来消除 TypeScript 的类型检查：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {} </span><span style="${ssrRenderStyle({ "color": "#C678DD" })}">as</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Point</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">x</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">y</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#D19A66" })}"> 4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是更好的方法是声明变量的类型并一次性构建对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Point</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  y</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>另外在使用 <code>Object.assign</code> 方法合并多个对象的时候，你可能也会遇到以下问题：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">666</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">y</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">888</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> id</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">name</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;semlinker&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> namedPoint</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {};</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Object</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">assign</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">namedPoint</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">id</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">);</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Property &#39;name&#39; does not exist on type &#39;{}&#39;.(2339)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">namedPoint</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">name</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这时候你可以使用对象展开运算符 <code>...</code> 来解决上述问题：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> pt</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">666</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">y</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#D19A66" })}">888</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> id</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">name</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&quot;semlinker&quot;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> namedPoint</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {...</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">pt</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">, ...</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">id</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">//(property) name: string</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">namedPoint</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">name</span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}"> // Ok</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="对象字面量类型-vs-接口类型" tabindex="-1">对象字面量类型 vs 接口类型 <a class="header-anchor" href="#对象字面量类型-vs-接口类型" aria-label="Permalink to &quot;对象字面量类型 vs 接口类型&quot;">​</a></h2><p>我们除了可以通过 Object 和 object 类型来描述对象之外，也可以通过对象的属性来描述对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Object literal type</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">let</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> obj3</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">prop</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> };</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Interface</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ObjectType</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  prop</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">let</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> obj4</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ObjectType</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在 TypeScript 中有两种定义对象类型的方法，它们非常相似：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Object literal type</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">type</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ObjType1</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  a</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  b</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  c</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Interface</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ObjType2</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  a</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">boolean</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  b</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  c</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在以上代码中，我们使用分号或逗号作为分隔符。尾随分隔符是允许的，也是可选的。好的，那么现在问题来了，对象字面量类型和接口类型之间有什么区别呢？下面我从以下几个方面来分析一下它们之间的区别：</p><h2 id="内联" tabindex="-1">内联 <a class="header-anchor" href="#内联" aria-label="Permalink to &quot;内联&quot;">​</a></h2><p>对象字面量类型可以内联，而接口不能：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Inlined object literal type:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> f1</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: { </span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">prop</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> }) {}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">function</span><span style="${ssrRenderStyle({ "color": "#61AFEF" })}"> f2</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">ObjectInterface</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {} </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// referenced interface</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> ObjectInterface</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  prop</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="名称重复" tabindex="-1">名称重复 <a class="header-anchor" href="#名称重复" aria-label="Permalink to &quot;名称重复&quot;">​</a></h2><p>含有重复名称的类型别名是非法的：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// @ts-ignore: Duplicate identifier &#39;PersonAlias&#39;. (2300)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">type</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> PersonAlias</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">first</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// @ts-ignore: Duplicate identifier &#39;PersonAlias&#39;. (2300)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">type</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> PersonAlias</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">last</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>TypeScript 2.6 支持在 .ts 文件中通过在报错一行上方使用 <code>// @ts-ignore</code> 来忽略错误。</p><p><code>// @ts-ignore</code> 注释会忽略下一行中产生的所有错误。建议实践中在 <code>@ts-ignore</code>之后添加相关提示，解释忽略了什么错误。</p><p>请注意，这个注释仅会隐藏报错，并且我们建议你少使用这一注释。</p></blockquote><p>相反，含有重复名称的接口将会被合并：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> PersonInterface</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  first</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> PersonInterface</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  last</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">const</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> sem</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">PersonInterface</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  first</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;Jiabao&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  last</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#98C379" })}">&#39;Huang&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="映射类型" tabindex="-1">映射类型 <a class="header-anchor" href="#映射类型" aria-label="Permalink to &quot;映射类型&quot;">​</a></h2><p>对于映射类型（A行），我们需要使用对象字面量类型：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Point</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  x</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  y</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">number</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">type</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> PointCopy1</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  [</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Key</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> in</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> keyof</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> Point</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">]: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Point</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">[</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">Key</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">]; </span><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// (A)</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// Syntax error:</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// interface PointCopy2 {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">//   [Key in keyof Point]: Point[Key];</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#7F848E", "font-style": "italic" })}">// };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="多态-this-类型" tabindex="-1">多态 this 类型 <a class="header-anchor" href="#多态-this-类型" aria-label="Permalink to &quot;多态 this 类型&quot;">​</a></h2><p>多态 this 类型仅适用于接口：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">interface</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> AddsStrings</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  add</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">str</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">): this;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">};</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">class</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> StringBuilder</span><span style="${ssrRenderStyle({ "color": "#C678DD" })}"> implements</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> AddsStrings</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}"> {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E06C75" })}">  result</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> =</span><span style="${ssrRenderStyle({ "color": "#98C379" })}"> &#39;&#39;</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#61AFEF" })}">  add</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">(</span><span style="${ssrRenderStyle({ "color": "#E06C75", "font-style": "italic" })}">str</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">: </span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">string</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">) {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E5C07B" })}">    this</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">.</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}">result</span><span style="${ssrRenderStyle({ "color": "#56B6C2" })}"> +=</span><span style="${ssrRenderStyle({ "color": "#E06C75" })}"> str</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#C678DD" })}">    return</span><span style="${ssrRenderStyle({ "color": "#E5C07B" })}"> this</span><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#ABB2BF" })}">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="type-和-interface的区别" tabindex="-1">type 和 interface的区别 <a class="header-anchor" href="#type-和-interface的区别" aria-label="Permalink to &quot;type 和 interface的区别&quot;">​</a></h2><ol><li>type类型别名，可以定义基础类型，元组等</li><li>type不可以继承</li><li>type不会创建一个真正的新的类名</li><li>类型别名无法被实现implements，而接口可以被派生类实现</li><li>类型别名重名会抛出错误，接口重名是会产生合并</li></ol><h2 id="参考资源" tabindex="-1">参考资源 <a class="header-anchor" href="#参考资源" aria-label="Permalink to &quot;参考资源&quot;">​</a></h2><ul><li><a href="https://mariusschulz.com/blog/the-object-type-in-typescript" target="_blank" rel="noreferrer">the-object-type-in-typescript</a></li><li><a href="https://2ality.com/2020/01/typing-objects-typescript.html" target="_blank" rel="noreferrer">typing-objects-typescript</a></li><li><a href="https://stackoverflow.com/questions/49464634/difference-between-object-and-in-typescript" target="_blank" rel="noreferrer">difference-between-object-and-in-typescript</a></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("workspace/Typescript/ts-object-type-interface.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const tsObjectTypeInterface = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  tsObjectTypeInterface as default
};
