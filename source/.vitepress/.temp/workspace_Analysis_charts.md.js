import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"数据统计","description":"","frontmatter":{},"headers":[],"relativePath":"workspace/Analysis/charts.md","filePath":"workspace/Analysis/charts.md","lastUpdated":1714231776000}');
const _sfc_main = { name: "workspace/Analysis/charts.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="数据统计" tabindex="-1">数据统计 <a class="header-anchor" href="#数据统计" aria-label="Permalink to &quot;数据统计&quot;">​</a></h1><h2 id="简要分析下数据统计的几个框架" tabindex="-1">简要分析下数据统计的几个框架 <a class="header-anchor" href="#简要分析下数据统计的几个框架" aria-label="Permalink to &quot;简要分析下数据统计的几个框架&quot;">​</a></h2><h2 id="echarts-推荐五星" tabindex="-1">ECharts(推荐五星) <a class="header-anchor" href="#echarts-推荐五星" aria-label="Permalink to &quot;ECharts(推荐五星)&quot;">​</a></h2><p>ECharts，一个纯 Javascript 的图表库，可以流畅的运行在<code>PC和移动</code>设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的 Canvas 类库 ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。</p><p>ECharts是一个成熟的图表库， 使用方便、图表种类多、容易上手、社区强大。文档资源也比较丰富</p><h2 id="g2" tabindex="-1">G2 <a class="header-anchor" href="#g2" aria-label="Permalink to &quot;G2&quot;">​</a></h2><p><a href="https://www.yuque.com/antv/g2-docs/api-g2" target="_blank" rel="noreferrer">文档</a></p><p>G2 是一套基于可视化编码的图形语法，以数据驱动，具有高度的易用性和扩展性，用户无需关注各种繁琐的实现细节，一条语句即可构建出各种各样的可交互的统计图表。</p><p><strong>特性</strong></p><ul><li>简单、易用</li><li>完备的可视化编码</li><li>强大的扩展能力</li></ul><h2 id="bizcharts-推荐四星半" tabindex="-1">BizCharts(推荐四星半) <a class="header-anchor" href="#bizcharts-推荐四星半" aria-label="Permalink to &quot;BizCharts(推荐四星半)&quot;">​</a></h2><p>超强的<code>react的模块化</code>开发，社区相对echarts还是差点</p><p>在 React 环境下使用 G2，我们推荐可以尝试使用BizCharts这个产品都是基于 G2 的 React 版本封装，使用体验更符合 React 技术栈的习惯</p><h2 id="g6" tabindex="-1">G6 <a class="header-anchor" href="#g6" aria-label="Permalink to &quot;G6&quot;">​</a></h2><p><a href="https://www.yuque.com/antv/g6" target="_blank" rel="noreferrer">文档</a></p><p>在我看来他就是做<code>流程图</code>渲染的，树图，脑图，流程图</p><h2 id="f2" tabindex="-1">F2 <a class="header-anchor" href="#f2" aria-label="Permalink to &quot;F2&quot;">​</a></h2><p><a href="https://www.yuque.com/antv/f2/api-index" target="_blank" rel="noreferrer">文档</a></p><p>F2 是一个专注于移动，开箱即用的可视化解决方案，<code>完美支持 H5 环境同时兼容多种环境（Node, 小程序，Weex）</code>，完备的图形语法理论，满足你的各种可视化需求，专业的移动设计指引为你带来最佳的移动端图表体验。</p><h2 id="l7" tabindex="-1">L7 <a class="header-anchor" href="#l7" aria-label="Permalink to &quot;L7&quot;">​</a></h2><p><a href="https://www.yuque.com/antv/l7" target="_blank" rel="noreferrer">文档</a></p><p>L7 中的 L 代表 Location，7 代表世界七大洲，寓意能为全球位置数据提供可视化能力。L7 的目标是提供一套<code>地理空间</code>数据可视化框架，易用易扩展，支持海量数据的高性能和 3D 高质量渲染，安全可靠（无地图法务风险）的地理空间数据可视化解决方案。</p><p>L7 和 React结合使用可与参考<a href="https://github.com/lzxue/l7_react_template" target="_blank" rel="noreferrer">demo</a></p><p>L7 依赖高德地图，目前高德地图只支持在线引入，因此在react使用L7需要动态加载 高德jsapi, jsapi加载完成后再进行L7 scene初始化。</p><h2 id="highchart" tabindex="-1">HighChart <a class="header-anchor" href="#highchart" aria-label="Permalink to &quot;HighChart&quot;">​</a></h2><p>HighChart 是一个用纯 JavaScript 编写的一个图表库， 能够很简单便捷的在 Web 网站或是 Web 应用程序添加有交互性的图表，并且免费提供给个人学习、个人网站和<code>非商业</code>用途使用</p><p>对于商业用途，只需要支付<code>少量的</code> 授权费用 即可使用我们的产品，同时我们会提供相应的 技术支持服务</p><p>Highcharts 系列软件包含 <code>Highcharts JS，Highstock JS，Highmaps JS</code> 共三款软件</p><p>少量的 ？？ 我擦 这是少量？，分这么多的软件包就是为了收费</p><h2 id="d3js" tabindex="-1">D3js <a class="header-anchor" href="#d3js" aria-label="Permalink to &quot;D3js&quot;">​</a></h2><p><code>如果技术够硬，可以选择D3.js</code></p><p>相对于echart、 highchart等其他图表库算是一个比较<code>底层的可视化工具</code>，简单来讲他<code>不提供任何一种现成的图表</code>， 所有的图表都是我们在它的库里挑选合适的方法构建而成。</p><p>d3复杂很多但是也强大自由的多，另外因为d3基于svg所以修改图表的样式和结构也会方便很多，但是同样是这个原因， d3的性能比canvas类库差了不少，dom毕竟是拖累浏览器性能的罪魁祸首。顺口提一句，d3也是可以基于canvas构建图表的</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("workspace/Analysis/charts.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const charts = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  charts as default
};
